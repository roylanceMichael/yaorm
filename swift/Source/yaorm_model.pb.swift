/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaorm_model.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "org.roylance.yaorm"

public enum Org_Roylance_Yaorm_ProtobufType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case none // = 0
  case double // = 1
  case float // = 2
  case int32 // = 3
  case int64 // = 4
  case uint32 // = 5
  case uint64 // = 6
  case sint32 // = 7
  case sint64 // = 8
  case fixed32 // = 9
  case fixed64 // = 10
  case sfixed32 // = 11
  case sfixed64 // = 12
  case bool // = 13
  case string // = 14
  case bytes // = 15
  case proto // = 16
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "DOUBLE"),
    2: .same(proto: "FLOAT"),
    3: .same(proto: "INT32"),
    4: .same(proto: "INT64"),
    5: .same(proto: "UINT32"),
    6: .same(proto: "UINT64"),
    7: .same(proto: "SINT32"),
    8: .same(proto: "SINT64"),
    9: .same(proto: "FIXED32"),
    10: .same(proto: "FIXED64"),
    11: .same(proto: "SFIXED32"),
    12: .same(proto: "SFIXED64"),
    13: .same(proto: "BOOL"),
    14: .same(proto: "STRING"),
    15: .same(proto: "BYTES"),
    16: .same(proto: "PROTO"),
  ]

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .double
    case 2: self = .float
    case 3: self = .int32
    case 4: self = .int64
    case 5: self = .uint32
    case 6: self = .uint64
    case 7: self = .sint32
    case 8: self = .sint64
    case 9: self = .fixed32
    case 10: self = .fixed64
    case 11: self = .sfixed32
    case 12: self = .sfixed64
    case 13: self = .bool
    case 14: self = .string
    case 15: self = .bytes
    case 16: self = .proto
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .double: return 1
    case .float: return 2
    case .int32: return 3
    case .int64: return 4
    case .uint32: return 5
    case .uint64: return 6
    case .sint32: return 7
    case .sint64: return 8
    case .fixed32: return 9
    case .fixed64: return 10
    case .sfixed32: return 11
    case .sfixed64: return 12
    case .bool: return 13
    case .string: return 14
    case .bytes: return 15
    case .proto: return 16
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yaorm_SelectFunctionType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case noneSelectFunctionType // = 0
  case countSelectFunctionType // = 1
  case maxSelectFunctionType // = 2
  case minSelectFunctionType // = 3
  case sumSelectFunctionType // = 4
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE_SELECT_FUNCTION_TYPE"),
    1: .same(proto: "COUNT_SELECT_FUNCTION_TYPE"),
    2: .same(proto: "MAX_SELECT_FUNCTION_TYPE"),
    3: .same(proto: "MIN_SELECT_FUNCTION_TYPE"),
    4: .same(proto: "SUM_SELECT_FUNCTION_TYPE"),
  ]

  public init() {
    self = .noneSelectFunctionType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noneSelectFunctionType
    case 1: self = .countSelectFunctionType
    case 2: self = .maxSelectFunctionType
    case 3: self = .minSelectFunctionType
    case 4: self = .sumSelectFunctionType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noneSelectFunctionType: return 0
    case .countSelectFunctionType: return 1
    case .maxSelectFunctionType: return 2
    case .minSelectFunctionType: return 3
    case .sumSelectFunctionType: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yaorm_OrderByType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case asc // = 0
  case desc // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ASC"),
    1: .same(proto: "DESC"),
  ]

  public init() {
    self = .asc
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .asc
    case 1: self = .desc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .asc: return 0
    case .desc: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Org_Roylance_Yaorm_ProtoTypeToSqlType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProtoTypeToSqlType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proto_type"),
    2: .standard(proto: "sql_type"),
  ]

  public var protoType: Org_Roylance_Yaorm_ProtobufType = Org_Roylance_Yaorm_ProtobufType.none

  public var sqlType: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &protoType)
      case 2: try decoder.decodeSingularStringField(value: &sqlType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if protoType != Org_Roylance_Yaorm_ProtobufType.none {
      try visitor.visitSingularEnumField(value: protoType, fieldNumber: 1)
    }
    if !sqlType.isEmpty {
      try visitor.visitSingularStringField(value: sqlType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_ProtoTypeToSqlType) -> Bool {
    if protoType != other.protoType {return false}
    if sqlType != other.sqlType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_ProtoTypeToSqlTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProtoTypeToSqlTypes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
  ]

  public var results: [Org_Roylance_Yaorm_ProtoTypeToSqlType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &results)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !results.isEmpty {
      try visitor.visitRepeatedMessageField(value: results, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_ProtoTypeToSqlTypes) -> Bool {
    if results != other.results {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_WhereClause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WhereClause"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "name_and_property"),
    2: .standard(proto: "operator_type"),
    3: .standard(proto: "connecting_and_or"),
    4: .standard(proto: "connecting_where_clause"),
    5: .standard(proto: "in_items"),
  ]

  private class _StorageClass {
    var _nameAndProperty: Org_Roylance_Yaorm_Column? = nil
    var _operatorType: Org_Roylance_Yaorm_WhereClause.OperatorType = Org_Roylance_Yaorm_WhereClause.OperatorType.equals
    var _connectingAndOr: Org_Roylance_Yaorm_WhereClause.ConnectingAndOr = Org_Roylance_Yaorm_WhereClause.ConnectingAndOr.none
    var _connectingWhereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _inItems: [String] = []

    init() {}

    init(copying source: _StorageClass) {
      _nameAndProperty = source._nameAndProperty
      _operatorType = source._operatorType
      _connectingAndOr = source._connectingAndOr
      _connectingWhereClause = source._connectingWhereClause
      _inItems = source._inItems
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var nameAndProperty: Org_Roylance_Yaorm_Column {
    get {return _storage._nameAndProperty ?? Org_Roylance_Yaorm_Column()}
    set {_uniqueStorage()._nameAndProperty = newValue}
  }
  public var hasNameAndProperty: Bool {
    return _storage._nameAndProperty != nil
  }
  public mutating func clearNameAndProperty() {
    return _storage._nameAndProperty = nil
  }

  public var operatorType: Org_Roylance_Yaorm_WhereClause.OperatorType {
    get {return _storage._operatorType}
    set {_uniqueStorage()._operatorType = newValue}
  }

  public var connectingAndOr: Org_Roylance_Yaorm_WhereClause.ConnectingAndOr {
    get {return _storage._connectingAndOr}
    set {_uniqueStorage()._connectingAndOr = newValue}
  }

  public var connectingWhereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._connectingWhereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._connectingWhereClause = newValue}
  }
  public var hasConnectingWhereClause: Bool {
    return _storage._connectingWhereClause != nil
  }
  public mutating func clearConnectingWhereClause() {
    return _storage._connectingWhereClause = nil
  }

  public var inItems: [String] {
    get {return _storage._inItems}
    set {_uniqueStorage()._inItems = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OperatorType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case equals // = 0
    case greaterThan // = 1
    case lessThan // = 2
    case notEquals // = 3
    case `in` // = 4
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "EQUALS"),
      1: .same(proto: "GREATER_THAN"),
      2: .same(proto: "LESS_THAN"),
      3: .same(proto: "NOT_EQUALS"),
      4: .same(proto: "IN"),
    ]

    public init() {
      self = .equals
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .equals
      case 1: self = .greaterThan
      case 2: self = .lessThan
      case 3: self = .notEquals
      case 4: self = .`in`
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .equals: return 0
      case .greaterThan: return 1
      case .lessThan: return 2
      case .notEquals: return 3
      case .`in`: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum ConnectingAndOr: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case none // = 0
    case and // = 1
    case or // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "NONE"),
      1: .same(proto: "AND"),
      2: .same(proto: "OR"),
    ]

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .and
      case 2: self = .or
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .and: return 1
      case .or: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._nameAndProperty)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._operatorType)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._connectingAndOr)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._connectingWhereClause)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._inItems)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._nameAndProperty {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._operatorType != Org_Roylance_Yaorm_WhereClause.OperatorType.equals {
        try visitor.visitSingularEnumField(value: _storage._operatorType, fieldNumber: 2)
      }
      if _storage._connectingAndOr != Org_Roylance_Yaorm_WhereClause.ConnectingAndOr.none {
        try visitor.visitSingularEnumField(value: _storage._connectingAndOr, fieldNumber: 3)
      }
      if let v = _storage._connectingWhereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._inItems.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._inItems, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_WhereClause) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._nameAndProperty != other_storage._nameAndProperty {return false}
        if _storage._operatorType != other_storage._operatorType {return false}
        if _storage._connectingAndOr != other_storage._connectingAndOr {return false}
        if _storage._connectingWhereClause != other_storage._connectingWhereClause {return false}
        if _storage._inItems != other_storage._inItems {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_ColumnDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColumnDefinition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .standard(proto: "is_key"),
    4: .standard(proto: "column_type"),
    5: .standard(proto: "linker_type"),
    6: .same(proto: "order"),
    7: .same(proto: "alias"),
    8: .standard(proto: "table_alias"),
    9: .standard(proto: "function_type"),
    10: .standard(proto: "function_text"),
  ]

  public var name: String = ""

  public var type: Org_Roylance_Yaorm_ProtobufType = Org_Roylance_Yaorm_ProtobufType.none

  public var isKey: Bool = false

  public var columnType: Org_Roylance_Yaorm_ColumnDefinition.ColumnType = Org_Roylance_Yaorm_ColumnDefinition.ColumnType.scalar

  public var linkerType: Org_Roylance_Yaorm_ColumnDefinition.LinkerType = Org_Roylance_Yaorm_ColumnDefinition.LinkerType.none

  public var order: Int32 = 0

  public var alias: String = ""

  public var tableAlias: String = ""

  public var functionType: Org_Roylance_Yaorm_SelectFunctionType = Org_Roylance_Yaorm_SelectFunctionType.noneSelectFunctionType

  public var functionText: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ColumnType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case scalar // = 0
    case enumName // = 1
    case enumValue // = 2
    case messageKey // = 3
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "SCALAR"),
      1: .same(proto: "ENUM_NAME"),
      2: .same(proto: "ENUM_VALUE"),
      3: .same(proto: "MESSAGE_KEY"),
    ]

    public init() {
      self = .scalar
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .scalar
      case 1: self = .enumName
      case 2: self = .enumValue
      case 3: self = .messageKey
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .scalar: return 0
      case .enumName: return 1
      case .enumValue: return 2
      case .messageKey: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum LinkerType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case none // = 0
    case parent // = 1
    case child // = 2
    case neither // = 3
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "NONE"),
      1: .same(proto: "PARENT"),
      2: .same(proto: "CHILD"),
      3: .same(proto: "NEITHER"),
    ]

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .parent
      case 2: self = .child
      case 3: self = .neither
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .parent: return 1
      case .child: return 2
      case .neither: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &name)
      case 2: try decoder.decodeSingularEnumField(value: &type)
      case 3: try decoder.decodeSingularBoolField(value: &isKey)
      case 4: try decoder.decodeSingularEnumField(value: &columnType)
      case 5: try decoder.decodeSingularEnumField(value: &linkerType)
      case 6: try decoder.decodeSingularInt32Field(value: &order)
      case 7: try decoder.decodeSingularStringField(value: &alias)
      case 8: try decoder.decodeSingularStringField(value: &tableAlias)
      case 9: try decoder.decodeSingularEnumField(value: &functionType)
      case 10: try decoder.decodeSingularStringField(value: &functionText)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 1)
    }
    if type != Org_Roylance_Yaorm_ProtobufType.none {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 2)
    }
    if isKey != false {
      try visitor.visitSingularBoolField(value: isKey, fieldNumber: 3)
    }
    if columnType != Org_Roylance_Yaorm_ColumnDefinition.ColumnType.scalar {
      try visitor.visitSingularEnumField(value: columnType, fieldNumber: 4)
    }
    if linkerType != Org_Roylance_Yaorm_ColumnDefinition.LinkerType.none {
      try visitor.visitSingularEnumField(value: linkerType, fieldNumber: 5)
    }
    if order != 0 {
      try visitor.visitSingularInt32Field(value: order, fieldNumber: 6)
    }
    if !alias.isEmpty {
      try visitor.visitSingularStringField(value: alias, fieldNumber: 7)
    }
    if !tableAlias.isEmpty {
      try visitor.visitSingularStringField(value: tableAlias, fieldNumber: 8)
    }
    if functionType != Org_Roylance_Yaorm_SelectFunctionType.noneSelectFunctionType {
      try visitor.visitSingularEnumField(value: functionType, fieldNumber: 9)
    }
    if !functionText.isEmpty {
      try visitor.visitSingularStringField(value: functionText, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_ColumnDefinition) -> Bool {
    if name != other.name {return false}
    if type != other.type {return false}
    if isKey != other.isKey {return false}
    if columnType != other.columnType {return false}
    if linkerType != other.linkerType {return false}
    if order != other.order {return false}
    if alias != other.alias {return false}
    if tableAlias != other.tableAlias {return false}
    if functionType != other.functionType {return false}
    if functionText != other.functionText {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Index: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Index"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "column_names"),
    2: .standard(proto: "include_names"),
  ]

  public var columnNames: [Org_Roylance_Yaorm_ColumnDefinition] = []

  public var includeNames: [Org_Roylance_Yaorm_ColumnDefinition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &columnNames)
      case 2: try decoder.decodeRepeatedMessageField(value: &includeNames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !columnNames.isEmpty {
      try visitor.visitRepeatedMessageField(value: columnNames, fieldNumber: 1)
    }
    if !includeNames.isEmpty {
      try visitor.visitRepeatedMessageField(value: includeNames, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Index) -> Bool {
    if columnNames != other.columnNames {return false}
    if includeNames != other.includeNames {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Difference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Difference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_type"),
    2: .same(proto: "operation"),
    3: .same(proto: "name"),
    4: .same(proto: "index"),
    5: .standard(proto: "property_definition"),
    6: .standard(proto: "table_definition"),
  ]

  private class _StorageClass {
    var _entityType: Org_Roylance_Yaorm_Difference.EntityType = Org_Roylance_Yaorm_Difference.EntityType.index
    var _operation: Org_Roylance_Yaorm_Difference.Operation = Org_Roylance_Yaorm_Difference.Operation.create
    var _name: String = ""
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _propertyDefinition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil

    init() {}

    init(copying source: _StorageClass) {
      _entityType = source._entityType
      _operation = source._operation
      _name = source._name
      _index = source._index
      _propertyDefinition = source._propertyDefinition
      _tableDefinition = source._tableDefinition
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var entityType: Org_Roylance_Yaorm_Difference.EntityType {
    get {return _storage._entityType}
    set {_uniqueStorage()._entityType = newValue}
  }

  public var operation: Org_Roylance_Yaorm_Difference.Operation {
    get {return _storage._operation}
    set {_uniqueStorage()._operation = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var propertyDefinition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._propertyDefinition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._propertyDefinition = newValue}
  }
  public var hasPropertyDefinition: Bool {
    return _storage._propertyDefinition != nil
  }
  public mutating func clearPropertyDefinition() {
    return _storage._propertyDefinition = nil
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum EntityType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case index // = 0
    case column // = 1
    case table // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "INDEX"),
      1: .same(proto: "COLUMN"),
      2: .same(proto: "TABLE"),
    ]

    public init() {
      self = .index
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .index
      case 1: self = .column
      case 2: self = .table
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .index: return 0
      case .column: return 1
      case .table: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Operation: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case create // = 0
    case drop // = 1
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "CREATE"),
      1: .same(proto: "DROP"),
    ]

    public init() {
      self = .create
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .create
      case 1: self = .drop
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .create: return 0
      case .drop: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._entityType)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._operation)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._index)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._propertyDefinition)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._tableDefinition)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._entityType != Org_Roylance_Yaorm_Difference.EntityType.index {
        try visitor.visitSingularEnumField(value: _storage._entityType, fieldNumber: 1)
      }
      if _storage._operation != Org_Roylance_Yaorm_Difference.Operation.create {
        try visitor.visitSingularEnumField(value: _storage._operation, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if let v = _storage._index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._propertyDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Difference) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._entityType != other_storage._entityType {return false}
        if _storage._operation != other_storage._operation {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._propertyDefinition != other_storage._propertyDefinition {return false}
        if _storage._tableDefinition != other_storage._tableDefinition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_TableDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableDefinition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "column_definitions"),
    3: .same(proto: "index"),
    4: .standard(proto: "table_type"),
    5: .same(proto: "alias"),
  ]

  private class _StorageClass {
    var _name: String = ""
    var _columnDefinitions: [Org_Roylance_Yaorm_ColumnDefinition] = []
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _tableType: Org_Roylance_Yaorm_TableDefinition.TableType = Org_Roylance_Yaorm_TableDefinition.TableType.normal
    var _alias: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _columnDefinitions = source._columnDefinitions
      _index = source._index
      _tableType = source._tableType
      _alias = source._alias
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var columnDefinitions: [Org_Roylance_Yaorm_ColumnDefinition] {
    get {return _storage._columnDefinitions}
    set {_uniqueStorage()._columnDefinitions = newValue}
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var tableType: Org_Roylance_Yaorm_TableDefinition.TableType {
    get {return _storage._tableType}
    set {_uniqueStorage()._tableType = newValue}
  }

  public var alias: String {
    get {return _storage._alias}
    set {_uniqueStorage()._alias = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TableType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case normal // = 0
    case linkerMessage // = 1
    case linkerEnum // = 2
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "NORMAL"),
      1: .same(proto: "LINKER_MESSAGE"),
      2: .same(proto: "LINKER_ENUM"),
    ]

    public init() {
      self = .normal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .linkerMessage
      case 2: self = .linkerEnum
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .normal: return 0
      case .linkerMessage: return 1
      case .linkerEnum: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._columnDefinitions)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._index)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._tableType)
        case 5: try decoder.decodeSingularStringField(value: &_storage._alias)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._columnDefinitions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._columnDefinitions, fieldNumber: 2)
      }
      if let v = _storage._index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._tableType != Org_Roylance_Yaorm_TableDefinition.TableType.normal {
        try visitor.visitSingularEnumField(value: _storage._tableType, fieldNumber: 4)
      }
      if !_storage._alias.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alias, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinition) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._columnDefinitions != other_storage._columnDefinitions {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._tableType != other_storage._tableType {return false}
        if _storage._alias != other_storage._alias {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_TableDefinitions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableDefinitions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "table_definitions"),
  ]

  public var tableDefinitions: [Org_Roylance_Yaorm_TableDefinition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &tableDefinitions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !tableDefinitions.isEmpty {
      try visitor.visitRepeatedMessageField(value: tableDefinitions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinitions) -> Bool {
    if tableDefinitions != other.tableDefinitions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DifferenceReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DifferenceReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "migration_exists"),
    2: .same(proto: "differences"),
  ]

  public var migrationExists: Bool = false

  public var differences: [Org_Roylance_Yaorm_Difference] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &migrationExists)
      case 2: try decoder.decodeRepeatedMessageField(value: &differences)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if migrationExists != false {
      try visitor.visitSingularBoolField(value: migrationExists, fieldNumber: 1)
    }
    if !differences.isEmpty {
      try visitor.visitRepeatedMessageField(value: differences, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_DifferenceReport) -> Bool {
    if migrationExists != other.migrationExists {return false}
    if differences != other.differences {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Column: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Column"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "definition"),
    2: .standard(proto: "double_holder"),
    3: .standard(proto: "float_holder"),
    4: .standard(proto: "int32_holder"),
    5: .standard(proto: "int64_holder"),
    6: .standard(proto: "uint32_holder"),
    7: .standard(proto: "uint64_holder"),
    8: .standard(proto: "sint32_holder"),
    9: .standard(proto: "sint64_holder"),
    10: .standard(proto: "fixed32_holder"),
    11: .standard(proto: "fixed64_holder"),
    12: .standard(proto: "sfixed32_holder"),
    13: .standard(proto: "sfixed64_holder"),
    14: .standard(proto: "bool_holder"),
    15: .standard(proto: "string_holder"),
    16: .standard(proto: "bytes_holder"),
  ]

  private class _StorageClass {
    var _definition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _doubleHolder: Double = 0
    var _floatHolder: Float = 0
    var _int32Holder: Int32 = 0
    var _int64Holder: Int64 = 0
    var _uint32Holder: UInt32 = 0
    var _uint64Holder: UInt64 = 0
    var _sint32Holder: Int32 = 0
    var _sint64Holder: Int64 = 0
    var _fixed32Holder: UInt32 = 0
    var _fixed64Holder: UInt64 = 0
    var _sfixed32Holder: Int32 = 0
    var _sfixed64Holder: Int64 = 0
    var _boolHolder: Bool = false
    var _stringHolder: String = ""
    var _bytesHolder: Data = Data()

    init() {}

    init(copying source: _StorageClass) {
      _definition = source._definition
      _doubleHolder = source._doubleHolder
      _floatHolder = source._floatHolder
      _int32Holder = source._int32Holder
      _int64Holder = source._int64Holder
      _uint32Holder = source._uint32Holder
      _uint64Holder = source._uint64Holder
      _sint32Holder = source._sint32Holder
      _sint64Holder = source._sint64Holder
      _fixed32Holder = source._fixed32Holder
      _fixed64Holder = source._fixed64Holder
      _sfixed32Holder = source._sfixed32Holder
      _sfixed64Holder = source._sfixed64Holder
      _boolHolder = source._boolHolder
      _stringHolder = source._stringHolder
      _bytesHolder = source._bytesHolder
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var definition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._definition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._definition = newValue}
  }
  public var hasDefinition: Bool {
    return _storage._definition != nil
  }
  public mutating func clearDefinition() {
    return _storage._definition = nil
  }

  public var doubleHolder: Double {
    get {return _storage._doubleHolder}
    set {_uniqueStorage()._doubleHolder = newValue}
  }

  public var floatHolder: Float {
    get {return _storage._floatHolder}
    set {_uniqueStorage()._floatHolder = newValue}
  }

  public var int32Holder: Int32 {
    get {return _storage._int32Holder}
    set {_uniqueStorage()._int32Holder = newValue}
  }

  public var int64Holder: Int64 {
    get {return _storage._int64Holder}
    set {_uniqueStorage()._int64Holder = newValue}
  }

  public var uint32Holder: UInt32 {
    get {return _storage._uint32Holder}
    set {_uniqueStorage()._uint32Holder = newValue}
  }

  public var uint64Holder: UInt64 {
    get {return _storage._uint64Holder}
    set {_uniqueStorage()._uint64Holder = newValue}
  }

  public var sint32Holder: Int32 {
    get {return _storage._sint32Holder}
    set {_uniqueStorage()._sint32Holder = newValue}
  }

  public var sint64Holder: Int64 {
    get {return _storage._sint64Holder}
    set {_uniqueStorage()._sint64Holder = newValue}
  }

  public var fixed32Holder: UInt32 {
    get {return _storage._fixed32Holder}
    set {_uniqueStorage()._fixed32Holder = newValue}
  }

  public var fixed64Holder: UInt64 {
    get {return _storage._fixed64Holder}
    set {_uniqueStorage()._fixed64Holder = newValue}
  }

  public var sfixed32Holder: Int32 {
    get {return _storage._sfixed32Holder}
    set {_uniqueStorage()._sfixed32Holder = newValue}
  }

  public var sfixed64Holder: Int64 {
    get {return _storage._sfixed64Holder}
    set {_uniqueStorage()._sfixed64Holder = newValue}
  }

  public var boolHolder: Bool {
    get {return _storage._boolHolder}
    set {_uniqueStorage()._boolHolder = newValue}
  }

  public var stringHolder: String {
    get {return _storage._stringHolder}
    set {_uniqueStorage()._stringHolder = newValue}
  }

  public var bytesHolder: Data {
    get {return _storage._bytesHolder}
    set {_uniqueStorage()._bytesHolder = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._definition)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._doubleHolder)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._floatHolder)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._int32Holder)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._int64Holder)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._uint32Holder)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._uint64Holder)
        case 8: try decoder.decodeSingularSInt32Field(value: &_storage._sint32Holder)
        case 9: try decoder.decodeSingularSInt64Field(value: &_storage._sint64Holder)
        case 10: try decoder.decodeSingularFixed32Field(value: &_storage._fixed32Holder)
        case 11: try decoder.decodeSingularFixed64Field(value: &_storage._fixed64Holder)
        case 12: try decoder.decodeSingularSFixed32Field(value: &_storage._sfixed32Holder)
        case 13: try decoder.decodeSingularSFixed64Field(value: &_storage._sfixed64Holder)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._boolHolder)
        case 15: try decoder.decodeSingularStringField(value: &_storage._stringHolder)
        case 16: try decoder.decodeSingularBytesField(value: &_storage._bytesHolder)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._doubleHolder != 0 {
        try visitor.visitSingularDoubleField(value: _storage._doubleHolder, fieldNumber: 2)
      }
      if _storage._floatHolder != 0 {
        try visitor.visitSingularFloatField(value: _storage._floatHolder, fieldNumber: 3)
      }
      if _storage._int32Holder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int32Holder, fieldNumber: 4)
      }
      if _storage._int64Holder != 0 {
        try visitor.visitSingularInt64Field(value: _storage._int64Holder, fieldNumber: 5)
      }
      if _storage._uint32Holder != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._uint32Holder, fieldNumber: 6)
      }
      if _storage._uint64Holder != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._uint64Holder, fieldNumber: 7)
      }
      if _storage._sint32Holder != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._sint32Holder, fieldNumber: 8)
      }
      if _storage._sint64Holder != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._sint64Holder, fieldNumber: 9)
      }
      if _storage._fixed32Holder != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._fixed32Holder, fieldNumber: 10)
      }
      if _storage._fixed64Holder != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._fixed64Holder, fieldNumber: 11)
      }
      if _storage._sfixed32Holder != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._sfixed32Holder, fieldNumber: 12)
      }
      if _storage._sfixed64Holder != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._sfixed64Holder, fieldNumber: 13)
      }
      if _storage._boolHolder != false {
        try visitor.visitSingularBoolField(value: _storage._boolHolder, fieldNumber: 14)
      }
      if !_storage._stringHolder.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stringHolder, fieldNumber: 15)
      }
      if !_storage._bytesHolder.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._bytesHolder, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Column) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._definition != other_storage._definition {return false}
        if _storage._doubleHolder != other_storage._doubleHolder {return false}
        if _storage._floatHolder != other_storage._floatHolder {return false}
        if _storage._int32Holder != other_storage._int32Holder {return false}
        if _storage._int64Holder != other_storage._int64Holder {return false}
        if _storage._uint32Holder != other_storage._uint32Holder {return false}
        if _storage._uint64Holder != other_storage._uint64Holder {return false}
        if _storage._sint32Holder != other_storage._sint32Holder {return false}
        if _storage._sint64Holder != other_storage._sint64Holder {return false}
        if _storage._fixed32Holder != other_storage._fixed32Holder {return false}
        if _storage._fixed64Holder != other_storage._fixed64Holder {return false}
        if _storage._sfixed32Holder != other_storage._sfixed32Holder {return false}
        if _storage._sfixed64Holder != other_storage._sfixed64Holder {return false}
        if _storage._boolHolder != other_storage._boolHolder {return false}
        if _storage._stringHolder != other_storage._stringHolder {return false}
        if _storage._bytesHolder != other_storage._bytesHolder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Record"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "columns"),
  ]

  public var columns: [Org_Roylance_Yaorm_Column] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &columns)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: columns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Record) -> Bool {
    if columns != other.columns {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Records: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Records"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "records"),
  ]

  public var records: [Org_Roylance_Yaorm_Record] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &records)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !records.isEmpty {
      try visitor.visitRepeatedMessageField(value: records, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Records) -> Bool {
    if records != other.records {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_TableRecords: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableRecords"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "table_definition"),
    2: .same(proto: "records"),
    3: .standard(proto: "table_name"),
  ]

  private class _StorageClass {
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _tableName: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _tableDefinition = source._tableDefinition
      _records = source._records
      _tableName = source._tableName
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var tableName: String {
    get {return _storage._tableName}
    set {_uniqueStorage()._tableName = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._tableDefinition)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._records)
        case 3: try decoder.decodeSingularStringField(value: &_storage._tableName)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._tableName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tableName, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_TableRecords) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._tableDefinition != other_storage._tableDefinition {return false}
        if _storage._records != other_storage._records {return false}
        if _storage._tableName != other_storage._tableName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_AllTableRecords: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllTableRecords"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "table_records"),
  ]

  public var tableRecords: [Org_Roylance_Yaorm_TableRecords] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &tableRecords)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !tableRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: tableRecords, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_AllTableRecords) -> Bool {
    if tableRecords != other.tableRecords {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "table_definition"),
    2: .same(proto: "records"),
    3: .same(proto: "index"),
    4: .standard(proto: "column_definition"),
    5: .standard(proto: "where_clause"),
    6: .standard(proto: "database_operation_type"),
  ]

  private class _StorageClass {
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _columnDefinition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _databaseOperationType: Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType = Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType.createTable

    init() {}

    init(copying source: _StorageClass) {
      _tableDefinition = source._tableDefinition
      _records = source._records
      _index = source._index
      _columnDefinition = source._columnDefinition
      _whereClause = source._whereClause
      _databaseOperationType = source._databaseOperationType
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var columnDefinition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._columnDefinition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._columnDefinition = newValue}
  }
  public var hasColumnDefinition: Bool {
    return _storage._columnDefinition != nil
  }
  public mutating func clearColumnDefinition() {
    return _storage._columnDefinition = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var databaseOperationType: Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType {
    get {return _storage._databaseOperationType}
    set {_uniqueStorage()._databaseOperationType = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum DatabaseOperationType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case createTable // = 0
    case dropTable // = 1
    case createIndex // = 2
    case dropIndex // = 3
    case createColumn // = 4
    case dropColumn // = 5
    case getCount // = 6
    case getCustom // = 7
    case get // = 8
    case getMany // = 9
    case getWhere // = 10
    case bulkInsert // = 11
    case createOrUpdate // = 12
    case create // = 13
    case update // = 14
    case updateWithCriteria // = 15
    case updateCustom // = 16
    case delete // = 17
    case deleteAll // = 18
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "CREATE_TABLE"),
      1: .same(proto: "DROP_TABLE"),
      2: .same(proto: "CREATE_INDEX"),
      3: .same(proto: "DROP_INDEX"),
      4: .same(proto: "CREATE_COLUMN"),
      5: .same(proto: "DROP_COLUMN"),
      6: .same(proto: "GET_COUNT"),
      7: .same(proto: "GET_CUSTOM"),
      8: .same(proto: "GET"),
      9: .same(proto: "GET_MANY"),
      10: .same(proto: "GET_WHERE"),
      11: .same(proto: "BULK_INSERT"),
      12: .same(proto: "CREATE_OR_UPDATE"),
      13: .same(proto: "CREATE"),
      14: .same(proto: "UPDATE"),
      15: .same(proto: "UPDATE_WITH_CRITERIA"),
      16: .same(proto: "UPDATE_CUSTOM"),
      17: .same(proto: "DELETE"),
      18: .same(proto: "DELETE_ALL"),
    ]

    public init() {
      self = .createTable
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .createTable
      case 1: self = .dropTable
      case 2: self = .createIndex
      case 3: self = .dropIndex
      case 4: self = .createColumn
      case 5: self = .dropColumn
      case 6: self = .getCount
      case 7: self = .getCustom
      case 8: self = .get
      case 9: self = .getMany
      case 10: self = .getWhere
      case 11: self = .bulkInsert
      case 12: self = .createOrUpdate
      case 13: self = .create
      case 14: self = .update
      case 15: self = .updateWithCriteria
      case 16: self = .updateCustom
      case 17: self = .delete
      case 18: self = .deleteAll
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .createTable: return 0
      case .dropTable: return 1
      case .createIndex: return 2
      case .dropIndex: return 3
      case .createColumn: return 4
      case .dropColumn: return 5
      case .getCount: return 6
      case .getCustom: return 7
      case .get: return 8
      case .getMany: return 9
      case .getWhere: return 10
      case .bulkInsert: return 11
      case .createOrUpdate: return 12
      case .create: return 13
      case .update: return 14
      case .updateWithCriteria: return 15
      case .updateCustom: return 16
      case .delete: return 17
      case .deleteAll: return 18
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._tableDefinition)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._records)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._index)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._columnDefinition)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._whereClause)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._databaseOperationType)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._columnDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._databaseOperationType != Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType.createTable {
        try visitor.visitSingularEnumField(value: _storage._databaseOperationType, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseOperation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._tableDefinition != other_storage._tableDefinition {return false}
        if _storage._records != other_storage._records {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._columnDefinition != other_storage._columnDefinition {return false}
        if _storage._whereClause != other_storage._whereClause {return false}
        if _storage._databaseOperationType != other_storage._databaseOperationType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseOperationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseOperationResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bool_result"),
    2: .standard(proto: "count_result"),
    3: .standard(proto: "record_result"),
    4: .standard(proto: "records_result"),
    5: .standard(proto: "error_message"),
    6: .standard(proto: "database_operation"),
  ]

  private class _StorageClass {
    var _boolResult: Bool = false
    var _countResult: Int64 = 0
    var _recordResult: Org_Roylance_Yaorm_Record? = nil
    var _recordsResult: Org_Roylance_Yaorm_Records? = nil
    var _errorMessage: String = ""
    var _databaseOperation: Org_Roylance_Yaorm_DatabaseOperation? = nil

    init() {}

    init(copying source: _StorageClass) {
      _boolResult = source._boolResult
      _countResult = source._countResult
      _recordResult = source._recordResult
      _recordsResult = source._recordsResult
      _errorMessage = source._errorMessage
      _databaseOperation = source._databaseOperation
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var boolResult: Bool {
    get {return _storage._boolResult}
    set {_uniqueStorage()._boolResult = newValue}
  }

  public var countResult: Int64 {
    get {return _storage._countResult}
    set {_uniqueStorage()._countResult = newValue}
  }

  public var recordResult: Org_Roylance_Yaorm_Record {
    get {return _storage._recordResult ?? Org_Roylance_Yaorm_Record()}
    set {_uniqueStorage()._recordResult = newValue}
  }
  public var hasRecordResult: Bool {
    return _storage._recordResult != nil
  }
  public mutating func clearRecordResult() {
    return _storage._recordResult = nil
  }

  public var recordsResult: Org_Roylance_Yaorm_Records {
    get {return _storage._recordsResult ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._recordsResult = newValue}
  }
  public var hasRecordsResult: Bool {
    return _storage._recordsResult != nil
  }
  public mutating func clearRecordsResult() {
    return _storage._recordsResult = nil
  }

  public var errorMessage: String {
    get {return _storage._errorMessage}
    set {_uniqueStorage()._errorMessage = newValue}
  }

  public var databaseOperation: Org_Roylance_Yaorm_DatabaseOperation {
    get {return _storage._databaseOperation ?? Org_Roylance_Yaorm_DatabaseOperation()}
    set {_uniqueStorage()._databaseOperation = newValue}
  }
  public var hasDatabaseOperation: Bool {
    return _storage._databaseOperation != nil
  }
  public mutating func clearDatabaseOperation() {
    return _storage._databaseOperation = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._boolResult)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._countResult)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._recordResult)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._recordsResult)
        case 5: try decoder.decodeSingularStringField(value: &_storage._errorMessage)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._databaseOperation)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._boolResult != false {
        try visitor.visitSingularBoolField(value: _storage._boolResult, fieldNumber: 1)
      }
      if _storage._countResult != 0 {
        try visitor.visitSingularInt64Field(value: _storage._countResult, fieldNumber: 2)
      }
      if let v = _storage._recordResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._recordsResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._errorMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._errorMessage, fieldNumber: 5)
      }
      if let v = _storage._databaseOperation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseOperationResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._boolResult != other_storage._boolResult {return false}
        if _storage._countResult != other_storage._countResult {return false}
        if _storage._recordResult != other_storage._recordResult {return false}
        if _storage._recordsResult != other_storage._recordsResult {return false}
        if _storage._errorMessage != other_storage._errorMessage {return false}
        if _storage._databaseOperation != other_storage._databaseOperation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseDefinition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "schema"),
    2: .same(proto: "name"),
    3: .standard(proto: "table_definitions"),
    4: .standard(proto: "table_definition_graphs"),
  ]

  private class _StorageClass {
    var _schema: String = ""
    var _name: String = ""
    var _tableDefinitions: Org_Roylance_Yaorm_TableDefinitions? = nil
    var _tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraphs] = []

    init() {}

    init(copying source: _StorageClass) {
      _schema = source._schema
      _name = source._name
      _tableDefinitions = source._tableDefinitions
      _tableDefinitionGraphs = source._tableDefinitionGraphs
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var schema: String {
    get {return _storage._schema}
    set {_uniqueStorage()._schema = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var tableDefinitions: Org_Roylance_Yaorm_TableDefinitions {
    get {return _storage._tableDefinitions ?? Org_Roylance_Yaorm_TableDefinitions()}
    set {_uniqueStorage()._tableDefinitions = newValue}
  }
  public var hasTableDefinitions: Bool {
    return _storage._tableDefinitions != nil
  }
  public mutating func clearTableDefinitions() {
    return _storage._tableDefinitions = nil
  }

  public var tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraphs] {
    get {return _storage._tableDefinitionGraphs}
    set {_uniqueStorage()._tableDefinitionGraphs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._schema)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._tableDefinitions)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._tableDefinitionGraphs)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._schema.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schema, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if let v = _storage._tableDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._tableDefinitionGraphs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tableDefinitionGraphs, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseDefinition) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._schema != other_storage._schema {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._tableDefinitions != other_storage._tableDefinitions {return false}
        if _storage._tableDefinitionGraphs != other_storage._tableDefinitionGraphs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_TableDefinitionGraph: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableDefinitionGraph"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "main_table_definition"),
    2: .standard(proto: "other_table_definition"),
    3: .standard(proto: "linker_table_table"),
    4: .standard(proto: "definition_graph_type"),
    5: .standard(proto: "main_name"),
    6: .standard(proto: "other_name"),
    7: .standard(proto: "column_name"),
  ]

  private class _StorageClass {
    var _mainTableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _otherTableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _linkerTableTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _definitionGraphType: Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType = Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType.enumType
    var _mainName: String = ""
    var _otherName: String = ""
    var _columnName: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _mainTableDefinition = source._mainTableDefinition
      _otherTableDefinition = source._otherTableDefinition
      _linkerTableTable = source._linkerTableTable
      _definitionGraphType = source._definitionGraphType
      _mainName = source._mainName
      _otherName = source._otherName
      _columnName = source._columnName
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var mainTableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._mainTableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._mainTableDefinition = newValue}
  }
  public var hasMainTableDefinition: Bool {
    return _storage._mainTableDefinition != nil
  }
  public mutating func clearMainTableDefinition() {
    return _storage._mainTableDefinition = nil
  }

  public var otherTableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._otherTableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._otherTableDefinition = newValue}
  }
  public var hasOtherTableDefinition: Bool {
    return _storage._otherTableDefinition != nil
  }
  public mutating func clearOtherTableDefinition() {
    return _storage._otherTableDefinition = nil
  }

  public var linkerTableTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._linkerTableTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._linkerTableTable = newValue}
  }
  public var hasLinkerTableTable: Bool {
    return _storage._linkerTableTable != nil
  }
  public mutating func clearLinkerTableTable() {
    return _storage._linkerTableTable = nil
  }

  public var definitionGraphType: Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType {
    get {return _storage._definitionGraphType}
    set {_uniqueStorage()._definitionGraphType = newValue}
  }

  public var mainName: String {
    get {return _storage._mainName}
    set {_uniqueStorage()._mainName = newValue}
  }

  public var otherName: String {
    get {return _storage._otherName}
    set {_uniqueStorage()._otherName = newValue}
  }

  public var columnName: String {
    get {return _storage._columnName}
    set {_uniqueStorage()._columnName = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TableDefinitionGraphType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    public typealias RawValue = Int
    case enumType // = 0
    case messageType // = 1
    case UNRECOGNIZED(Int)

    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "ENUM_TYPE"),
      1: .same(proto: "MESSAGE_TYPE"),
    ]

    public init() {
      self = .enumType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .enumType
      case 1: self = .messageType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .enumType: return 0
      case .messageType: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mainTableDefinition)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._otherTableDefinition)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._linkerTableTable)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._definitionGraphType)
        case 5: try decoder.decodeSingularStringField(value: &_storage._mainName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._otherName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._columnName)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mainTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._otherTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._linkerTableTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._definitionGraphType != Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType.enumType {
        try visitor.visitSingularEnumField(value: _storage._definitionGraphType, fieldNumber: 4)
      }
      if !_storage._mainName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mainName, fieldNumber: 5)
      }
      if !_storage._otherName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._otherName, fieldNumber: 6)
      }
      if !_storage._columnName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._columnName, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinitionGraph) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._mainTableDefinition != other_storage._mainTableDefinition {return false}
        if _storage._otherTableDefinition != other_storage._otherTableDefinition {return false}
        if _storage._linkerTableTable != other_storage._linkerTableTable {return false}
        if _storage._definitionGraphType != other_storage._definitionGraphType {return false}
        if _storage._mainName != other_storage._mainName {return false}
        if _storage._otherName != other_storage._otherName {return false}
        if _storage._columnName != other_storage._columnName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_TableDefinitionGraphs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TableDefinitionGraphs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "main_table_definition"),
    2: .standard(proto: "table_definition_graphs"),
  ]

  private class _StorageClass {
    var _mainTableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraph] = []

    init() {}

    init(copying source: _StorageClass) {
      _mainTableDefinition = source._mainTableDefinition
      _tableDefinitionGraphs = source._tableDefinitionGraphs
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var mainTableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._mainTableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._mainTableDefinition = newValue}
  }
  public var hasMainTableDefinition: Bool {
    return _storage._mainTableDefinition != nil
  }
  public mutating func clearMainTableDefinition() {
    return _storage._mainTableDefinition = nil
  }

  public var tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraph] {
    get {return _storage._tableDefinitionGraphs}
    set {_uniqueStorage()._tableDefinitionGraphs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mainTableDefinition)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._tableDefinitionGraphs)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mainTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._tableDefinitionGraphs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tableDefinitionGraphs, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinitionGraphs) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._mainTableDefinition != other_storage._mainTableDefinition {return false}
        if _storage._tableDefinitionGraphs != other_storage._tableDefinitionGraphs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_ConnectionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "user"),
    3: .same(proto: "password"),
    4: .same(proto: "schema"),
    5: .standard(proto: "should_create_schema"),
    6: .same(proto: "port"),
  ]

  public var host: String = ""

  public var user: String = ""

  public var password: String = ""

  public var schema: String = ""

  public var shouldCreateSchema: Bool = false

  public var port: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &host)
      case 2: try decoder.decodeSingularStringField(value: &user)
      case 3: try decoder.decodeSingularStringField(value: &password)
      case 4: try decoder.decodeSingularStringField(value: &schema)
      case 5: try decoder.decodeSingularBoolField(value: &shouldCreateSchema)
      case 6: try decoder.decodeSingularInt32Field(value: &port)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !host.isEmpty {
      try visitor.visitSingularStringField(value: host, fieldNumber: 1)
    }
    if !user.isEmpty {
      try visitor.visitSingularStringField(value: user, fieldNumber: 2)
    }
    if !password.isEmpty {
      try visitor.visitSingularStringField(value: password, fieldNumber: 3)
    }
    if !schema.isEmpty {
      try visitor.visitSingularStringField(value: schema, fieldNumber: 4)
    }
    if shouldCreateSchema != false {
      try visitor.visitSingularBoolField(value: shouldCreateSchema, fieldNumber: 5)
    }
    if port != 0 {
      try visitor.visitSingularInt32Field(value: port, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_ConnectionInfo) -> Bool {
    if host != other.host {return false}
    if user != other.user {return false}
    if password != other.password {return false}
    if schema != other.schema {return false}
    if shouldCreateSchema != other.shouldCreateSchema {return false}
    if port != other.port {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Migration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Migration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "context_name"),
    3: .standard(proto: "model_definition_base64"),
    4: .standard(proto: "insert_date"),
  ]

  public var id: String = ""

  public var contextName: String = ""

  public var modelDefinitionBase64: String = ""

  public var insertDate: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &contextName)
      case 3: try decoder.decodeSingularStringField(value: &modelDefinitionBase64)
      case 4: try decoder.decodeSingularInt64Field(value: &insertDate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !contextName.isEmpty {
      try visitor.visitSingularStringField(value: contextName, fieldNumber: 2)
    }
    if !modelDefinitionBase64.isEmpty {
      try visitor.visitSingularStringField(value: modelDefinitionBase64, fieldNumber: 3)
    }
    if insertDate != 0 {
      try visitor.visitSingularInt64Field(value: insertDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Migration) -> Bool {
    if id != other.id {return false}
    if contextName != other.contextName {return false}
    if modelDefinitionBase64 != other.modelDefinitionBase64 {return false}
    if insertDate != other.insertDate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseExecution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseExecution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "raw_sql"),
    2: .standard(proto: "time_called"),
    3: .same(proto: "result"),
    4: .standard(proto: "order_called"),
  ]

  public var rawSql: String = ""

  public var timeCalled: Int64 = 0

  public var result: Bool = false

  public var orderCalled: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &rawSql)
      case 2: try decoder.decodeSingularInt64Field(value: &timeCalled)
      case 3: try decoder.decodeSingularBoolField(value: &result)
      case 4: try decoder.decodeSingularInt64Field(value: &orderCalled)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !rawSql.isEmpty {
      try visitor.visitSingularStringField(value: rawSql, fieldNumber: 1)
    }
    if timeCalled != 0 {
      try visitor.visitSingularInt64Field(value: timeCalled, fieldNumber: 2)
    }
    if result != false {
      try visitor.visitSingularBoolField(value: result, fieldNumber: 3)
    }
    if orderCalled != 0 {
      try visitor.visitSingularInt64Field(value: orderCalled, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseExecution) -> Bool {
    if rawSql != other.rawSql {return false}
    if timeCalled != other.timeCalled {return false}
    if result != other.result {return false}
    if orderCalled != other.orderCalled {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseExecutionReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseExecutionReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "calls_to_database"),
    2: .same(proto: "executions"),
  ]

  public var callsToDatabase: Int64 = 0

  public var executions: [Org_Roylance_Yaorm_DatabaseExecution] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &callsToDatabase)
      case 2: try decoder.decodeRepeatedMessageField(value: &executions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if callsToDatabase != 0 {
      try visitor.visitSingularInt64Field(value: callsToDatabase, fieldNumber: 1)
    }
    if !executions.isEmpty {
      try visitor.visitRepeatedMessageField(value: executions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseExecutionReport) -> Bool {
    if callsToDatabase != other.callsToDatabase {return false}
    if executions != other.executions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   project
public struct Org_Roylance_Yaorm_JoinTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinTable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_table"),
    2: .standard(proto: "second_table"),
    7: .standard(proto: "first_column"),
    8: .standard(proto: "second_column"),
    9: .standard(proto: "where_clause"),
  ]

  private class _StorageClass {
    var _firstTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _secondTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _firstColumn: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _secondColumn: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil

    init() {}

    init(copying source: _StorageClass) {
      _firstTable = source._firstTable
      _secondTable = source._secondTable
      _firstColumn = source._firstColumn
      _secondColumn = source._secondColumn
      _whereClause = source._whereClause
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var firstTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._firstTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._firstTable = newValue}
  }
  public var hasFirstTable: Bool {
    return _storage._firstTable != nil
  }
  public mutating func clearFirstTable() {
    return _storage._firstTable = nil
  }

  public var secondTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._secondTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._secondTable = newValue}
  }
  public var hasSecondTable: Bool {
    return _storage._secondTable != nil
  }
  public mutating func clearSecondTable() {
    return _storage._secondTable = nil
  }

  public var firstColumn: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._firstColumn ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._firstColumn = newValue}
  }
  public var hasFirstColumn: Bool {
    return _storage._firstColumn != nil
  }
  public mutating func clearFirstColumn() {
    return _storage._firstColumn = nil
  }

  public var secondColumn: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._secondColumn ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._secondColumn = newValue}
  }
  public var hasSecondColumn: Bool {
    return _storage._secondColumn != nil
  }
  public mutating func clearSecondColumn() {
    return _storage._secondColumn = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._firstTable)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._secondTable)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._firstColumn)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._secondColumn)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._whereClause)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._firstTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._secondTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._firstColumn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._secondColumn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_JoinTable) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._firstTable != other_storage._firstTable {return false}
        if _storage._secondTable != other_storage._secondTable {return false}
        if _storage._firstColumn != other_storage._firstColumn {return false}
        if _storage._secondColumn != other_storage._secondColumn {return false}
        if _storage._whereClause != other_storage._whereClause {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_JoinTableRecords: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinTableRecords"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "join_table"),
    2: .same(proto: "records"),
  ]

  private class _StorageClass {
    var _joinTable: Org_Roylance_Yaorm_JoinTable? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil

    init() {}

    init(copying source: _StorageClass) {
      _joinTable = source._joinTable
      _records = source._records
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var joinTable: Org_Roylance_Yaorm_JoinTable {
    get {return _storage._joinTable ?? Org_Roylance_Yaorm_JoinTable()}
    set {_uniqueStorage()._joinTable = newValue}
  }
  public var hasJoinTable: Bool {
    return _storage._joinTable != nil
  }
  public mutating func clearJoinTable() {
    return _storage._joinTable = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._joinTable)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._records)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._joinTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_JoinTableRecords) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._joinTable != other_storage._joinTable {return false}
        if _storage._records != other_storage._records {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_GroupBy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupBy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "columns"),
  ]

  public var columns: [Org_Roylance_Yaorm_ColumnDefinition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &columns)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: columns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_GroupBy) -> Bool {
    if columns != other.columns {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_OrderBy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderBy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "column"),
    2: .same(proto: "type"),
  ]

  private class _StorageClass {
    var _column: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _type: Org_Roylance_Yaorm_OrderByType = Org_Roylance_Yaorm_OrderByType.asc

    init() {}

    init(copying source: _StorageClass) {
      _column = source._column
      _type = source._type
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var column: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._column ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._column = newValue}
  }
  public var hasColumn: Bool {
    return _storage._column != nil
  }
  public mutating func clearColumn() {
    return _storage._column = nil
  }

  public var type: Org_Roylance_Yaorm_OrderByType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._column)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._column {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._type != Org_Roylance_Yaorm_OrderByType.asc {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_OrderBy) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._column != other_storage._column {return false}
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Projection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Projection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labels"),
    2: .standard(proto: "main_table"),
    3: .same(proto: "joins"),
    4: .standard(proto: "where_clause"),
    5: .standard(proto: "group_by"),
    6: .standard(proto: "order_bys"),
    7: .same(proto: "name"),
    8: .same(proto: "limit"),
    9: .same(proto: "offset"),
  ]

  private class _StorageClass {
    var _labels: [Org_Roylance_Yaorm_ColumnDefinition] = []
    var _mainTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _joins: [Org_Roylance_Yaorm_JoinTable] = []
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _groupBy: Org_Roylance_Yaorm_GroupBy? = nil
    var _orderBys: [Org_Roylance_Yaorm_OrderBy] = []
    var _name: String = ""
    var _limit: Int64 = 0
    var _offset: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _labels = source._labels
      _mainTable = source._mainTable
      _joins = source._joins
      _whereClause = source._whereClause
      _groupBy = source._groupBy
      _orderBys = source._orderBys
      _name = source._name
      _limit = source._limit
      _offset = source._offset
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var labels: [Org_Roylance_Yaorm_ColumnDefinition] {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  public var mainTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._mainTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._mainTable = newValue}
  }
  public var hasMainTable: Bool {
    return _storage._mainTable != nil
  }
  public mutating func clearMainTable() {
    return _storage._mainTable = nil
  }

  public var joins: [Org_Roylance_Yaorm_JoinTable] {
    get {return _storage._joins}
    set {_uniqueStorage()._joins = newValue}
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var groupBy: Org_Roylance_Yaorm_GroupBy {
    get {return _storage._groupBy ?? Org_Roylance_Yaorm_GroupBy()}
    set {_uniqueStorage()._groupBy = newValue}
  }
  public var hasGroupBy: Bool {
    return _storage._groupBy != nil
  }
  public mutating func clearGroupBy() {
    return _storage._groupBy = nil
  }

  public var orderBys: [Org_Roylance_Yaorm_OrderBy] {
    get {return _storage._orderBys}
    set {_uniqueStorage()._orderBys = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._labels)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._mainTable)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._joins)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._whereClause)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._groupBy)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._orderBys)
        case 7: try decoder.decodeSingularStringField(value: &_storage._name)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._limit)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._offset)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._labels.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._labels, fieldNumber: 1)
      }
      if let v = _storage._mainTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._joins.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._joins, fieldNumber: 3)
      }
      if let v = _storage._whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._groupBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._orderBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._orderBys, fieldNumber: 6)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 7)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._limit, fieldNumber: 8)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._offset, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_Projection) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._labels != other_storage._labels {return false}
        if _storage._mainTable != other_storage._mainTable {return false}
        if _storage._joins != other_storage._joins {return false}
        if _storage._whereClause != other_storage._whereClause {return false}
        if _storage._groupBy != other_storage._groupBy {return false}
        if _storage._orderBys != other_storage._orderBys {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._offset != other_storage._offset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_UIYaormRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIYaormRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "table_definition"),
    3: .same(proto: "records"),
    4: .standard(proto: "connection_info"),
    5: .standard(proto: "where_clause"),
    6: .same(proto: "limit"),
    7: .same(proto: "offset"),
    8: .standard(proto: "insert_same_as_update"),
    9: .standard(proto: "schema_name"),
    10: .standard(proto: "table_name"),
    11: .standard(proto: "custom_sql"),
    13: .standard(proto: "file_descriptor"),
    14: .same(proto: "ids"),
  ]

  private class _StorageClass {
    var _token: String = ""
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _connectionInfo: Org_Roylance_Yaorm_ConnectionInfo? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _limit: Int64 = 0
    var _offset: Int64 = 0
    var _insertSameAsUpdate: Bool = false
    var _schemaName: String = ""
    var _tableName: String = ""
    var _customSql: String = ""
    var _fileDescriptor: String = ""
    var _ids: [String] = []

    init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _tableDefinition = source._tableDefinition
      _records = source._records
      _connectionInfo = source._connectionInfo
      _whereClause = source._whereClause
      _limit = source._limit
      _offset = source._offset
      _insertSameAsUpdate = source._insertSameAsUpdate
      _schemaName = source._schemaName
      _tableName = source._tableName
      _customSql = source._customSql
      _fileDescriptor = source._fileDescriptor
      _ids = source._ids
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var connectionInfo: Org_Roylance_Yaorm_ConnectionInfo {
    get {return _storage._connectionInfo ?? Org_Roylance_Yaorm_ConnectionInfo()}
    set {_uniqueStorage()._connectionInfo = newValue}
  }
  public var hasConnectionInfo: Bool {
    return _storage._connectionInfo != nil
  }
  public mutating func clearConnectionInfo() {
    return _storage._connectionInfo = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var insertSameAsUpdate: Bool {
    get {return _storage._insertSameAsUpdate}
    set {_uniqueStorage()._insertSameAsUpdate = newValue}
  }

  public var schemaName: String {
    get {return _storage._schemaName}
    set {_uniqueStorage()._schemaName = newValue}
  }

  public var tableName: String {
    get {return _storage._tableName}
    set {_uniqueStorage()._tableName = newValue}
  }

  public var customSql: String {
    get {return _storage._customSql}
    set {_uniqueStorage()._customSql = newValue}
  }

  public var fileDescriptor: String {
    get {return _storage._fileDescriptor}
    set {_uniqueStorage()._fileDescriptor = newValue}
  }

  public var ids: [String] {
    get {return _storage._ids}
    set {_uniqueStorage()._ids = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._token)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tableDefinition)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._records)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._connectionInfo)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._whereClause)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._limit)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._offset)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._insertSameAsUpdate)
        case 9: try decoder.decodeSingularStringField(value: &_storage._schemaName)
        case 10: try decoder.decodeSingularStringField(value: &_storage._tableName)
        case 11: try decoder.decodeSingularStringField(value: &_storage._customSql)
        case 13: try decoder.decodeSingularStringField(value: &_storage._fileDescriptor)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._ids)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 1)
      }
      if let v = _storage._tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._connectionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._limit, fieldNumber: 6)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._offset, fieldNumber: 7)
      }
      if _storage._insertSameAsUpdate != false {
        try visitor.visitSingularBoolField(value: _storage._insertSameAsUpdate, fieldNumber: 8)
      }
      if !_storage._schemaName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemaName, fieldNumber: 9)
      }
      if !_storage._tableName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tableName, fieldNumber: 10)
      }
      if !_storage._customSql.isEmpty {
        try visitor.visitSingularStringField(value: _storage._customSql, fieldNumber: 11)
      }
      if !_storage._fileDescriptor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fileDescriptor, fieldNumber: 13)
      }
      if !_storage._ids.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ids, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_UIYaormRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._token != other_storage._token {return false}
        if _storage._tableDefinition != other_storage._tableDefinition {return false}
        if _storage._records != other_storage._records {return false}
        if _storage._connectionInfo != other_storage._connectionInfo {return false}
        if _storage._whereClause != other_storage._whereClause {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._offset != other_storage._offset {return false}
        if _storage._insertSameAsUpdate != other_storage._insertSameAsUpdate {return false}
        if _storage._schemaName != other_storage._schemaName {return false}
        if _storage._tableName != other_storage._tableName {return false}
        if _storage._customSql != other_storage._customSql {return false}
        if _storage._fileDescriptor != other_storage._fileDescriptor {return false}
        if _storage._ids != other_storage._ids {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_UIYaormResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UIYaormResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "records"),
    2: .same(proto: "schemas"),
    3: .same(proto: "tables"),
    4: .standard(proto: "table_definition"),
    5: .standard(proto: "table_definitions"),
    6: .standard(proto: "record_count"),
    7: .same(proto: "result"),
    8: .standard(proto: "proto_type_to_sql_types"),
    9: .standard(proto: "string_result"),
  ]

  private class _StorageClass {
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _schemas: [String] = []
    var _tables: [String] = []
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _tableDefinitions: Org_Roylance_Yaorm_TableDefinitions? = nil
    var _recordCount: Int64 = 0
    var _result: Bool = false
    var _protoTypeToSqlTypes: [Org_Roylance_Yaorm_ProtoTypeToSqlType] = []
    var _stringResult: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _records = source._records
      _schemas = source._schemas
      _tables = source._tables
      _tableDefinition = source._tableDefinition
      _tableDefinitions = source._tableDefinitions
      _recordCount = source._recordCount
      _result = source._result
      _protoTypeToSqlTypes = source._protoTypeToSqlTypes
      _stringResult = source._stringResult
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var schemas: [String] {
    get {return _storage._schemas}
    set {_uniqueStorage()._schemas = newValue}
  }

  public var tables: [String] {
    get {return _storage._tables}
    set {_uniqueStorage()._tables = newValue}
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var tableDefinitions: Org_Roylance_Yaorm_TableDefinitions {
    get {return _storage._tableDefinitions ?? Org_Roylance_Yaorm_TableDefinitions()}
    set {_uniqueStorage()._tableDefinitions = newValue}
  }
  public var hasTableDefinitions: Bool {
    return _storage._tableDefinitions != nil
  }
  public mutating func clearTableDefinitions() {
    return _storage._tableDefinitions = nil
  }

  public var recordCount: Int64 {
    get {return _storage._recordCount}
    set {_uniqueStorage()._recordCount = newValue}
  }

  public var result: Bool {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  public var protoTypeToSqlTypes: [Org_Roylance_Yaorm_ProtoTypeToSqlType] {
    get {return _storage._protoTypeToSqlTypes}
    set {_uniqueStorage()._protoTypeToSqlTypes = newValue}
  }

  public var stringResult: String {
    get {return _storage._stringResult}
    set {_uniqueStorage()._stringResult = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._records)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._schemas)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._tables)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._tableDefinition)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._tableDefinitions)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._recordCount)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._result)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._protoTypeToSqlTypes)
        case 9: try decoder.decodeSingularStringField(value: &_storage._stringResult)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._schemas.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._schemas, fieldNumber: 2)
      }
      if !_storage._tables.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tables, fieldNumber: 3)
      }
      if let v = _storage._tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._tableDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._recordCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._recordCount, fieldNumber: 6)
      }
      if _storage._result != false {
        try visitor.visitSingularBoolField(value: _storage._result, fieldNumber: 7)
      }
      if !_storage._protoTypeToSqlTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._protoTypeToSqlTypes, fieldNumber: 8)
      }
      if !_storage._stringResult.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stringResult, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_UIYaormResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._records != other_storage._records {return false}
        if _storage._schemas != other_storage._schemas {return false}
        if _storage._tables != other_storage._tables {return false}
        if _storage._tableDefinition != other_storage._tableDefinition {return false}
        if _storage._tableDefinitions != other_storage._tableDefinitions {return false}
        if _storage._recordCount != other_storage._recordCount {return false}
        if _storage._result != other_storage._result {return false}
        if _storage._protoTypeToSqlTypes != other_storage._protoTypeToSqlTypes {return false}
        if _storage._stringResult != other_storage._stringResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_SqlGeneratorRequestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SqlGeneratorRequestResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "definition"),
    2: .standard(proto: "column_definition"),
    3: .same(proto: "index"),
    4: .same(proto: "column"),
    5: .standard(proto: "where_clause"),
    6: .same(proto: "records"),
    7: .same(proto: "limit"),
    8: .same(proto: "offset"),
    9: .standard(proto: "schema_name"),
    10: .standard(proto: "table_name"),
    11: .same(proto: "response"),
    12: .standard(proto: "proto_type_to_sql_types"),
  ]

  private class _StorageClass {
    var _definition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _columnDefinition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _column: Org_Roylance_Yaorm_Column? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _limit: Int64 = 0
    var _offset: Int64 = 0
    var _schemaName: String = ""
    var _tableName: String = ""
    var _response: String = ""
    var _protoTypeToSqlTypes: Org_Roylance_Yaorm_ProtoTypeToSqlTypes? = nil

    init() {}

    init(copying source: _StorageClass) {
      _definition = source._definition
      _columnDefinition = source._columnDefinition
      _index = source._index
      _column = source._column
      _whereClause = source._whereClause
      _records = source._records
      _limit = source._limit
      _offset = source._offset
      _schemaName = source._schemaName
      _tableName = source._tableName
      _response = source._response
      _protoTypeToSqlTypes = source._protoTypeToSqlTypes
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var definition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._definition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._definition = newValue}
  }
  public var hasDefinition: Bool {
    return _storage._definition != nil
  }
  public mutating func clearDefinition() {
    return _storage._definition = nil
  }

  public var columnDefinition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._columnDefinition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._columnDefinition = newValue}
  }
  public var hasColumnDefinition: Bool {
    return _storage._columnDefinition != nil
  }
  public mutating func clearColumnDefinition() {
    return _storage._columnDefinition = nil
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var column: Org_Roylance_Yaorm_Column {
    get {return _storage._column ?? Org_Roylance_Yaorm_Column()}
    set {_uniqueStorage()._column = newValue}
  }
  public var hasColumn: Bool {
    return _storage._column != nil
  }
  public mutating func clearColumn() {
    return _storage._column = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var schemaName: String {
    get {return _storage._schemaName}
    set {_uniqueStorage()._schemaName = newValue}
  }

  public var tableName: String {
    get {return _storage._tableName}
    set {_uniqueStorage()._tableName = newValue}
  }

  public var response: String {
    get {return _storage._response}
    set {_uniqueStorage()._response = newValue}
  }

  public var protoTypeToSqlTypes: Org_Roylance_Yaorm_ProtoTypeToSqlTypes {
    get {return _storage._protoTypeToSqlTypes ?? Org_Roylance_Yaorm_ProtoTypeToSqlTypes()}
    set {_uniqueStorage()._protoTypeToSqlTypes = newValue}
  }
  public var hasProtoTypeToSqlTypes: Bool {
    return _storage._protoTypeToSqlTypes != nil
  }
  public mutating func clearProtoTypeToSqlTypes() {
    return _storage._protoTypeToSqlTypes = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._definition)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._columnDefinition)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._index)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._column)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._whereClause)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._records)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._limit)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._offset)
        case 9: try decoder.decodeSingularStringField(value: &_storage._schemaName)
        case 10: try decoder.decodeSingularStringField(value: &_storage._tableName)
        case 11: try decoder.decodeSingularStringField(value: &_storage._response)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._protoTypeToSqlTypes)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._columnDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._column {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._limit, fieldNumber: 7)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._offset, fieldNumber: 8)
      }
      if !_storage._schemaName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemaName, fieldNumber: 9)
      }
      if !_storage._tableName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tableName, fieldNumber: 10)
      }
      if !_storage._response.isEmpty {
        try visitor.visitSingularStringField(value: _storage._response, fieldNumber: 11)
      }
      if let v = _storage._protoTypeToSqlTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_SqlGeneratorRequestResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._definition != other_storage._definition {return false}
        if _storage._columnDefinition != other_storage._columnDefinition {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._column != other_storage._column {return false}
        if _storage._whereClause != other_storage._whereClause {return false}
        if _storage._records != other_storage._records {return false}
        if _storage._limit != other_storage._limit {return false}
        if _storage._offset != other_storage._offset {return false}
        if _storage._schemaName != other_storage._schemaName {return false}
        if _storage._tableName != other_storage._tableName {return false}
        if _storage._response != other_storage._response {return false}
        if _storage._protoTypeToSqlTypes != other_storage._protoTypeToSqlTypes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
