/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaorm_model.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Org_Roylance_Yaorm_ProtobufType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case double // = 1
  case float // = 2
  case int32 // = 3
  case int64 // = 4
  case uint32 // = 5
  case uint64 // = 6
  case sint32 // = 7
  case sint64 // = 8
  case fixed32 // = 9
  case fixed64 // = 10
  case sfixed32 // = 11
  case sfixed64 // = 12
  case bool // = 13
  case string // = 14
  case bytes // = 15
  case proto // = 16
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .double
    case 2: self = .float
    case 3: self = .int32
    case 4: self = .int64
    case 5: self = .uint32
    case 6: self = .uint64
    case 7: self = .sint32
    case 8: self = .sint64
    case 9: self = .fixed32
    case 10: self = .fixed64
    case 11: self = .sfixed32
    case 12: self = .sfixed64
    case 13: self = .bool
    case 14: self = .string
    case 15: self = .bytes
    case 16: self = .proto
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "none": self = .none
    case "double": self = .double
    case "float": self = .float
    case "int32": self = .int32
    case "int64": self = .int64
    case "uint32": self = .uint32
    case "uint64": self = .uint64
    case "sint32": self = .sint32
    case "sint64": self = .sint64
    case "fixed32": self = .fixed32
    case "fixed64": self = .fixed64
    case "sfixed32": self = .sfixed32
    case "sfixed64": self = .sfixed64
    case "bool": self = .bool
    case "string": self = .string
    case "bytes": self = .bytes
    case "proto": self = .proto
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "NONE": self = .none
    case "DOUBLE": self = .double
    case "FLOAT": self = .float
    case "INT32": self = .int32
    case "INT64": self = .int64
    case "UINT32": self = .uint32
    case "UINT64": self = .uint64
    case "SINT32": self = .sint32
    case "SINT64": self = .sint64
    case "FIXED32": self = .fixed32
    case "FIXED64": self = .fixed64
    case "SFIXED32": self = .sfixed32
    case "SFIXED64": self = .sfixed64
    case "BOOL": self = .bool
    case "STRING": self = .string
    case "BYTES": self = .bytes
    case "PROTO": self = .proto
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "NONE": self = .none
    case "DOUBLE": self = .double
    case "FLOAT": self = .float
    case "INT32": self = .int32
    case "INT64": self = .int64
    case "UINT32": self = .uint32
    case "UINT64": self = .uint64
    case "SINT32": self = .sint32
    case "SINT64": self = .sint64
    case "FIXED32": self = .fixed32
    case "FIXED64": self = .fixed64
    case "SFIXED32": self = .sfixed32
    case "SFIXED64": self = .sfixed64
    case "BOOL": self = .bool
    case "STRING": self = .string
    case "BYTES": self = .bytes
    case "PROTO": self = .proto
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .none: return 0
      case .double: return 1
      case .float: return 2
      case .int32: return 3
      case .int64: return 4
      case .uint32: return 5
      case .uint64: return 6
      case .sint32: return 7
      case .sint64: return 8
      case .fixed32: return 9
      case .fixed64: return 10
      case .sfixed32: return 11
      case .sfixed64: return 12
      case .bool: return 13
      case .string: return 14
      case .bytes: return 15
      case .proto: return 16
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .none: return "\"NONE\""
      case .double: return "\"DOUBLE\""
      case .float: return "\"FLOAT\""
      case .int32: return "\"INT32\""
      case .int64: return "\"INT64\""
      case .uint32: return "\"UINT32\""
      case .uint64: return "\"UINT64\""
      case .sint32: return "\"SINT32\""
      case .sint64: return "\"SINT64\""
      case .fixed32: return "\"FIXED32\""
      case .fixed64: return "\"FIXED64\""
      case .sfixed32: return "\"SFIXED32\""
      case .sfixed64: return "\"SFIXED64\""
      case .bool: return "\"BOOL\""
      case .string: return "\"STRING\""
      case .bytes: return "\"BYTES\""
      case .proto: return "\"PROTO\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .none: return ".none"
      case .double: return ".double"
      case .float: return ".float"
      case .int32: return ".int32"
      case .int64: return ".int64"
      case .uint32: return ".uint32"
      case .uint64: return ".uint64"
      case .sint32: return ".sint32"
      case .sint64: return ".sint64"
      case .fixed32: return ".fixed32"
      case .fixed64: return ".fixed64"
      case .sfixed32: return ".sfixed32"
      case .sfixed64: return ".sfixed64"
      case .bool: return ".bool"
      case .string: return ".string"
      case .bytes: return ".bytes"
      case .proto: return ".proto"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Org_Roylance_Yaorm_SelectFunctionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case noneSelectFunctionType // = 0
  case countSelectFunctionType // = 1
  case maxSelectFunctionType // = 2
  case minSelectFunctionType // = 3
  case sumSelectFunctionType // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .noneSelectFunctionType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noneSelectFunctionType
    case 1: self = .countSelectFunctionType
    case 2: self = .maxSelectFunctionType
    case 3: self = .minSelectFunctionType
    case 4: self = .sumSelectFunctionType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "noneSelectFunctionType": self = .noneSelectFunctionType
    case "countSelectFunctionType": self = .countSelectFunctionType
    case "maxSelectFunctionType": self = .maxSelectFunctionType
    case "minSelectFunctionType": self = .minSelectFunctionType
    case "sumSelectFunctionType": self = .sumSelectFunctionType
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "NONE_SELECT_FUNCTION_TYPE": self = .noneSelectFunctionType
    case "COUNT_SELECT_FUNCTION_TYPE": self = .countSelectFunctionType
    case "MAX_SELECT_FUNCTION_TYPE": self = .maxSelectFunctionType
    case "MIN_SELECT_FUNCTION_TYPE": self = .minSelectFunctionType
    case "SUM_SELECT_FUNCTION_TYPE": self = .sumSelectFunctionType
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "NONE_SELECT_FUNCTION_TYPE": self = .noneSelectFunctionType
    case "COUNT_SELECT_FUNCTION_TYPE": self = .countSelectFunctionType
    case "MAX_SELECT_FUNCTION_TYPE": self = .maxSelectFunctionType
    case "MIN_SELECT_FUNCTION_TYPE": self = .minSelectFunctionType
    case "SUM_SELECT_FUNCTION_TYPE": self = .sumSelectFunctionType
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .noneSelectFunctionType: return 0
      case .countSelectFunctionType: return 1
      case .maxSelectFunctionType: return 2
      case .minSelectFunctionType: return 3
      case .sumSelectFunctionType: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .noneSelectFunctionType: return "\"NONE_SELECT_FUNCTION_TYPE\""
      case .countSelectFunctionType: return "\"COUNT_SELECT_FUNCTION_TYPE\""
      case .maxSelectFunctionType: return "\"MAX_SELECT_FUNCTION_TYPE\""
      case .minSelectFunctionType: return "\"MIN_SELECT_FUNCTION_TYPE\""
      case .sumSelectFunctionType: return "\"SUM_SELECT_FUNCTION_TYPE\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .noneSelectFunctionType: return ".noneSelectFunctionType"
      case .countSelectFunctionType: return ".countSelectFunctionType"
      case .maxSelectFunctionType: return ".maxSelectFunctionType"
      case .minSelectFunctionType: return ".minSelectFunctionType"
      case .sumSelectFunctionType: return ".sumSelectFunctionType"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Org_Roylance_Yaorm_OrderByType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case asc // = 0
  case desc // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .asc
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .asc
    case 1: self = .desc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "asc": self = .asc
    case "desc": self = .desc
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "ASC": self = .asc
    case "DESC": self = .desc
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "ASC": self = .asc
    case "DESC": self = .desc
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .asc: return 0
      case .desc: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .asc: return "\"ASC\""
      case .desc: return "\"DESC\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .asc: return ".asc"
      case .desc: return ".desc"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public struct Org_Roylance_Yaorm_ProtoTypeToSqlType: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_ProtoTypeToSqlType"}
  public var protoMessageName: String {return "ProtoTypeToSqlType"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "proto_type", json: "protoType", swift: "protoType"),
    2: .unique(proto: "sql_type", json: "sqlType", swift: "sqlType"),
  ]


  public var protoType: Org_Roylance_Yaorm_ProtobufType = Org_Roylance_Yaorm_ProtobufType.none

  public var sqlType: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_ProtobufType.self, value: &protoType)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &sqlType)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if protoType != Org_Roylance_Yaorm_ProtobufType.none {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_ProtobufType.self, value: protoType, fieldNumber: 1)
    }
    if sqlType != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: sqlType, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_ProtoTypeToSqlType) -> Bool {
    if protoType != other.protoType {return false}
    if sqlType != other.sqlType {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_ProtoTypeToSqlTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_ProtoTypeToSqlTypes"}
  public var protoMessageName: String {return "ProtoTypeToSqlTypes"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "results", swift: "results"),
  ]


  public var results: [Org_Roylance_Yaorm_ProtoTypeToSqlType] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ProtoTypeToSqlType.self, value: &results)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !results.isEmpty {
      try visitor.visitRepeatedMessageField(value: results, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_ProtoTypeToSqlTypes) -> Bool {
    if results != other.results {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_WhereClause: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_WhereClause"}
  public var protoMessageName: String {return "WhereClause"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "name_and_property", json: "nameAndProperty", swift: "nameAndProperty"),
    2: .unique(proto: "operator_type", json: "operatorType", swift: "operatorType"),
    3: .unique(proto: "connecting_and_or", json: "connectingAndOr", swift: "connectingAndOr"),
    4: .unique(proto: "connecting_where_clause", json: "connectingWhereClause", swift: "connectingWhereClause"),
    5: .unique(proto: "in_items", json: "inItems", swift: "inItems"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_WhereClause
    var _nameAndProperty: Org_Roylance_Yaorm_Column? = nil
    var _operatorType: Org_Roylance_Yaorm_WhereClause.OperatorType = Org_Roylance_Yaorm_WhereClause.OperatorType.equals
    var _connectingAndOr: Org_Roylance_Yaorm_WhereClause.ConnectingAndOr = Org_Roylance_Yaorm_WhereClause.ConnectingAndOr.none
    var _connectingWhereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _inItems: [String] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Column.self, value: &_nameAndProperty)
      case 2: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_WhereClause.OperatorType.self, value: &_operatorType)
      case 3: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_WhereClause.ConnectingAndOr.self, value: &_connectingAndOr)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_WhereClause.self, value: &_connectingWhereClause)
      case 5: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_inItems)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _nameAndProperty {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _operatorType != Org_Roylance_Yaorm_WhereClause.OperatorType.equals {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_WhereClause.OperatorType.self, value: _operatorType, fieldNumber: 2)
      }
      if _connectingAndOr != Org_Roylance_Yaorm_WhereClause.ConnectingAndOr.none {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_WhereClause.ConnectingAndOr.self, value: _connectingAndOr, fieldNumber: 3)
      }
      if let v = _connectingWhereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_inItems.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _inItems, fieldNumber: 5)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _nameAndProperty != other._nameAndProperty {return false}
      if _operatorType != other._operatorType {return false}
      if _connectingAndOr != other._connectingAndOr {return false}
      if _connectingWhereClause != other._connectingWhereClause {return false}
      if _inItems != other._inItems {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._nameAndProperty = _nameAndProperty
      clone._operatorType = _operatorType
      clone._connectingAndOr = _connectingAndOr
      clone._connectingWhereClause = _connectingWhereClause
      clone._inItems = _inItems
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum OperatorType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case equals // = 0
    case greaterThan // = 1
    case lessThan // = 2
    case notEquals // = 3
    case `in` // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .equals
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .equals
      case 1: self = .greaterThan
      case 2: self = .lessThan
      case 3: self = .notEquals
      case 4: self = .`in`
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "equals": self = .equals
      case "greaterThan": self = .greaterThan
      case "lessThan": self = .lessThan
      case "notEquals": self = .notEquals
      case "in": self = .`in`
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "EQUALS": self = .equals
      case "GREATER_THAN": self = .greaterThan
      case "LESS_THAN": self = .lessThan
      case "NOT_EQUALS": self = .notEquals
      case "IN": self = .`in`
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "EQUALS": self = .equals
      case "GREATER_THAN": self = .greaterThan
      case "LESS_THAN": self = .lessThan
      case "NOT_EQUALS": self = .notEquals
      case "IN": self = .`in`
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .equals: return 0
        case .greaterThan: return 1
        case .lessThan: return 2
        case .notEquals: return 3
        case .`in`: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .equals: return "\"EQUALS\""
        case .greaterThan: return "\"GREATER_THAN\""
        case .lessThan: return "\"LESS_THAN\""
        case .notEquals: return "\"NOT_EQUALS\""
        case .`in`: return "\"IN\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .equals: return ".equals"
        case .greaterThan: return ".greaterThan"
        case .lessThan: return ".lessThan"
        case .notEquals: return ".notEquals"
        case .`in`: return ".in"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ConnectingAndOr: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case and // = 1
    case or // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .and
      case 2: self = .or
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "none": self = .none
      case "and": self = .and
      case "or": self = .or
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NONE": self = .none
      case "AND": self = .and
      case "OR": self = .or
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NONE": self = .none
      case "AND": self = .and
      case "OR": self = .or
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .none: return 0
        case .and: return 1
        case .or: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .none: return "\"NONE\""
        case .and: return "\"AND\""
        case .or: return "\"OR\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .none: return ".none"
        case .and: return ".and"
        case .or: return ".or"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var nameAndProperty: Org_Roylance_Yaorm_Column {
    get {return _storage._nameAndProperty ?? Org_Roylance_Yaorm_Column()}
    set {_uniqueStorage()._nameAndProperty = newValue}
  }
  public var hasNameAndProperty: Bool {
    return _storage._nameAndProperty != nil
  }
  public mutating func clearNameAndProperty() {
    return _storage._nameAndProperty = nil
  }

  public var operatorType: Org_Roylance_Yaorm_WhereClause.OperatorType {
    get {return _storage._operatorType}
    set {_uniqueStorage()._operatorType = newValue}
  }

  public var connectingAndOr: Org_Roylance_Yaorm_WhereClause.ConnectingAndOr {
    get {return _storage._connectingAndOr}
    set {_uniqueStorage()._connectingAndOr = newValue}
  }

  public var connectingWhereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._connectingWhereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._connectingWhereClause = newValue}
  }
  public var hasConnectingWhereClause: Bool {
    return _storage._connectingWhereClause != nil
  }
  public mutating func clearConnectingWhereClause() {
    return _storage._connectingWhereClause = nil
  }

  public var inItems: [String] {
    get {return _storage._inItems}
    set {_uniqueStorage()._inItems = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_WhereClause) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_ColumnDefinition: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_ColumnDefinition"}
  public var protoMessageName: String {return "ColumnDefinition"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "name", swift: "name"),
    2: .same(proto: "type", swift: "type"),
    3: .unique(proto: "is_key", json: "isKey", swift: "isKey"),
    4: .unique(proto: "column_type", json: "columnType", swift: "columnType"),
    5: .unique(proto: "linker_type", json: "linkerType", swift: "linkerType"),
    6: .same(proto: "order", swift: "order"),
    7: .same(proto: "alias", swift: "alias"),
    8: .unique(proto: "table_alias", json: "tableAlias", swift: "tableAlias"),
    9: .unique(proto: "function_type", json: "functionType", swift: "functionType"),
    10: .unique(proto: "function_text", json: "functionText", swift: "functionText"),
  ]


  public enum ColumnType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case scalar // = 0
    case enumName // = 1
    case enumValue // = 2
    case messageKey // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .scalar
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .scalar
      case 1: self = .enumName
      case 2: self = .enumValue
      case 3: self = .messageKey
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "scalar": self = .scalar
      case "enumName": self = .enumName
      case "enumValue": self = .enumValue
      case "messageKey": self = .messageKey
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "SCALAR": self = .scalar
      case "ENUM_NAME": self = .enumName
      case "ENUM_VALUE": self = .enumValue
      case "MESSAGE_KEY": self = .messageKey
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "SCALAR": self = .scalar
      case "ENUM_NAME": self = .enumName
      case "ENUM_VALUE": self = .enumValue
      case "MESSAGE_KEY": self = .messageKey
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .scalar: return 0
        case .enumName: return 1
        case .enumValue: return 2
        case .messageKey: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .scalar: return "\"SCALAR\""
        case .enumName: return "\"ENUM_NAME\""
        case .enumValue: return "\"ENUM_VALUE\""
        case .messageKey: return "\"MESSAGE_KEY\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .scalar: return ".scalar"
        case .enumName: return ".enumName"
        case .enumValue: return ".enumValue"
        case .messageKey: return ".messageKey"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum LinkerType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case parent // = 1
    case child // = 2
    case neither // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .parent
      case 2: self = .child
      case 3: self = .neither
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "none": self = .none
      case "parent": self = .parent
      case "child": self = .child
      case "neither": self = .neither
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NONE": self = .none
      case "PARENT": self = .parent
      case "CHILD": self = .child
      case "NEITHER": self = .neither
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NONE": self = .none
      case "PARENT": self = .parent
      case "CHILD": self = .child
      case "NEITHER": self = .neither
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .none: return 0
        case .parent: return 1
        case .child: return 2
        case .neither: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .none: return "\"NONE\""
        case .parent: return "\"PARENT\""
        case .child: return "\"CHILD\""
        case .neither: return "\"NEITHER\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .none: return ".none"
        case .parent: return ".parent"
        case .child: return ".child"
        case .neither: return ".neither"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var name: String = ""

  public var type: Org_Roylance_Yaorm_ProtobufType = Org_Roylance_Yaorm_ProtobufType.none

  public var isKey: Bool = false

  public var columnType: Org_Roylance_Yaorm_ColumnDefinition.ColumnType = Org_Roylance_Yaorm_ColumnDefinition.ColumnType.scalar

  public var linkerType: Org_Roylance_Yaorm_ColumnDefinition.LinkerType = Org_Roylance_Yaorm_ColumnDefinition.LinkerType.none

  public var order: Int32 = 0

  public var alias: String = ""

  public var tableAlias: String = ""

  public var functionType: Org_Roylance_Yaorm_SelectFunctionType = Org_Roylance_Yaorm_SelectFunctionType.noneSelectFunctionType

  public var functionText: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 2: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_ProtobufType.self, value: &type)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isKey)
    case 4: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.ColumnType.self, value: &columnType)
    case 5: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.LinkerType.self, value: &linkerType)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &order)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &alias)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &tableAlias)
    case 9: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_SelectFunctionType.self, value: &functionType)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &functionText)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 1)
    }
    if type != Org_Roylance_Yaorm_ProtobufType.none {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_ProtobufType.self, value: type, fieldNumber: 2)
    }
    if isKey != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isKey, fieldNumber: 3)
    }
    if columnType != Org_Roylance_Yaorm_ColumnDefinition.ColumnType.scalar {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.ColumnType.self, value: columnType, fieldNumber: 4)
    }
    if linkerType != Org_Roylance_Yaorm_ColumnDefinition.LinkerType.none {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.LinkerType.self, value: linkerType, fieldNumber: 5)
    }
    if order != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: order, fieldNumber: 6)
    }
    if alias != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: alias, fieldNumber: 7)
    }
    if tableAlias != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: tableAlias, fieldNumber: 8)
    }
    if functionType != Org_Roylance_Yaorm_SelectFunctionType.noneSelectFunctionType {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_SelectFunctionType.self, value: functionType, fieldNumber: 9)
    }
    if functionText != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: functionText, fieldNumber: 10)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_ColumnDefinition) -> Bool {
    if name != other.name {return false}
    if type != other.type {return false}
    if isKey != other.isKey {return false}
    if columnType != other.columnType {return false}
    if linkerType != other.linkerType {return false}
    if order != other.order {return false}
    if alias != other.alias {return false}
    if tableAlias != other.tableAlias {return false}
    if functionType != other.functionType {return false}
    if functionText != other.functionText {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Index: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Index"}
  public var protoMessageName: String {return "Index"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "column_names", json: "columnNames", swift: "columnNames"),
    2: .unique(proto: "include_names", json: "includeNames", swift: "includeNames"),
  ]


  public var columnNames: [Org_Roylance_Yaorm_ColumnDefinition] = []

  public var includeNames: [Org_Roylance_Yaorm_ColumnDefinition] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &columnNames)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &includeNames)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !columnNames.isEmpty {
      try visitor.visitRepeatedMessageField(value: columnNames, fieldNumber: 1)
    }
    if !includeNames.isEmpty {
      try visitor.visitRepeatedMessageField(value: includeNames, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Index) -> Bool {
    if columnNames != other.columnNames {return false}
    if includeNames != other.includeNames {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Difference: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Difference"}
  public var protoMessageName: String {return "Difference"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "entity_type", json: "entityType", swift: "entityType"),
    2: .same(proto: "operation", swift: "operation"),
    3: .same(proto: "name", swift: "name"),
    4: .same(proto: "index", swift: "index"),
    5: .unique(proto: "property_definition", json: "propertyDefinition", swift: "propertyDefinition"),
    6: .unique(proto: "table_definition", json: "tableDefinition", swift: "tableDefinition"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_Difference
    var _entityType: Org_Roylance_Yaorm_Difference.EntityType = Org_Roylance_Yaorm_Difference.EntityType.index
    var _operation: Org_Roylance_Yaorm_Difference.Operation = Org_Roylance_Yaorm_Difference.Operation.create
    var _name: String = ""
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _propertyDefinition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_Difference.EntityType.self, value: &_entityType)
      case 2: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_Difference.Operation.self, value: &_operation)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_name)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Index.self, value: &_index)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_propertyDefinition)
      case 6: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_tableDefinition)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _entityType != Org_Roylance_Yaorm_Difference.EntityType.index {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_Difference.EntityType.self, value: _entityType, fieldNumber: 1)
      }
      if _operation != Org_Roylance_Yaorm_Difference.Operation.create {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_Difference.Operation.self, value: _operation, fieldNumber: 2)
      }
      if _name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _name, fieldNumber: 3)
      }
      if let v = _index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _propertyDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _entityType != other._entityType {return false}
      if _operation != other._operation {return false}
      if _name != other._name {return false}
      if _index != other._index {return false}
      if _propertyDefinition != other._propertyDefinition {return false}
      if _tableDefinition != other._tableDefinition {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._entityType = _entityType
      clone._operation = _operation
      clone._name = _name
      clone._index = _index
      clone._propertyDefinition = _propertyDefinition
      clone._tableDefinition = _tableDefinition
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum EntityType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case index // = 0
    case column // = 1
    case table // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .index
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .index
      case 1: self = .column
      case 2: self = .table
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "index": self = .index
      case "column": self = .column
      case "table": self = .table
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "INDEX": self = .index
      case "COLUMN": self = .column
      case "TABLE": self = .table
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "INDEX": self = .index
      case "COLUMN": self = .column
      case "TABLE": self = .table
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .index: return 0
        case .column: return 1
        case .table: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .index: return "\"INDEX\""
        case .column: return "\"COLUMN\""
        case .table: return "\"TABLE\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .index: return ".index"
        case .column: return ".column"
        case .table: return ".table"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Operation: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case create // = 0
    case drop // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .create
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .create
      case 1: self = .drop
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "create": self = .create
      case "drop": self = .drop
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "CREATE": self = .create
      case "DROP": self = .drop
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "CREATE": self = .create
      case "DROP": self = .drop
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .create: return 0
        case .drop: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .create: return "\"CREATE\""
        case .drop: return "\"DROP\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .create: return ".create"
        case .drop: return ".drop"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var entityType: Org_Roylance_Yaorm_Difference.EntityType {
    get {return _storage._entityType}
    set {_uniqueStorage()._entityType = newValue}
  }

  public var operation: Org_Roylance_Yaorm_Difference.Operation {
    get {return _storage._operation}
    set {_uniqueStorage()._operation = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var propertyDefinition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._propertyDefinition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._propertyDefinition = newValue}
  }
  public var hasPropertyDefinition: Bool {
    return _storage._propertyDefinition != nil
  }
  public mutating func clearPropertyDefinition() {
    return _storage._propertyDefinition = nil
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Difference) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_TableDefinition: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_TableDefinition"}
  public var protoMessageName: String {return "TableDefinition"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "name", swift: "name"),
    2: .unique(proto: "column_definitions", json: "columnDefinitions", swift: "columnDefinitions"),
    3: .same(proto: "index", swift: "index"),
    4: .unique(proto: "table_type", json: "tableType", swift: "tableType"),
    5: .same(proto: "alias", swift: "alias"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_TableDefinition
    var _name: String = ""
    var _columnDefinitions: [Org_Roylance_Yaorm_ColumnDefinition] = []
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _tableType: Org_Roylance_Yaorm_TableDefinition.TableType = Org_Roylance_Yaorm_TableDefinition.TableType.normal
    var _alias: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_name)
      case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_columnDefinitions)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Index.self, value: &_index)
      case 4: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_TableDefinition.TableType.self, value: &_tableType)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_alias)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _name, fieldNumber: 1)
      }
      if !_columnDefinitions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _columnDefinitions, fieldNumber: 2)
      }
      if let v = _index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _tableType != Org_Roylance_Yaorm_TableDefinition.TableType.normal {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_TableDefinition.TableType.self, value: _tableType, fieldNumber: 4)
      }
      if _alias != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _alias, fieldNumber: 5)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _name != other._name {return false}
      if _columnDefinitions != other._columnDefinitions {return false}
      if _index != other._index {return false}
      if _tableType != other._tableType {return false}
      if _alias != other._alias {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._name = _name
      clone._columnDefinitions = _columnDefinitions
      clone._index = _index
      clone._tableType = _tableType
      clone._alias = _alias
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum TableType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case normal // = 0
    case linkerMessage // = 1
    case linkerEnum // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .normal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .linkerMessage
      case 2: self = .linkerEnum
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "normal": self = .normal
      case "linkerMessage": self = .linkerMessage
      case "linkerEnum": self = .linkerEnum
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NORMAL": self = .normal
      case "LINKER_MESSAGE": self = .linkerMessage
      case "LINKER_ENUM": self = .linkerEnum
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NORMAL": self = .normal
      case "LINKER_MESSAGE": self = .linkerMessage
      case "LINKER_ENUM": self = .linkerEnum
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .normal: return 0
        case .linkerMessage: return 1
        case .linkerEnum: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .normal: return "\"NORMAL\""
        case .linkerMessage: return "\"LINKER_MESSAGE\""
        case .linkerEnum: return "\"LINKER_ENUM\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .normal: return ".normal"
        case .linkerMessage: return ".linkerMessage"
        case .linkerEnum: return ".linkerEnum"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var columnDefinitions: [Org_Roylance_Yaorm_ColumnDefinition] {
    get {return _storage._columnDefinitions}
    set {_uniqueStorage()._columnDefinitions = newValue}
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var tableType: Org_Roylance_Yaorm_TableDefinition.TableType {
    get {return _storage._tableType}
    set {_uniqueStorage()._tableType = newValue}
  }

  public var alias: String {
    get {return _storage._alias}
    set {_uniqueStorage()._alias = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinition) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_TableDefinitions: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_TableDefinitions"}
  public var protoMessageName: String {return "TableDefinitions"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "table_definitions", json: "tableDefinitions", swift: "tableDefinitions"),
  ]


  public var tableDefinitions: [Org_Roylance_Yaorm_TableDefinition] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &tableDefinitions)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !tableDefinitions.isEmpty {
      try visitor.visitRepeatedMessageField(value: tableDefinitions, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinitions) -> Bool {
    if tableDefinitions != other.tableDefinitions {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DifferenceReport: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_DifferenceReport"}
  public var protoMessageName: String {return "DifferenceReport"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "migration_exists", json: "migrationExists", swift: "migrationExists"),
    2: .same(proto: "differences", swift: "differences"),
  ]


  public var migrationExists: Bool = false

  public var differences: [Org_Roylance_Yaorm_Difference] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &migrationExists)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_Difference.self, value: &differences)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if migrationExists != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: migrationExists, fieldNumber: 1)
    }
    if !differences.isEmpty {
      try visitor.visitRepeatedMessageField(value: differences, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_DifferenceReport) -> Bool {
    if migrationExists != other.migrationExists {return false}
    if differences != other.differences {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Column: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Column"}
  public var protoMessageName: String {return "Column"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "definition", swift: "definition"),
    2: .unique(proto: "double_holder", json: "doubleHolder", swift: "doubleHolder"),
    3: .unique(proto: "float_holder", json: "floatHolder", swift: "floatHolder"),
    4: .unique(proto: "int32_holder", json: "int32Holder", swift: "int32Holder"),
    5: .unique(proto: "int64_holder", json: "int64Holder", swift: "int64Holder"),
    6: .unique(proto: "uint32_holder", json: "uint32Holder", swift: "uint32Holder"),
    7: .unique(proto: "uint64_holder", json: "uint64Holder", swift: "uint64Holder"),
    8: .unique(proto: "sint32_holder", json: "sint32Holder", swift: "sint32Holder"),
    9: .unique(proto: "sint64_holder", json: "sint64Holder", swift: "sint64Holder"),
    10: .unique(proto: "fixed32_holder", json: "fixed32Holder", swift: "fixed32Holder"),
    11: .unique(proto: "fixed64_holder", json: "fixed64Holder", swift: "fixed64Holder"),
    12: .unique(proto: "sfixed32_holder", json: "sfixed32Holder", swift: "sfixed32Holder"),
    13: .unique(proto: "sfixed64_holder", json: "sfixed64Holder", swift: "sfixed64Holder"),
    14: .unique(proto: "bool_holder", json: "boolHolder", swift: "boolHolder"),
    15: .unique(proto: "string_holder", json: "stringHolder", swift: "stringHolder"),
    16: .unique(proto: "bytes_holder", json: "bytesHolder", swift: "bytesHolder"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_Column
    var _definition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _doubleHolder: Double = 0
    var _floatHolder: Float = 0
    var _int32Holder: Int32 = 0
    var _int64Holder: Int64 = 0
    var _uint32Holder: UInt32 = 0
    var _uint64Holder: UInt64 = 0
    var _sint32Holder: Int32 = 0
    var _sint64Holder: Int64 = 0
    var _fixed32Holder: UInt32 = 0
    var _fixed64Holder: UInt64 = 0
    var _sfixed32Holder: Int32 = 0
    var _sfixed64Holder: Int64 = 0
    var _boolHolder: Bool = false
    var _stringHolder: String = ""
    var _bytesHolder: Data = Data()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_definition)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_doubleHolder)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_floatHolder)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_int32Holder)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_int64Holder)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_uint32Holder)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_uint64Holder)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_sint32Holder)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_sint64Holder)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_fixed32Holder)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_fixed64Holder)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_sfixed32Holder)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_sfixed64Holder)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_boolHolder)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_stringHolder)
      case 16: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_bytesHolder)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _doubleHolder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: _doubleHolder, fieldNumber: 2)
      }
      if _floatHolder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: _floatHolder, fieldNumber: 3)
      }
      if _int32Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _int32Holder, fieldNumber: 4)
      }
      if _int64Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _int64Holder, fieldNumber: 5)
      }
      if _uint32Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _uint32Holder, fieldNumber: 6)
      }
      if _uint64Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: _uint64Holder, fieldNumber: 7)
      }
      if _sint32Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: _sint32Holder, fieldNumber: 8)
      }
      if _sint64Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: _sint64Holder, fieldNumber: 9)
      }
      if _fixed32Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: _fixed32Holder, fieldNumber: 10)
      }
      if _fixed64Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: _fixed64Holder, fieldNumber: 11)
      }
      if _sfixed32Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: _sfixed32Holder, fieldNumber: 12)
      }
      if _sfixed64Holder != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: _sfixed64Holder, fieldNumber: 13)
      }
      if _boolHolder != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _boolHolder, fieldNumber: 14)
      }
      if _stringHolder != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _stringHolder, fieldNumber: 15)
      }
      if _bytesHolder != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _bytesHolder, fieldNumber: 16)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _definition != other._definition {return false}
      if _doubleHolder != other._doubleHolder {return false}
      if _floatHolder != other._floatHolder {return false}
      if _int32Holder != other._int32Holder {return false}
      if _int64Holder != other._int64Holder {return false}
      if _uint32Holder != other._uint32Holder {return false}
      if _uint64Holder != other._uint64Holder {return false}
      if _sint32Holder != other._sint32Holder {return false}
      if _sint64Holder != other._sint64Holder {return false}
      if _fixed32Holder != other._fixed32Holder {return false}
      if _fixed64Holder != other._fixed64Holder {return false}
      if _sfixed32Holder != other._sfixed32Holder {return false}
      if _sfixed64Holder != other._sfixed64Holder {return false}
      if _boolHolder != other._boolHolder {return false}
      if _stringHolder != other._stringHolder {return false}
      if _bytesHolder != other._bytesHolder {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._definition = _definition
      clone._doubleHolder = _doubleHolder
      clone._floatHolder = _floatHolder
      clone._int32Holder = _int32Holder
      clone._int64Holder = _int64Holder
      clone._uint32Holder = _uint32Holder
      clone._uint64Holder = _uint64Holder
      clone._sint32Holder = _sint32Holder
      clone._sint64Holder = _sint64Holder
      clone._fixed32Holder = _fixed32Holder
      clone._fixed64Holder = _fixed64Holder
      clone._sfixed32Holder = _sfixed32Holder
      clone._sfixed64Holder = _sfixed64Holder
      clone._boolHolder = _boolHolder
      clone._stringHolder = _stringHolder
      clone._bytesHolder = _bytesHolder
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var definition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._definition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._definition = newValue}
  }
  public var hasDefinition: Bool {
    return _storage._definition != nil
  }
  public mutating func clearDefinition() {
    return _storage._definition = nil
  }

  public var doubleHolder: Double {
    get {return _storage._doubleHolder}
    set {_uniqueStorage()._doubleHolder = newValue}
  }

  public var floatHolder: Float {
    get {return _storage._floatHolder}
    set {_uniqueStorage()._floatHolder = newValue}
  }

  public var int32Holder: Int32 {
    get {return _storage._int32Holder}
    set {_uniqueStorage()._int32Holder = newValue}
  }

  public var int64Holder: Int64 {
    get {return _storage._int64Holder}
    set {_uniqueStorage()._int64Holder = newValue}
  }

  public var uint32Holder: UInt32 {
    get {return _storage._uint32Holder}
    set {_uniqueStorage()._uint32Holder = newValue}
  }

  public var uint64Holder: UInt64 {
    get {return _storage._uint64Holder}
    set {_uniqueStorage()._uint64Holder = newValue}
  }

  public var sint32Holder: Int32 {
    get {return _storage._sint32Holder}
    set {_uniqueStorage()._sint32Holder = newValue}
  }

  public var sint64Holder: Int64 {
    get {return _storage._sint64Holder}
    set {_uniqueStorage()._sint64Holder = newValue}
  }

  public var fixed32Holder: UInt32 {
    get {return _storage._fixed32Holder}
    set {_uniqueStorage()._fixed32Holder = newValue}
  }

  public var fixed64Holder: UInt64 {
    get {return _storage._fixed64Holder}
    set {_uniqueStorage()._fixed64Holder = newValue}
  }

  public var sfixed32Holder: Int32 {
    get {return _storage._sfixed32Holder}
    set {_uniqueStorage()._sfixed32Holder = newValue}
  }

  public var sfixed64Holder: Int64 {
    get {return _storage._sfixed64Holder}
    set {_uniqueStorage()._sfixed64Holder = newValue}
  }

  public var boolHolder: Bool {
    get {return _storage._boolHolder}
    set {_uniqueStorage()._boolHolder = newValue}
  }

  public var stringHolder: String {
    get {return _storage._stringHolder}
    set {_uniqueStorage()._stringHolder = newValue}
  }

  public var bytesHolder: Data {
    get {return _storage._bytesHolder}
    set {_uniqueStorage()._bytesHolder = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Column) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_Record: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Record"}
  public var protoMessageName: String {return "Record"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "columns", swift: "columns"),
  ]


  public var columns: [Org_Roylance_Yaorm_Column] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_Column.self, value: &columns)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: columns, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Record) -> Bool {
    if columns != other.columns {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Records: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Records"}
  public var protoMessageName: String {return "Records"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "records", swift: "records"),
  ]


  public var records: [Org_Roylance_Yaorm_Record] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_Record.self, value: &records)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !records.isEmpty {
      try visitor.visitRepeatedMessageField(value: records, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Records) -> Bool {
    if records != other.records {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_TableRecords: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_TableRecords"}
  public var protoMessageName: String {return "TableRecords"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "table_definition", json: "tableDefinition", swift: "tableDefinition"),
    2: .same(proto: "records", swift: "records"),
    3: .unique(proto: "table_name", json: "tableName", swift: "tableName"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_TableRecords
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _tableName: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_tableDefinition)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_records)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_tableName)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _tableName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _tableName, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _tableDefinition != other._tableDefinition {return false}
      if _records != other._records {return false}
      if _tableName != other._tableName {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._tableDefinition = _tableDefinition
      clone._records = _records
      clone._tableName = _tableName
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var tableName: String {
    get {return _storage._tableName}
    set {_uniqueStorage()._tableName = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_TableRecords) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_AllTableRecords: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_AllTableRecords"}
  public var protoMessageName: String {return "AllTableRecords"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "table_records", json: "tableRecords", swift: "tableRecords"),
  ]


  public var tableRecords: [Org_Roylance_Yaorm_TableRecords] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_TableRecords.self, value: &tableRecords)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !tableRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: tableRecords, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_AllTableRecords) -> Bool {
    if tableRecords != other.tableRecords {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseOperation: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_DatabaseOperation"}
  public var protoMessageName: String {return "DatabaseOperation"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "table_definition", json: "tableDefinition", swift: "tableDefinition"),
    2: .same(proto: "records", swift: "records"),
    3: .same(proto: "index", swift: "index"),
    4: .unique(proto: "column_definition", json: "columnDefinition", swift: "columnDefinition"),
    5: .unique(proto: "where_clause", json: "whereClause", swift: "whereClause"),
    6: .unique(proto: "database_operation_type", json: "databaseOperationType", swift: "databaseOperationType"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_DatabaseOperation
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _columnDefinition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _databaseOperationType: Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType = Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType.createTable

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_tableDefinition)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_records)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Index.self, value: &_index)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_columnDefinition)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_WhereClause.self, value: &_whereClause)
      case 6: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType.self, value: &_databaseOperationType)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _columnDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _databaseOperationType != Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType.createTable {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType.self, value: _databaseOperationType, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _tableDefinition != other._tableDefinition {return false}
      if _records != other._records {return false}
      if _index != other._index {return false}
      if _columnDefinition != other._columnDefinition {return false}
      if _whereClause != other._whereClause {return false}
      if _databaseOperationType != other._databaseOperationType {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._tableDefinition = _tableDefinition
      clone._records = _records
      clone._index = _index
      clone._columnDefinition = _columnDefinition
      clone._whereClause = _whereClause
      clone._databaseOperationType = _databaseOperationType
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum DatabaseOperationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case createTable // = 0
    case dropTable // = 1
    case createIndex // = 2
    case dropIndex // = 3
    case createColumn // = 4
    case dropColumn // = 5
    case getCount // = 6
    case getCustom // = 7
    case get // = 8
    case getMany // = 9
    case getWhere // = 10
    case bulkInsert // = 11
    case createOrUpdate // = 12
    case create // = 13
    case update // = 14
    case updateWithCriteria // = 15
    case updateCustom // = 16
    case delete // = 17
    case deleteAll // = 18
    case UNRECOGNIZED(Int)

    public init() {
      self = .createTable
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .createTable
      case 1: self = .dropTable
      case 2: self = .createIndex
      case 3: self = .dropIndex
      case 4: self = .createColumn
      case 5: self = .dropColumn
      case 6: self = .getCount
      case 7: self = .getCustom
      case 8: self = .get
      case 9: self = .getMany
      case 10: self = .getWhere
      case 11: self = .bulkInsert
      case 12: self = .createOrUpdate
      case 13: self = .create
      case 14: self = .update
      case 15: self = .updateWithCriteria
      case 16: self = .updateCustom
      case 17: self = .delete
      case 18: self = .deleteAll
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "createTable": self = .createTable
      case "dropTable": self = .dropTable
      case "createIndex": self = .createIndex
      case "dropIndex": self = .dropIndex
      case "createColumn": self = .createColumn
      case "dropColumn": self = .dropColumn
      case "getCount": self = .getCount
      case "getCustom": self = .getCustom
      case "get": self = .get
      case "getMany": self = .getMany
      case "getWhere": self = .getWhere
      case "bulkInsert": self = .bulkInsert
      case "createOrUpdate": self = .createOrUpdate
      case "create": self = .create
      case "update": self = .update
      case "updateWithCriteria": self = .updateWithCriteria
      case "updateCustom": self = .updateCustom
      case "delete": self = .delete
      case "deleteAll": self = .deleteAll
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "CREATE_TABLE": self = .createTable
      case "DROP_TABLE": self = .dropTable
      case "CREATE_INDEX": self = .createIndex
      case "DROP_INDEX": self = .dropIndex
      case "CREATE_COLUMN": self = .createColumn
      case "DROP_COLUMN": self = .dropColumn
      case "GET_COUNT": self = .getCount
      case "GET_CUSTOM": self = .getCustom
      case "GET": self = .get
      case "GET_MANY": self = .getMany
      case "GET_WHERE": self = .getWhere
      case "BULK_INSERT": self = .bulkInsert
      case "CREATE_OR_UPDATE": self = .createOrUpdate
      case "CREATE": self = .create
      case "UPDATE": self = .update
      case "UPDATE_WITH_CRITERIA": self = .updateWithCriteria
      case "UPDATE_CUSTOM": self = .updateCustom
      case "DELETE": self = .delete
      case "DELETE_ALL": self = .deleteAll
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "CREATE_TABLE": self = .createTable
      case "DROP_TABLE": self = .dropTable
      case "CREATE_INDEX": self = .createIndex
      case "DROP_INDEX": self = .dropIndex
      case "CREATE_COLUMN": self = .createColumn
      case "DROP_COLUMN": self = .dropColumn
      case "GET_COUNT": self = .getCount
      case "GET_CUSTOM": self = .getCustom
      case "GET": self = .get
      case "GET_MANY": self = .getMany
      case "GET_WHERE": self = .getWhere
      case "BULK_INSERT": self = .bulkInsert
      case "CREATE_OR_UPDATE": self = .createOrUpdate
      case "CREATE": self = .create
      case "UPDATE": self = .update
      case "UPDATE_WITH_CRITERIA": self = .updateWithCriteria
      case "UPDATE_CUSTOM": self = .updateCustom
      case "DELETE": self = .delete
      case "DELETE_ALL": self = .deleteAll
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .createTable: return 0
        case .dropTable: return 1
        case .createIndex: return 2
        case .dropIndex: return 3
        case .createColumn: return 4
        case .dropColumn: return 5
        case .getCount: return 6
        case .getCustom: return 7
        case .get: return 8
        case .getMany: return 9
        case .getWhere: return 10
        case .bulkInsert: return 11
        case .createOrUpdate: return 12
        case .create: return 13
        case .update: return 14
        case .updateWithCriteria: return 15
        case .updateCustom: return 16
        case .delete: return 17
        case .deleteAll: return 18
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .createTable: return "\"CREATE_TABLE\""
        case .dropTable: return "\"DROP_TABLE\""
        case .createIndex: return "\"CREATE_INDEX\""
        case .dropIndex: return "\"DROP_INDEX\""
        case .createColumn: return "\"CREATE_COLUMN\""
        case .dropColumn: return "\"DROP_COLUMN\""
        case .getCount: return "\"GET_COUNT\""
        case .getCustom: return "\"GET_CUSTOM\""
        case .get: return "\"GET\""
        case .getMany: return "\"GET_MANY\""
        case .getWhere: return "\"GET_WHERE\""
        case .bulkInsert: return "\"BULK_INSERT\""
        case .createOrUpdate: return "\"CREATE_OR_UPDATE\""
        case .create: return "\"CREATE\""
        case .update: return "\"UPDATE\""
        case .updateWithCriteria: return "\"UPDATE_WITH_CRITERIA\""
        case .updateCustom: return "\"UPDATE_CUSTOM\""
        case .delete: return "\"DELETE\""
        case .deleteAll: return "\"DELETE_ALL\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .createTable: return ".createTable"
        case .dropTable: return ".dropTable"
        case .createIndex: return ".createIndex"
        case .dropIndex: return ".dropIndex"
        case .createColumn: return ".createColumn"
        case .dropColumn: return ".dropColumn"
        case .getCount: return ".getCount"
        case .getCustom: return ".getCustom"
        case .get: return ".get"
        case .getMany: return ".getMany"
        case .getWhere: return ".getWhere"
        case .bulkInsert: return ".bulkInsert"
        case .createOrUpdate: return ".createOrUpdate"
        case .create: return ".create"
        case .update: return ".update"
        case .updateWithCriteria: return ".updateWithCriteria"
        case .updateCustom: return ".updateCustom"
        case .delete: return ".delete"
        case .deleteAll: return ".deleteAll"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var columnDefinition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._columnDefinition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._columnDefinition = newValue}
  }
  public var hasColumnDefinition: Bool {
    return _storage._columnDefinition != nil
  }
  public mutating func clearColumnDefinition() {
    return _storage._columnDefinition = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var databaseOperationType: Org_Roylance_Yaorm_DatabaseOperation.DatabaseOperationType {
    get {return _storage._databaseOperationType}
    set {_uniqueStorage()._databaseOperationType = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseOperation) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_DatabaseOperationResult: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_DatabaseOperationResult"}
  public var protoMessageName: String {return "DatabaseOperationResult"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "bool_result", json: "boolResult", swift: "boolResult"),
    2: .unique(proto: "count_result", json: "countResult", swift: "countResult"),
    3: .unique(proto: "record_result", json: "recordResult", swift: "recordResult"),
    4: .unique(proto: "records_result", json: "recordsResult", swift: "recordsResult"),
    5: .unique(proto: "error_message", json: "errorMessage", swift: "errorMessage"),
    6: .unique(proto: "database_operation", json: "databaseOperation", swift: "databaseOperation"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_DatabaseOperationResult
    var _boolResult: Bool = false
    var _countResult: Int64 = 0
    var _recordResult: Org_Roylance_Yaorm_Record? = nil
    var _recordsResult: Org_Roylance_Yaorm_Records? = nil
    var _errorMessage: String = ""
    var _databaseOperation: Org_Roylance_Yaorm_DatabaseOperation? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_boolResult)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_countResult)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Record.self, value: &_recordResult)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_recordsResult)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_errorMessage)
      case 6: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_DatabaseOperation.self, value: &_databaseOperation)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _boolResult != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _boolResult, fieldNumber: 1)
      }
      if _countResult != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _countResult, fieldNumber: 2)
      }
      if let v = _recordResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _recordsResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _errorMessage != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _errorMessage, fieldNumber: 5)
      }
      if let v = _databaseOperation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _boolResult != other._boolResult {return false}
      if _countResult != other._countResult {return false}
      if _recordResult != other._recordResult {return false}
      if _recordsResult != other._recordsResult {return false}
      if _errorMessage != other._errorMessage {return false}
      if _databaseOperation != other._databaseOperation {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._boolResult = _boolResult
      clone._countResult = _countResult
      clone._recordResult = _recordResult
      clone._recordsResult = _recordsResult
      clone._errorMessage = _errorMessage
      clone._databaseOperation = _databaseOperation
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var boolResult: Bool {
    get {return _storage._boolResult}
    set {_uniqueStorage()._boolResult = newValue}
  }

  public var countResult: Int64 {
    get {return _storage._countResult}
    set {_uniqueStorage()._countResult = newValue}
  }

  public var recordResult: Org_Roylance_Yaorm_Record {
    get {return _storage._recordResult ?? Org_Roylance_Yaorm_Record()}
    set {_uniqueStorage()._recordResult = newValue}
  }
  public var hasRecordResult: Bool {
    return _storage._recordResult != nil
  }
  public mutating func clearRecordResult() {
    return _storage._recordResult = nil
  }

  public var recordsResult: Org_Roylance_Yaorm_Records {
    get {return _storage._recordsResult ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._recordsResult = newValue}
  }
  public var hasRecordsResult: Bool {
    return _storage._recordsResult != nil
  }
  public mutating func clearRecordsResult() {
    return _storage._recordsResult = nil
  }

  public var errorMessage: String {
    get {return _storage._errorMessage}
    set {_uniqueStorage()._errorMessage = newValue}
  }

  public var databaseOperation: Org_Roylance_Yaorm_DatabaseOperation {
    get {return _storage._databaseOperation ?? Org_Roylance_Yaorm_DatabaseOperation()}
    set {_uniqueStorage()._databaseOperation = newValue}
  }
  public var hasDatabaseOperation: Bool {
    return _storage._databaseOperation != nil
  }
  public mutating func clearDatabaseOperation() {
    return _storage._databaseOperation = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseOperationResult) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_DatabaseDefinition: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_DatabaseDefinition"}
  public var protoMessageName: String {return "DatabaseDefinition"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "schema", swift: "schema"),
    2: .same(proto: "name", swift: "name"),
    3: .unique(proto: "table_definitions", json: "tableDefinitions", swift: "tableDefinitions"),
    4: .unique(proto: "table_definition_graphs", json: "tableDefinitionGraphs", swift: "tableDefinitionGraphs"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_DatabaseDefinition
    var _schema: String = ""
    var _name: String = ""
    var _tableDefinitions: Org_Roylance_Yaorm_TableDefinitions? = nil
    var _tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraphs] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_schema)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_name)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinitions.self, value: &_tableDefinitions)
      case 4: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_TableDefinitionGraphs.self, value: &_tableDefinitionGraphs)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _schema != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _schema, fieldNumber: 1)
      }
      if _name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _name, fieldNumber: 2)
      }
      if let v = _tableDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_tableDefinitionGraphs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _tableDefinitionGraphs, fieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _schema != other._schema {return false}
      if _name != other._name {return false}
      if _tableDefinitions != other._tableDefinitions {return false}
      if _tableDefinitionGraphs != other._tableDefinitionGraphs {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._schema = _schema
      clone._name = _name
      clone._tableDefinitions = _tableDefinitions
      clone._tableDefinitionGraphs = _tableDefinitionGraphs
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var schema: String {
    get {return _storage._schema}
    set {_uniqueStorage()._schema = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var tableDefinitions: Org_Roylance_Yaorm_TableDefinitions {
    get {return _storage._tableDefinitions ?? Org_Roylance_Yaorm_TableDefinitions()}
    set {_uniqueStorage()._tableDefinitions = newValue}
  }
  public var hasTableDefinitions: Bool {
    return _storage._tableDefinitions != nil
  }
  public mutating func clearTableDefinitions() {
    return _storage._tableDefinitions = nil
  }

  public var tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraphs] {
    get {return _storage._tableDefinitionGraphs}
    set {_uniqueStorage()._tableDefinitionGraphs = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseDefinition) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_TableDefinitionGraph: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_TableDefinitionGraph"}
  public var protoMessageName: String {return "TableDefinitionGraph"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "main_table_definition", json: "mainTableDefinition", swift: "mainTableDefinition"),
    2: .unique(proto: "other_table_definition", json: "otherTableDefinition", swift: "otherTableDefinition"),
    3: .unique(proto: "linker_table_table", json: "linkerTableTable", swift: "linkerTableTable"),
    4: .unique(proto: "definition_graph_type", json: "definitionGraphType", swift: "definitionGraphType"),
    5: .unique(proto: "main_name", json: "mainName", swift: "mainName"),
    6: .unique(proto: "other_name", json: "otherName", swift: "otherName"),
    7: .unique(proto: "column_name", json: "columnName", swift: "columnName"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_TableDefinitionGraph
    var _mainTableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _otherTableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _linkerTableTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _definitionGraphType: Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType = Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType.enumType
    var _mainName: String = ""
    var _otherName: String = ""
    var _columnName: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_mainTableDefinition)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_otherTableDefinition)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_linkerTableTable)
      case 4: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType.self, value: &_definitionGraphType)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_mainName)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_otherName)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_columnName)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _mainTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _otherTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _linkerTableTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _definitionGraphType != Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType.enumType {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType.self, value: _definitionGraphType, fieldNumber: 4)
      }
      if _mainName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _mainName, fieldNumber: 5)
      }
      if _otherName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _otherName, fieldNumber: 6)
      }
      if _columnName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _columnName, fieldNumber: 7)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _mainTableDefinition != other._mainTableDefinition {return false}
      if _otherTableDefinition != other._otherTableDefinition {return false}
      if _linkerTableTable != other._linkerTableTable {return false}
      if _definitionGraphType != other._definitionGraphType {return false}
      if _mainName != other._mainName {return false}
      if _otherName != other._otherName {return false}
      if _columnName != other._columnName {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._mainTableDefinition = _mainTableDefinition
      clone._otherTableDefinition = _otherTableDefinition
      clone._linkerTableTable = _linkerTableTable
      clone._definitionGraphType = _definitionGraphType
      clone._mainName = _mainName
      clone._otherName = _otherName
      clone._columnName = _columnName
      return clone
    }
  }

  private var _storage = _StorageClass()


  public enum TableDefinitionGraphType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case enumType // = 0
    case messageType // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .enumType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .enumType
      case 1: self = .messageType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "enumType": self = .enumType
      case "messageType": self = .messageType
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ENUM_TYPE": self = .enumType
      case "MESSAGE_TYPE": self = .messageType
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ENUM_TYPE": self = .enumType
      case "MESSAGE_TYPE": self = .messageType
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .enumType: return 0
        case .messageType: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .enumType: return "\"ENUM_TYPE\""
        case .messageType: return "\"MESSAGE_TYPE\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .enumType: return ".enumType"
        case .messageType: return ".messageType"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var mainTableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._mainTableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._mainTableDefinition = newValue}
  }
  public var hasMainTableDefinition: Bool {
    return _storage._mainTableDefinition != nil
  }
  public mutating func clearMainTableDefinition() {
    return _storage._mainTableDefinition = nil
  }

  public var otherTableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._otherTableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._otherTableDefinition = newValue}
  }
  public var hasOtherTableDefinition: Bool {
    return _storage._otherTableDefinition != nil
  }
  public mutating func clearOtherTableDefinition() {
    return _storage._otherTableDefinition = nil
  }

  public var linkerTableTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._linkerTableTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._linkerTableTable = newValue}
  }
  public var hasLinkerTableTable: Bool {
    return _storage._linkerTableTable != nil
  }
  public mutating func clearLinkerTableTable() {
    return _storage._linkerTableTable = nil
  }

  public var definitionGraphType: Org_Roylance_Yaorm_TableDefinitionGraph.TableDefinitionGraphType {
    get {return _storage._definitionGraphType}
    set {_uniqueStorage()._definitionGraphType = newValue}
  }

  public var mainName: String {
    get {return _storage._mainName}
    set {_uniqueStorage()._mainName = newValue}
  }

  public var otherName: String {
    get {return _storage._otherName}
    set {_uniqueStorage()._otherName = newValue}
  }

  public var columnName: String {
    get {return _storage._columnName}
    set {_uniqueStorage()._columnName = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinitionGraph) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_TableDefinitionGraphs: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_TableDefinitionGraphs"}
  public var protoMessageName: String {return "TableDefinitionGraphs"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "main_table_definition", json: "mainTableDefinition", swift: "mainTableDefinition"),
    2: .unique(proto: "table_definition_graphs", json: "tableDefinitionGraphs", swift: "tableDefinitionGraphs"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_TableDefinitionGraphs
    var _mainTableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraph] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_mainTableDefinition)
      case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_TableDefinitionGraph.self, value: &_tableDefinitionGraphs)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _mainTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_tableDefinitionGraphs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _tableDefinitionGraphs, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _mainTableDefinition != other._mainTableDefinition {return false}
      if _tableDefinitionGraphs != other._tableDefinitionGraphs {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._mainTableDefinition = _mainTableDefinition
      clone._tableDefinitionGraphs = _tableDefinitionGraphs
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var mainTableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._mainTableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._mainTableDefinition = newValue}
  }
  public var hasMainTableDefinition: Bool {
    return _storage._mainTableDefinition != nil
  }
  public mutating func clearMainTableDefinition() {
    return _storage._mainTableDefinition = nil
  }

  public var tableDefinitionGraphs: [Org_Roylance_Yaorm_TableDefinitionGraph] {
    get {return _storage._tableDefinitionGraphs}
    set {_uniqueStorage()._tableDefinitionGraphs = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_TableDefinitionGraphs) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_ConnectionInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_ConnectionInfo"}
  public var protoMessageName: String {return "ConnectionInfo"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "host", swift: "host"),
    2: .same(proto: "user", swift: "user"),
    3: .same(proto: "password", swift: "password"),
    4: .same(proto: "schema", swift: "schema"),
    5: .unique(proto: "should_create_schema", json: "shouldCreateSchema", swift: "shouldCreateSchema"),
    6: .same(proto: "port", swift: "port"),
  ]


  public var host: String = ""

  public var user: String = ""

  public var password: String = ""

  public var schema: String = ""

  public var shouldCreateSchema: Bool = false

  public var port: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &host)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &user)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &password)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &schema)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &shouldCreateSchema)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &port)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if host != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: host, fieldNumber: 1)
    }
    if user != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: user, fieldNumber: 2)
    }
    if password != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: password, fieldNumber: 3)
    }
    if schema != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: schema, fieldNumber: 4)
    }
    if shouldCreateSchema != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: shouldCreateSchema, fieldNumber: 5)
    }
    if port != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: port, fieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_ConnectionInfo) -> Bool {
    if host != other.host {return false}
    if user != other.user {return false}
    if password != other.password {return false}
    if schema != other.schema {return false}
    if shouldCreateSchema != other.shouldCreateSchema {return false}
    if port != other.port {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_Migration: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Migration"}
  public var protoMessageName: String {return "Migration"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .unique(proto: "context_name", json: "contextName", swift: "contextName"),
    3: .unique(proto: "model_definition_base64", json: "modelDefinitionBase64", swift: "modelDefinitionBase64"),
    4: .unique(proto: "insert_date", json: "insertDate", swift: "insertDate"),
  ]


  public var id: String = ""

  public var contextName: String = ""

  public var modelDefinitionBase64: String = ""

  public var insertDate: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &contextName)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &modelDefinitionBase64)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &insertDate)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if contextName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: contextName, fieldNumber: 2)
    }
    if modelDefinitionBase64 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: modelDefinitionBase64, fieldNumber: 3)
    }
    if insertDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: insertDate, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Migration) -> Bool {
    if id != other.id {return false}
    if contextName != other.contextName {return false}
    if modelDefinitionBase64 != other.modelDefinitionBase64 {return false}
    if insertDate != other.insertDate {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseExecution: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_DatabaseExecution"}
  public var protoMessageName: String {return "DatabaseExecution"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "raw_sql", json: "rawSql", swift: "rawSql"),
    2: .unique(proto: "time_called", json: "timeCalled", swift: "timeCalled"),
    3: .same(proto: "result", swift: "result"),
    4: .unique(proto: "order_called", json: "orderCalled", swift: "orderCalled"),
  ]


  public var rawSql: String = ""

  public var timeCalled: Int64 = 0

  public var result: Bool = false

  public var orderCalled: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &rawSql)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &timeCalled)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &result)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &orderCalled)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if rawSql != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: rawSql, fieldNumber: 1)
    }
    if timeCalled != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: timeCalled, fieldNumber: 2)
    }
    if result != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: result, fieldNumber: 3)
    }
    if orderCalled != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: orderCalled, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseExecution) -> Bool {
    if rawSql != other.rawSql {return false}
    if timeCalled != other.timeCalled {return false}
    if result != other.result {return false}
    if orderCalled != other.orderCalled {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_DatabaseExecutionReport: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_DatabaseExecutionReport"}
  public var protoMessageName: String {return "DatabaseExecutionReport"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "calls_to_database", json: "callsToDatabase", swift: "callsToDatabase"),
    2: .same(proto: "executions", swift: "executions"),
  ]


  public var callsToDatabase: Int64 = 0

  public var executions: [Org_Roylance_Yaorm_DatabaseExecution] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &callsToDatabase)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_DatabaseExecution.self, value: &executions)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if callsToDatabase != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: callsToDatabase, fieldNumber: 1)
    }
    if !executions.isEmpty {
      try visitor.visitRepeatedMessageField(value: executions, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_DatabaseExecutionReport) -> Bool {
    if callsToDatabase != other.callsToDatabase {return false}
    if executions != other.executions {return false}
    return true
  }
}

///   project
public struct Org_Roylance_Yaorm_JoinTable: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_JoinTable"}
  public var protoMessageName: String {return "JoinTable"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "first_table", json: "firstTable", swift: "firstTable"),
    2: .unique(proto: "second_table", json: "secondTable", swift: "secondTable"),
    7: .unique(proto: "first_column", json: "firstColumn", swift: "firstColumn"),
    8: .unique(proto: "second_column", json: "secondColumn", swift: "secondColumn"),
    9: .unique(proto: "where_clause", json: "whereClause", swift: "whereClause"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_JoinTable
    var _firstTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _secondTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _firstColumn: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _secondColumn: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_firstTable)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_secondTable)
      case 7: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_firstColumn)
      case 8: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_secondColumn)
      case 9: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_WhereClause.self, value: &_whereClause)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _firstTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _secondTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _firstColumn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _secondColumn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _firstTable != other._firstTable {return false}
      if _secondTable != other._secondTable {return false}
      if _firstColumn != other._firstColumn {return false}
      if _secondColumn != other._secondColumn {return false}
      if _whereClause != other._whereClause {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._firstTable = _firstTable
      clone._secondTable = _secondTable
      clone._firstColumn = _firstColumn
      clone._secondColumn = _secondColumn
      clone._whereClause = _whereClause
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var firstTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._firstTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._firstTable = newValue}
  }
  public var hasFirstTable: Bool {
    return _storage._firstTable != nil
  }
  public mutating func clearFirstTable() {
    return _storage._firstTable = nil
  }

  public var secondTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._secondTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._secondTable = newValue}
  }
  public var hasSecondTable: Bool {
    return _storage._secondTable != nil
  }
  public mutating func clearSecondTable() {
    return _storage._secondTable = nil
  }

  public var firstColumn: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._firstColumn ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._firstColumn = newValue}
  }
  public var hasFirstColumn: Bool {
    return _storage._firstColumn != nil
  }
  public mutating func clearFirstColumn() {
    return _storage._firstColumn = nil
  }

  public var secondColumn: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._secondColumn ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._secondColumn = newValue}
  }
  public var hasSecondColumn: Bool {
    return _storage._secondColumn != nil
  }
  public mutating func clearSecondColumn() {
    return _storage._secondColumn = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_JoinTable) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_JoinTableRecords: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_JoinTableRecords"}
  public var protoMessageName: String {return "JoinTableRecords"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "join_table", json: "joinTable", swift: "joinTable"),
    2: .same(proto: "records", swift: "records"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_JoinTableRecords
    var _joinTable: Org_Roylance_Yaorm_JoinTable? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_JoinTable.self, value: &_joinTable)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_records)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _joinTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _joinTable != other._joinTable {return false}
      if _records != other._records {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._joinTable = _joinTable
      clone._records = _records
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var joinTable: Org_Roylance_Yaorm_JoinTable {
    get {return _storage._joinTable ?? Org_Roylance_Yaorm_JoinTable()}
    set {_uniqueStorage()._joinTable = newValue}
  }
  public var hasJoinTable: Bool {
    return _storage._joinTable != nil
  }
  public mutating func clearJoinTable() {
    return _storage._joinTable = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_JoinTableRecords) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_GroupBy: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_GroupBy"}
  public var protoMessageName: String {return "GroupBy"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "columns", swift: "columns"),
  ]


  public var columns: [Org_Roylance_Yaorm_ColumnDefinition] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &columns)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: columns, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_GroupBy) -> Bool {
    if columns != other.columns {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_OrderBy: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_OrderBy"}
  public var protoMessageName: String {return "OrderBy"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "column", swift: "column"),
    2: .same(proto: "type", swift: "type"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_OrderBy
    var _column: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _type: Org_Roylance_Yaorm_OrderByType = Org_Roylance_Yaorm_OrderByType.asc

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_column)
      case 2: try setter.decodeSingularField(fieldType: Org_Roylance_Yaorm_OrderByType.self, value: &_type)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _column {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _type != Org_Roylance_Yaorm_OrderByType.asc {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yaorm_OrderByType.self, value: _type, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _column != other._column {return false}
      if _type != other._type {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._column = _column
      clone._type = _type
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var column: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._column ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._column = newValue}
  }
  public var hasColumn: Bool {
    return _storage._column != nil
  }
  public mutating func clearColumn() {
    return _storage._column = nil
  }

  public var type: Org_Roylance_Yaorm_OrderByType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_OrderBy) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_Projection: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_Projection"}
  public var protoMessageName: String {return "Projection"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "labels", swift: "labels"),
    2: .unique(proto: "main_table", json: "mainTable", swift: "mainTable"),
    3: .same(proto: "joins", swift: "joins"),
    4: .unique(proto: "where_clause", json: "whereClause", swift: "whereClause"),
    5: .unique(proto: "group_by", json: "groupBy", swift: "groupBy"),
    6: .unique(proto: "order_bys", json: "orderBys", swift: "orderBys"),
    7: .same(proto: "name", swift: "name"),
    8: .same(proto: "limit", swift: "limit"),
    9: .same(proto: "offset", swift: "offset"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_Projection
    var _labels: [Org_Roylance_Yaorm_ColumnDefinition] = []
    var _mainTable: Org_Roylance_Yaorm_TableDefinition? = nil
    var _joins: [Org_Roylance_Yaorm_JoinTable] = []
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _groupBy: Org_Roylance_Yaorm_GroupBy? = nil
    var _orderBys: [Org_Roylance_Yaorm_OrderBy] = []
    var _name: String = ""
    var _limit: Int64 = 0
    var _offset: Int64 = 0

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_labels)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_mainTable)
      case 3: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_JoinTable.self, value: &_joins)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_WhereClause.self, value: &_whereClause)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_GroupBy.self, value: &_groupBy)
      case 6: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_OrderBy.self, value: &_orderBys)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_name)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_limit)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_offset)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if !_labels.isEmpty {
        try visitor.visitRepeatedMessageField(value: _labels, fieldNumber: 1)
      }
      if let v = _mainTable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_joins.isEmpty {
        try visitor.visitRepeatedMessageField(value: _joins, fieldNumber: 3)
      }
      if let v = _whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _groupBy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_orderBys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _orderBys, fieldNumber: 6)
      }
      if _name != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _name, fieldNumber: 7)
      }
      if _limit != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _limit, fieldNumber: 8)
      }
      if _offset != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _offset, fieldNumber: 9)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _labels != other._labels {return false}
      if _mainTable != other._mainTable {return false}
      if _joins != other._joins {return false}
      if _whereClause != other._whereClause {return false}
      if _groupBy != other._groupBy {return false}
      if _orderBys != other._orderBys {return false}
      if _name != other._name {return false}
      if _limit != other._limit {return false}
      if _offset != other._offset {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._labels = _labels
      clone._mainTable = _mainTable
      clone._joins = _joins
      clone._whereClause = _whereClause
      clone._groupBy = _groupBy
      clone._orderBys = _orderBys
      clone._name = _name
      clone._limit = _limit
      clone._offset = _offset
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var labels: [Org_Roylance_Yaorm_ColumnDefinition] {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  public var mainTable: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._mainTable ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._mainTable = newValue}
  }
  public var hasMainTable: Bool {
    return _storage._mainTable != nil
  }
  public mutating func clearMainTable() {
    return _storage._mainTable = nil
  }

  public var joins: [Org_Roylance_Yaorm_JoinTable] {
    get {return _storage._joins}
    set {_uniqueStorage()._joins = newValue}
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var groupBy: Org_Roylance_Yaorm_GroupBy {
    get {return _storage._groupBy ?? Org_Roylance_Yaorm_GroupBy()}
    set {_uniqueStorage()._groupBy = newValue}
  }
  public var hasGroupBy: Bool {
    return _storage._groupBy != nil
  }
  public mutating func clearGroupBy() {
    return _storage._groupBy = nil
  }

  public var orderBys: [Org_Roylance_Yaorm_OrderBy] {
    get {return _storage._orderBys}
    set {_uniqueStorage()._orderBys = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_Projection) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_UIYaormRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_UIYaormRequest"}
  public var protoMessageName: String {return "UIYaormRequest"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "token", swift: "token"),
    2: .unique(proto: "table_definition", json: "tableDefinition", swift: "tableDefinition"),
    3: .same(proto: "records", swift: "records"),
    4: .unique(proto: "connection_info", json: "connectionInfo", swift: "connectionInfo"),
    5: .unique(proto: "where_clause", json: "whereClause", swift: "whereClause"),
    6: .same(proto: "limit", swift: "limit"),
    7: .same(proto: "offset", swift: "offset"),
    8: .unique(proto: "insert_same_as_update", json: "insertSameAsUpdate", swift: "insertSameAsUpdate"),
    9: .unique(proto: "schema_name", json: "schemaName", swift: "schemaName"),
    10: .unique(proto: "table_name", json: "tableName", swift: "tableName"),
    11: .unique(proto: "custom_sql", json: "customSql", swift: "customSql"),
    13: .unique(proto: "file_descriptor", json: "fileDescriptor", swift: "fileDescriptor"),
    14: .same(proto: "ids", swift: "ids"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_UIYaormRequest
    var _token: String = ""
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _connectionInfo: Org_Roylance_Yaorm_ConnectionInfo? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _limit: Int64 = 0
    var _offset: Int64 = 0
    var _insertSameAsUpdate: Bool = false
    var _schemaName: String = ""
    var _tableName: String = ""
    var _customSql: String = ""
    var _fileDescriptor: String = ""
    var _ids: [String] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_token)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_tableDefinition)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_records)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ConnectionInfo.self, value: &_connectionInfo)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_WhereClause.self, value: &_whereClause)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_limit)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_offset)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_insertSameAsUpdate)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_schemaName)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_tableName)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_customSql)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fileDescriptor)
      case 14: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_ids)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _token != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _token, fieldNumber: 1)
      }
      if let v = _tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _connectionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _limit != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _limit, fieldNumber: 6)
      }
      if _offset != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _offset, fieldNumber: 7)
      }
      if _insertSameAsUpdate != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _insertSameAsUpdate, fieldNumber: 8)
      }
      if _schemaName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _schemaName, fieldNumber: 9)
      }
      if _tableName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _tableName, fieldNumber: 10)
      }
      if _customSql != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _customSql, fieldNumber: 11)
      }
      if _fileDescriptor != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _fileDescriptor, fieldNumber: 13)
      }
      if !_ids.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _ids, fieldNumber: 14)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _token != other._token {return false}
      if _tableDefinition != other._tableDefinition {return false}
      if _records != other._records {return false}
      if _connectionInfo != other._connectionInfo {return false}
      if _whereClause != other._whereClause {return false}
      if _limit != other._limit {return false}
      if _offset != other._offset {return false}
      if _insertSameAsUpdate != other._insertSameAsUpdate {return false}
      if _schemaName != other._schemaName {return false}
      if _tableName != other._tableName {return false}
      if _customSql != other._customSql {return false}
      if _fileDescriptor != other._fileDescriptor {return false}
      if _ids != other._ids {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._token = _token
      clone._tableDefinition = _tableDefinition
      clone._records = _records
      clone._connectionInfo = _connectionInfo
      clone._whereClause = _whereClause
      clone._limit = _limit
      clone._offset = _offset
      clone._insertSameAsUpdate = _insertSameAsUpdate
      clone._schemaName = _schemaName
      clone._tableName = _tableName
      clone._customSql = _customSql
      clone._fileDescriptor = _fileDescriptor
      clone._ids = _ids
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var connectionInfo: Org_Roylance_Yaorm_ConnectionInfo {
    get {return _storage._connectionInfo ?? Org_Roylance_Yaorm_ConnectionInfo()}
    set {_uniqueStorage()._connectionInfo = newValue}
  }
  public var hasConnectionInfo: Bool {
    return _storage._connectionInfo != nil
  }
  public mutating func clearConnectionInfo() {
    return _storage._connectionInfo = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var insertSameAsUpdate: Bool {
    get {return _storage._insertSameAsUpdate}
    set {_uniqueStorage()._insertSameAsUpdate = newValue}
  }

  public var schemaName: String {
    get {return _storage._schemaName}
    set {_uniqueStorage()._schemaName = newValue}
  }

  public var tableName: String {
    get {return _storage._tableName}
    set {_uniqueStorage()._tableName = newValue}
  }

  public var customSql: String {
    get {return _storage._customSql}
    set {_uniqueStorage()._customSql = newValue}
  }

  public var fileDescriptor: String {
    get {return _storage._fileDescriptor}
    set {_uniqueStorage()._fileDescriptor = newValue}
  }

  public var ids: [String] {
    get {return _storage._ids}
    set {_uniqueStorage()._ids = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_UIYaormRequest) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_UIYaormResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_UIYaormResponse"}
  public var protoMessageName: String {return "UIYaormResponse"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "records", swift: "records"),
    2: .same(proto: "schemas", swift: "schemas"),
    3: .same(proto: "tables", swift: "tables"),
    4: .unique(proto: "table_definition", json: "tableDefinition", swift: "tableDefinition"),
    5: .unique(proto: "table_definitions", json: "tableDefinitions", swift: "tableDefinitions"),
    6: .unique(proto: "record_count", json: "recordCount", swift: "recordCount"),
    7: .same(proto: "result", swift: "result"),
    8: .unique(proto: "proto_type_to_sql_types", json: "protoTypeToSqlTypes", swift: "protoTypeToSqlTypes"),
    9: .unique(proto: "string_result", json: "stringResult", swift: "stringResult"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_UIYaormResponse
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _schemas: [String] = []
    var _tables: [String] = []
    var _tableDefinition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _tableDefinitions: Org_Roylance_Yaorm_TableDefinitions? = nil
    var _recordCount: Int64 = 0
    var _result: Bool = false
    var _protoTypeToSqlTypes: [Org_Roylance_Yaorm_ProtoTypeToSqlType] = []
    var _stringResult: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_records)
      case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_schemas)
      case 3: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_tables)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_tableDefinition)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinitions.self, value: &_tableDefinitions)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_recordCount)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_result)
      case 8: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yaorm_ProtoTypeToSqlType.self, value: &_protoTypeToSqlTypes)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_stringResult)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_schemas.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _schemas, fieldNumber: 2)
      }
      if !_tables.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _tables, fieldNumber: 3)
      }
      if let v = _tableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _tableDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _recordCount != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _recordCount, fieldNumber: 6)
      }
      if _result != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _result, fieldNumber: 7)
      }
      if !_protoTypeToSqlTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _protoTypeToSqlTypes, fieldNumber: 8)
      }
      if _stringResult != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _stringResult, fieldNumber: 9)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _records != other._records {return false}
      if _schemas != other._schemas {return false}
      if _tables != other._tables {return false}
      if _tableDefinition != other._tableDefinition {return false}
      if _tableDefinitions != other._tableDefinitions {return false}
      if _recordCount != other._recordCount {return false}
      if _result != other._result {return false}
      if _protoTypeToSqlTypes != other._protoTypeToSqlTypes {return false}
      if _stringResult != other._stringResult {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._records = _records
      clone._schemas = _schemas
      clone._tables = _tables
      clone._tableDefinition = _tableDefinition
      clone._tableDefinitions = _tableDefinitions
      clone._recordCount = _recordCount
      clone._result = _result
      clone._protoTypeToSqlTypes = _protoTypeToSqlTypes
      clone._stringResult = _stringResult
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var schemas: [String] {
    get {return _storage._schemas}
    set {_uniqueStorage()._schemas = newValue}
  }

  public var tables: [String] {
    get {return _storage._tables}
    set {_uniqueStorage()._tables = newValue}
  }

  public var tableDefinition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._tableDefinition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._tableDefinition = newValue}
  }
  public var hasTableDefinition: Bool {
    return _storage._tableDefinition != nil
  }
  public mutating func clearTableDefinition() {
    return _storage._tableDefinition = nil
  }

  public var tableDefinitions: Org_Roylance_Yaorm_TableDefinitions {
    get {return _storage._tableDefinitions ?? Org_Roylance_Yaorm_TableDefinitions()}
    set {_uniqueStorage()._tableDefinitions = newValue}
  }
  public var hasTableDefinitions: Bool {
    return _storage._tableDefinitions != nil
  }
  public mutating func clearTableDefinitions() {
    return _storage._tableDefinitions = nil
  }

  public var recordCount: Int64 {
    get {return _storage._recordCount}
    set {_uniqueStorage()._recordCount = newValue}
  }

  public var result: Bool {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  public var protoTypeToSqlTypes: [Org_Roylance_Yaorm_ProtoTypeToSqlType] {
    get {return _storage._protoTypeToSqlTypes}
    set {_uniqueStorage()._protoTypeToSqlTypes = newValue}
  }

  public var stringResult: String {
    get {return _storage._stringResult}
    set {_uniqueStorage()._stringResult = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_UIYaormResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_SqlGeneratorRequestResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_SqlGeneratorRequestResponse"}
  public var protoMessageName: String {return "SqlGeneratorRequestResponse"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "definition", swift: "definition"),
    2: .unique(proto: "column_definition", json: "columnDefinition", swift: "columnDefinition"),
    3: .same(proto: "index", swift: "index"),
    4: .same(proto: "column", swift: "column"),
    5: .unique(proto: "where_clause", json: "whereClause", swift: "whereClause"),
    6: .same(proto: "records", swift: "records"),
    7: .same(proto: "limit", swift: "limit"),
    8: .same(proto: "offset", swift: "offset"),
    9: .unique(proto: "schema_name", json: "schemaName", swift: "schemaName"),
    10: .unique(proto: "table_name", json: "tableName", swift: "tableName"),
    11: .same(proto: "response", swift: "response"),
    12: .unique(proto: "proto_type_to_sql_types", json: "protoTypeToSqlTypes", swift: "protoTypeToSqlTypes"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_SqlGeneratorRequestResponse
    var _definition: Org_Roylance_Yaorm_TableDefinition? = nil
    var _columnDefinition: Org_Roylance_Yaorm_ColumnDefinition? = nil
    var _index: Org_Roylance_Yaorm_Index? = nil
    var _column: Org_Roylance_Yaorm_Column? = nil
    var _whereClause: Org_Roylance_Yaorm_WhereClause? = nil
    var _records: Org_Roylance_Yaorm_Records? = nil
    var _limit: Int64 = 0
    var _offset: Int64 = 0
    var _schemaName: String = ""
    var _tableName: String = ""
    var _response: String = ""
    var _protoTypeToSqlTypes: Org_Roylance_Yaorm_ProtoTypeToSqlTypes? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_TableDefinition.self, value: &_definition)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ColumnDefinition.self, value: &_columnDefinition)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Index.self, value: &_index)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Column.self, value: &_column)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_WhereClause.self, value: &_whereClause)
      case 6: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_Records.self, value: &_records)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_limit)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_offset)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_schemaName)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_tableName)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_response)
      case 12: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_ProtoTypeToSqlTypes.self, value: &_protoTypeToSqlTypes)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _columnDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _index {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _column {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _whereClause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _records {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _limit != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _limit, fieldNumber: 7)
      }
      if _offset != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _offset, fieldNumber: 8)
      }
      if _schemaName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _schemaName, fieldNumber: 9)
      }
      if _tableName != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _tableName, fieldNumber: 10)
      }
      if _response != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _response, fieldNumber: 11)
      }
      if let v = _protoTypeToSqlTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _definition != other._definition {return false}
      if _columnDefinition != other._columnDefinition {return false}
      if _index != other._index {return false}
      if _column != other._column {return false}
      if _whereClause != other._whereClause {return false}
      if _records != other._records {return false}
      if _limit != other._limit {return false}
      if _offset != other._offset {return false}
      if _schemaName != other._schemaName {return false}
      if _tableName != other._tableName {return false}
      if _response != other._response {return false}
      if _protoTypeToSqlTypes != other._protoTypeToSqlTypes {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._definition = _definition
      clone._columnDefinition = _columnDefinition
      clone._index = _index
      clone._column = _column
      clone._whereClause = _whereClause
      clone._records = _records
      clone._limit = _limit
      clone._offset = _offset
      clone._schemaName = _schemaName
      clone._tableName = _tableName
      clone._response = _response
      clone._protoTypeToSqlTypes = _protoTypeToSqlTypes
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var definition: Org_Roylance_Yaorm_TableDefinition {
    get {return _storage._definition ?? Org_Roylance_Yaorm_TableDefinition()}
    set {_uniqueStorage()._definition = newValue}
  }
  public var hasDefinition: Bool {
    return _storage._definition != nil
  }
  public mutating func clearDefinition() {
    return _storage._definition = nil
  }

  public var columnDefinition: Org_Roylance_Yaorm_ColumnDefinition {
    get {return _storage._columnDefinition ?? Org_Roylance_Yaorm_ColumnDefinition()}
    set {_uniqueStorage()._columnDefinition = newValue}
  }
  public var hasColumnDefinition: Bool {
    return _storage._columnDefinition != nil
  }
  public mutating func clearColumnDefinition() {
    return _storage._columnDefinition = nil
  }

  public var index: Org_Roylance_Yaorm_Index {
    get {return _storage._index ?? Org_Roylance_Yaorm_Index()}
    set {_uniqueStorage()._index = newValue}
  }
  public var hasIndex: Bool {
    return _storage._index != nil
  }
  public mutating func clearIndex() {
    return _storage._index = nil
  }

  public var column: Org_Roylance_Yaorm_Column {
    get {return _storage._column ?? Org_Roylance_Yaorm_Column()}
    set {_uniqueStorage()._column = newValue}
  }
  public var hasColumn: Bool {
    return _storage._column != nil
  }
  public mutating func clearColumn() {
    return _storage._column = nil
  }

  public var whereClause: Org_Roylance_Yaorm_WhereClause {
    get {return _storage._whereClause ?? Org_Roylance_Yaorm_WhereClause()}
    set {_uniqueStorage()._whereClause = newValue}
  }
  public var hasWhereClause: Bool {
    return _storage._whereClause != nil
  }
  public mutating func clearWhereClause() {
    return _storage._whereClause = nil
  }

  public var records: Org_Roylance_Yaorm_Records {
    get {return _storage._records ?? Org_Roylance_Yaorm_Records()}
    set {_uniqueStorage()._records = newValue}
  }
  public var hasRecords: Bool {
    return _storage._records != nil
  }
  public mutating func clearRecords() {
    return _storage._records = nil
  }

  public var limit: Int64 {
    get {return _storage._limit}
    set {_uniqueStorage()._limit = newValue}
  }

  public var offset: Int64 {
    get {return _storage._offset}
    set {_uniqueStorage()._offset = newValue}
  }

  public var schemaName: String {
    get {return _storage._schemaName}
    set {_uniqueStorage()._schemaName = newValue}
  }

  public var tableName: String {
    get {return _storage._tableName}
    set {_uniqueStorage()._tableName = newValue}
  }

  public var response: String {
    get {return _storage._response}
    set {_uniqueStorage()._response = newValue}
  }

  public var protoTypeToSqlTypes: Org_Roylance_Yaorm_ProtoTypeToSqlTypes {
    get {return _storage._protoTypeToSqlTypes ?? Org_Roylance_Yaorm_ProtoTypeToSqlTypes()}
    set {_uniqueStorage()._protoTypeToSqlTypes = newValue}
  }
  public var hasProtoTypeToSqlTypes: Bool {
    return _storage._protoTypeToSqlTypes != nil
  }
  public mutating func clearProtoTypeToSqlTypes() {
    return _storage._protoTypeToSqlTypes = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_SqlGeneratorRequestResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
