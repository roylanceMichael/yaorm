/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaorm_controller.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "org.roylance.yaorm"

public struct Org_Roylance_Yaorm_CommonAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  private class _StorageClass {
    var _request: Org_Roylance_Yaorm_UIYaormRequest? = nil
    var _response: Org_Roylance_Yaorm_UIYaormResponse? = nil

    init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var request: Org_Roylance_Yaorm_UIYaormRequest {
    get {return _storage._request ?? Org_Roylance_Yaorm_UIYaormRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  public var response: Org_Roylance_Yaorm_UIYaormResponse {
    get {return _storage._response ?? Org_Roylance_Yaorm_UIYaormResponse()}
    set {_uniqueStorage()._response = newValue}
  }
  public var hasResponse: Bool {
    return _storage._response != nil
  }
  public mutating func clearResponse() {
    return _storage._response = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_CommonAction) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yaorm_YaormMainController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".YaormMainController"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "get_schemas"),
    2: .standard(proto: "get_tables"),
    3: .standard(proto: "get_table_definition"),
    4: .standard(proto: "get_table_definitions"),
    5: .standard(proto: "get_record_count"),
    6: .standard(proto: "get_records"),
  ]

  private class _StorageClass {
    var _getSchemas: Org_Roylance_Yaorm_CommonAction? = nil
    var _getTables: Org_Roylance_Yaorm_CommonAction? = nil
    var _getTableDefinition: Org_Roylance_Yaorm_CommonAction? = nil
    var _getTableDefinitions: Org_Roylance_Yaorm_CommonAction? = nil
    var _getRecordCount: Org_Roylance_Yaorm_CommonAction? = nil
    var _getRecords: Org_Roylance_Yaorm_CommonAction? = nil

    init() {}

    init(copying source: _StorageClass) {
      _getSchemas = source._getSchemas
      _getTables = source._getTables
      _getTableDefinition = source._getTableDefinition
      _getTableDefinitions = source._getTableDefinitions
      _getRecordCount = source._getRecordCount
      _getRecords = source._getRecords
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var getSchemas: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getSchemas ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getSchemas = newValue}
  }
  public var hasGetSchemas: Bool {
    return _storage._getSchemas != nil
  }
  public mutating func clearGetSchemas() {
    return _storage._getSchemas = nil
  }

  public var getTables: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getTables ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getTables = newValue}
  }
  public var hasGetTables: Bool {
    return _storage._getTables != nil
  }
  public mutating func clearGetTables() {
    return _storage._getTables = nil
  }

  public var getTableDefinition: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getTableDefinition ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getTableDefinition = newValue}
  }
  public var hasGetTableDefinition: Bool {
    return _storage._getTableDefinition != nil
  }
  public mutating func clearGetTableDefinition() {
    return _storage._getTableDefinition = nil
  }

  public var getTableDefinitions: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getTableDefinitions ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getTableDefinitions = newValue}
  }
  public var hasGetTableDefinitions: Bool {
    return _storage._getTableDefinitions != nil
  }
  public mutating func clearGetTableDefinitions() {
    return _storage._getTableDefinitions = nil
  }

  public var getRecordCount: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getRecordCount ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getRecordCount = newValue}
  }
  public var hasGetRecordCount: Bool {
    return _storage._getRecordCount != nil
  }
  public mutating func clearGetRecordCount() {
    return _storage._getRecordCount = nil
  }

  public var getRecords: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getRecords ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getRecords = newValue}
  }
  public var hasGetRecords: Bool {
    return _storage._getRecords != nil
  }
  public mutating func clearGetRecords() {
    return _storage._getRecords = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._getSchemas)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._getTables)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._getTableDefinition)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._getTableDefinitions)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._getRecordCount)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._getRecords)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._getSchemas {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._getTables {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._getTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._getTableDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._getRecordCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._getRecords {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yaorm_YaormMainController) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._getSchemas != other_storage._getSchemas {return false}
        if _storage._getTables != other_storage._getTables {return false}
        if _storage._getTableDefinition != other_storage._getTableDefinition {return false}
        if _storage._getTableDefinitions != other_storage._getTableDefinitions {return false}
        if _storage._getRecordCount != other_storage._getRecordCount {return false}
        if _storage._getRecords != other_storage._getRecords {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
