/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yaorm_controller.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Org_Roylance_Yaorm_CommonAction: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_CommonAction"}
  public var protoMessageName: String {return "CommonAction"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "request", swift: "request"),
    2: .same(proto: "response", swift: "response"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_CommonAction
    var _request: Org_Roylance_Yaorm_UIYaormRequest? = nil
    var _response: Org_Roylance_Yaorm_UIYaormResponse? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_UIYaormRequest.self, value: &_request)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_UIYaormResponse.self, value: &_response)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _request != other._request {return false}
      if _response != other._response {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._request = _request
      clone._response = _response
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var request: Org_Roylance_Yaorm_UIYaormRequest {
    get {return _storage._request ?? Org_Roylance_Yaorm_UIYaormRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  public var hasRequest: Bool {
    return _storage._request != nil
  }
  public mutating func clearRequest() {
    return _storage._request = nil
  }

  public var response: Org_Roylance_Yaorm_UIYaormResponse {
    get {return _storage._response ?? Org_Roylance_Yaorm_UIYaormResponse()}
    set {_uniqueStorage()._response = newValue}
  }
  public var hasResponse: Bool {
    return _storage._response != nil
  }
  public mutating func clearResponse() {
    return _storage._response = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_CommonAction) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yaorm_YaormMainController: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yaorm_YaormMainController"}
  public var protoMessageName: String {return "YaormMainController"}
  public var protoPackageName: String {return "org.roylance.yaorm"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "get_schemas", json: "getSchemas", swift: "getSchemas"),
    2: .unique(proto: "get_tables", json: "getTables", swift: "getTables"),
    3: .unique(proto: "get_table_definition", json: "getTableDefinition", swift: "getTableDefinition"),
    4: .unique(proto: "get_table_definitions", json: "getTableDefinitions", swift: "getTableDefinitions"),
    5: .unique(proto: "get_record_count", json: "getRecordCount", swift: "getRecordCount"),
    6: .unique(proto: "get_records", json: "getRecords", swift: "getRecords"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yaorm_YaormMainController
    var _getSchemas: Org_Roylance_Yaorm_CommonAction? = nil
    var _getTables: Org_Roylance_Yaorm_CommonAction? = nil
    var _getTableDefinition: Org_Roylance_Yaorm_CommonAction? = nil
    var _getTableDefinitions: Org_Roylance_Yaorm_CommonAction? = nil
    var _getRecordCount: Org_Roylance_Yaorm_CommonAction? = nil
    var _getRecords: Org_Roylance_Yaorm_CommonAction? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_CommonAction.self, value: &_getSchemas)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_CommonAction.self, value: &_getTables)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_CommonAction.self, value: &_getTableDefinition)
      case 4: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_CommonAction.self, value: &_getTableDefinitions)
      case 5: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_CommonAction.self, value: &_getRecordCount)
      case 6: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yaorm_CommonAction.self, value: &_getRecords)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _getSchemas {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _getTables {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _getTableDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _getTableDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _getRecordCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _getRecords {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _getSchemas != other._getSchemas {return false}
      if _getTables != other._getTables {return false}
      if _getTableDefinition != other._getTableDefinition {return false}
      if _getTableDefinitions != other._getTableDefinitions {return false}
      if _getRecordCount != other._getRecordCount {return false}
      if _getRecords != other._getRecords {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._getSchemas = _getSchemas
      clone._getTables = _getTables
      clone._getTableDefinition = _getTableDefinition
      clone._getTableDefinitions = _getTableDefinitions
      clone._getRecordCount = _getRecordCount
      clone._getRecords = _getRecords
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var getSchemas: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getSchemas ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getSchemas = newValue}
  }
  public var hasGetSchemas: Bool {
    return _storage._getSchemas != nil
  }
  public mutating func clearGetSchemas() {
    return _storage._getSchemas = nil
  }

  public var getTables: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getTables ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getTables = newValue}
  }
  public var hasGetTables: Bool {
    return _storage._getTables != nil
  }
  public mutating func clearGetTables() {
    return _storage._getTables = nil
  }

  public var getTableDefinition: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getTableDefinition ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getTableDefinition = newValue}
  }
  public var hasGetTableDefinition: Bool {
    return _storage._getTableDefinition != nil
  }
  public mutating func clearGetTableDefinition() {
    return _storage._getTableDefinition = nil
  }

  public var getTableDefinitions: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getTableDefinitions ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getTableDefinitions = newValue}
  }
  public var hasGetTableDefinitions: Bool {
    return _storage._getTableDefinitions != nil
  }
  public mutating func clearGetTableDefinitions() {
    return _storage._getTableDefinitions = nil
  }

  public var getRecordCount: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getRecordCount ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getRecordCount = newValue}
  }
  public var hasGetRecordCount: Bool {
    return _storage._getRecordCount != nil
  }
  public mutating func clearGetRecordCount() {
    return _storage._getRecordCount = nil
  }

  public var getRecords: Org_Roylance_Yaorm_CommonAction {
    get {return _storage._getRecords ?? Org_Roylance_Yaorm_CommonAction()}
    set {_uniqueStorage()._getRecords = newValue}
  }
  public var hasGetRecords: Bool {
    return _storage._getRecords != nil
  }
  public mutating func clearGetRecords() {
    return _storage._getRecords = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yaorm_YaormMainController) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
