syntax = "proto3";
package org.roylance.yaorm;

enum ProtobufType {
    NONE = 0;
    DOUBLE = 1;
    FLOAT = 2;
    INT32 = 3;
    INT64 = 4;
    UINT32 = 5;
    UINT64 = 6;
    SINT32 = 7;
    SINT64 = 8;
    FIXED32 = 9;
    FIXED64 = 10;
    SFIXED32 = 11;
    SFIXED64 = 12;
    BOOL = 13;
    STRING = 14;
    BYTES = 15;
    PROTO = 16;
}

enum DelimiterType {
    COMMA = 0;
    PIPE = 1;
    CARRIAGE_RETURN = 2;
    TAB = 3;
    SEMI_COLON = 4;
}

message Customer {
    string id = 1;
    string name = 2;
    ConnectionInformation staging_connection = 3;
    repeated Projection projections = 4;
    repeated DataSet datasets = 5;
    repeated Transformation transformations = 6;
    bool build_landing_dag = 7;
}

message Projection {
    string id = 1;
    string destination_database_key = 2;
    string ecr_start_date = 3;
    string ecr_end_date = 4;
    string acg_start_date = 5;
    string acg_end_date = 6;
    ConnectionInformation destination_database_connection = 7;
    ConnectionInformation redshift_connection = 8;
    ConnectionInformation s3_connection = 9;
    string hermes = 10;
    bool build_redshift_dag = 11;
    bool build_dag = 12;
    bool is_demo = 13;
    repeated ProjectionTable tables  = 14;
}

message ProjectionTable {
    string id = 1;
    Projection projection = 2;
    MySQLRedshiftTable mysql_redshift_table = 3;
    string table_name = 4;
}

message Transformation {
    string id = 1;
    string name = 2;
    string raw_sql = 3;
    repeated Input inputs = 4;
    repeated Output outputs = 5;
    Customer customer = 6;
}

message Input {
    string id = 1;
    Transformation transformation = 2;
    Transformation input_transformation = 3;
    DataSet dataset = 4;
    string display = 5;
}

message Output {
    string id = 1;
    Transformation transformation = 2;
    string column_name = 3;
    ProtobufType column_type = 4;
}

message DataSet {
    string id = 1;
    string destination_name = 2;
    DelimiterType column_delimiter = 3;
    DelimiterType row_delimiter = 4;
    string directory_location = 5;
    repeated ColumnInfo column_infos = 6;
    repeated ReceivedDataSet received_datasets = 7;
    bool has_headers = 8;
    bool is_fixed_width = 9;
}

message ReceivedDataSet {
    string id = 1;
    int64 received_date = 3;
    string compressed_base64 = 4;
    bool has_processed = 5;
}

message ColumnInfo {
    string id = 1;
    string source_name = 2;
    ProtobufType source_type = 3;
    int64 source_index = 4;
    string destination_name = 5;
    ProtobufType destination_type = 6;
    int64 destination_index = 7;
    int64 fixed_width_start = 8;
    int64 fixed_width_end = 9;
    bool is_overpunch = 10;
    bool has_special_instructions = 11;
    string special_instructions_equals = 12;
    string special_instructions_not_equals = 13;
}

message MySQLRedshiftTable {
    string id = 1;
    string table_name = 2;
}

message ConnectionInformation {
    string id = 1;
    string name = 2;
    string user = 3;
    string password = 4;
    string host = 5;
    int32 port = 6;
    string database = 7;
    string extra = 8;
    string aws_access = 9;
    string aws_secret = 10;

    enum DBType {
        MYSQL = 0;
        REDSHIFT = 1;
        REDIS = 2;
        S3 = 3;
    }

    DBType dbtype = 11;
}

message RegularExpression {
    string id = 1;
    string name = 2;
    string value = 3;
}

message Validation {
    string id = 1;
    string name = 2;
    Transformation transformation = 3;
    repeated OutputValidation validations = 4;
    repeated ValidationReport reports = 5;
}

message OutputValidation {
    string id = 1;
    string name = 2;
    Output output = 3;
    RegularExpression regular_expression = 4;
    Validation validation = 5;
}

message ValidationReport {
    string id = 1;
    int64 date_run = 2;
    string date_run_display = 3;
    int64 number_passed = 4;
    int64 number_failed = 5;
    Validation validation = 6;
}

message DataWarehouseColumn {
    string id = 1;
    string column_name = 2;
    string column_description = 3;
    ProtobufType column_type = 4;
    float discovery_weight = 5;
    bool is_numeric = 6;
    bool is_date = 7;
    repeated DataWarehouseColumnValidation validations = 8;
    repeated DataWarehouseTableColumn table_columns = 9;
}

message DataWarehouseColumnValidation {
    string id = 1;
    string name = 2;
    RegularExpression regular_expression = 3;
    DataWarehouseColumn column = 4;
}

message DataWarehouseTable {
    string id = 1;
    string name = 2;
    string description = 3;
    repeated DataWarehouseTableColumn table_columns = 9;
}

message DataWarehouseTableColumn {
    string id = 1;
    string column_name = 2;
    ProtobufType column_type = 3;
    DataWarehouseTable table = 4;
    DataWarehouseColumn column = 5;
    repeated Mapping mappings = 6;
}

message Mapping {
    string id = 1;
    string from_name = 2;
    ProtobufType from_type = 3;
    string to_name = 4;
    ProtobufType to_type = 5;
    Output output = 6;
    DataWarehouseTableColumn table_column = 7;
    DataWarehouseTable table = 8;
}

message DataSetTemplate {
    string id = 1;
    string destination_name = 2;
    DelimiterType column_delimiter = 3;
    DelimiterType row_delimiter = 4;
    repeated ColumnInfoTemplate column_infos = 5;
    bool has_headers = 6;
    bool is_fixed_width = 7;
}

message ColumnInfoTemplate {
    string id = 1;
    string source_name = 2;
    ProtobufType source_datatype = 3;
    int64 source_index = 4;
    string destination_name = 5;
    ProtobufType destination_type = 6;
    int64 destination_index = 7;
    int64 fixed_width_start = 8;
    int64 fixed_width_end = 9;
    bool is_overpunch = 10;
    bool has_special_instructions = 11;
    string special_instructions_equals = 12;
    string special_instructions_not_equals = 13;
}

message RestCustomers {
    repeated Customer customers = 1;
    repeated ConnectionInformation connections = 2;
    string acg_java_home = 3;
    string ecr_java_home = 4;
    ConnectionInformation s3_file_retrieve_connection = 5;
    repeated MySQLRedshiftTable mysql_redshift_tables = 6;
    repeated RegularExpression regular_expressions = 7;
    repeated DataSetTemplate dataset_templates = 8;
    bool license_exists = 9;
}

message RestDataWarehouseInfo {
    repeated DataWarehouseColumn columns = 1;
    repeated DataWarehouseTable tables = 2;
}

message UILetoRequest {
    string token = 1;
    RestCustomers rest_customers = 2;
    RestDataWarehouseInfo data_warehouse_info = 3;
}

message UILetoResponse {
    bool successful = 1;
    RestCustomers rest_customers = 2;
    RestDataWarehouseInfo data_warehouse_info = 3;
}

message ReportEligibility {
    string month = 1;
    double medical_eligibile = 2;
    double ineligibile_all = 3;
}

message ClaimsTriangle {
    string paid_date = 1;
    string service_date = 2;
    double medical_allowed_amount = 3;
}

message ServiceCategory {
    string l1 = 1;
    string l2 = 2;
    string art_tos_code = 3;
    string scg_l2 = 4;
    double medical_allowed_amount = 5;
}