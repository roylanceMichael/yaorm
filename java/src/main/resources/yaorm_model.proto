syntax = "proto2";
package org.roylance.yaorm;

enum ProtobufType {
    NONE = 0;
    DOUBLE = 1;
    FLOAT = 2;
    INT32 = 3;
    INT64 = 4;
    UINT32 = 5;
    UINT64 = 6;
    SINT32 = 7;
    SINT64 = 8;
    FIXED32 = 9;
    FIXED64 = 10;
    SFIXED32 = 11;
    SFIXED64 = 12;
    BOOL = 13;
    STRING = 14;
    BYTES = 15;
    PROTO = 16;
}

message WhereClause {
    optional Column name_and_property = 1;
    enum OperatorType {
        EQUALS = 0;
        GREATER_THAN = 1;
        LESS_THAN = 2;
        NOT_EQUALS = 3;
    }
    optional OperatorType operator_type = 2;
    enum ConnectingAndOr {
        NONE = 0;
        AND = 1;
        OR = 2;
    }
    optional ConnectingAndOr connecting_and_or = 3;
    optional WhereClause connecting_where_clause = 4;
}

message ColumnDefinition {
    optional string name = 1;
    optional ProtobufType type = 2;
    optional bool is_key = 3;
    enum ColumnType {
        SCALAR = 0;
        ENUM_NAME = 1;
        ENUM_VALUE = 2;
        MESSAGE_KEY = 3;
    }
    optional ColumnType column_type = 4;
    enum LinkerType {
        NONE = 0;
        PARENT = 1;
        CHILD = 2;
        NEITHER = 3;
    }
    optional LinkerType linker_type = 5;
    optional int32 order = 6;
}

message Index {
    repeated ColumnDefinition column_names = 1;
    repeated ColumnDefinition include_names = 2;
}

message Difference {
    enum EntityType {
        INDEX = 0;
        COLUMN = 1;
        TABLE = 2;
    }
    optional EntityType entity_type = 1;
    enum Operation {
        CREATE = 0;
        DROP = 1;
    }
    optional Operation operation = 2;
    optional string name = 3;
    optional Index index = 4;
    optional ColumnDefinition property_definition = 5;
    optional TableDefinition table_definition = 6;
}

message TableDefinition {
    optional string name = 1;
    repeated ColumnDefinition column_definitions = 2;
    optional Index index = 3;
    enum TableType {
        NORMAL = 0;
        LINKER_MESSAGE = 1;
        LINKER_ENUM = 2;
    }
    optional TableType table_type = 4;
}

message TableDefinitions {
    repeated TableDefinition table_definitions = 1;
}

message DifferenceReport {
    optional bool migration_exists = 1;
    repeated Difference differences = 2;
}

message Column {
    optional ColumnDefinition definition = 1;
    optional double double_holder = 2;
    optional float float_holder = 3;
    optional int32 int32_holder = 4;
    optional int64 int64_holder = 5;
    optional uint32 uint32_holder = 6;
    optional uint64 uint64_holder = 7;
    optional sint32 sint32_holder = 8;
    optional sint64 sint64_holder = 9;
    optional fixed32 fixed32_holder = 10;
    optional fixed64 fixed64_holder = 11;
    optional sfixed32 sfixed32_holder = 12;
    optional sfixed64 sfixed64_holder = 13;
    optional bool bool_holder = 14;
    optional string string_holder = 15;
    optional bytes bytes_holder = 16;
}

message Record {
    repeated Column columns = 1;
}

message Records {
    repeated Record records = 1;
}

message TableRecords {
    optional TableDefinition table_definition = 1;
    optional Records records = 2;
    optional string table_name = 3;
    repeated string known_parent_ids = 4;
}

message AllTableRecords {
    repeated TableRecords table_records = 1;
}

message DatabaseOperation {
    optional TableDefinition table_definition = 1;
    optional Records records = 2;
    optional Index index = 3;
    optional ColumnDefinition column_definition = 4;
    optional WhereClause where_clause = 5;
    enum DatabaseOperationType {
        CREATE_TABLE = 0;
        DROP_TABLE = 1;
        CREATE_INDEX = 2;
        DROP_INDEX = 3;
        CREATE_COLUMN = 4;
        DROP_COLUMN = 5;
        GET_COUNT = 6;
        GET_CUSTOM = 7;
        GET = 8;
        GET_MANY = 9;
        GET_WHERE = 10;
        BULK_INSERT = 11;
        CREATE_OR_UPDATE = 12;
        CREATE = 13;
        UPDATE = 14;
        UPDATE_WITH_CRITERIA = 15;
        UPDATE_CUSTOM = 16;
        DELETE = 17;
        DELETE_ALL = 18;
    }
    optional DatabaseOperationType database_operation_type = 6;
}

message DatabaseOperationResult {
    optional bool bool_result = 1;
    optional int64 count_result = 2;
    optional Record record_result = 3;
    optional Records records_result = 4;
    optional string error_message = 5;
    optional DatabaseOperation database_operation = 6;
}

message DatabaseDefinition {
    optional string schema = 1;
    optional string name = 2;
    optional TableDefinitions table_definitions = 3;
    repeated TableDefinitionGraphs table_definition_graphs = 4;
}

message TableDefinitionGraph {
    optional TableDefinition main_table_definition = 1;
    optional TableDefinition other_table_definition = 2;
    optional TableDefinition linker_table_table = 3;
    enum TableDefinitionGraphType {
        ENUM_TYPE = 0;
        MESSAGE_TYPE = 1;
    }
    optional TableDefinitionGraphType definition_graph_type = 4;
    optional string main_name = 5;
    optional string other_name = 6;
    optional string column_name = 7;
}

message TableDefinitionGraphs {
    optional TableDefinition main_table_definition = 1;
    repeated TableDefinitionGraph table_definition_graphs = 2;
}

message ConnectionInfo {
    optional string host = 1;
    optional string user = 2;
    optional string password = 3;
    optional string schema = 4;
}

message Migration {
    optional string id = 1;
    optional string context_name = 2;
    optional string model_definition_base64 = 3;
    optional int64 insert_date = 4;
}