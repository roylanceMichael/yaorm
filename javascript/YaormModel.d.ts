// generated by Proto2Typescript. do not touch!

declare module org.roylance.yaorm {
	interface ProtoBufModel {
		toArrayBuffer(): ArrayBuffer;
		//toBuffer(): NodeBuffer;
		//encode(): ByteBuffer;
		toBase64(): string;
		toString(): string;
	}

	export interface ProtoBufBuilder {
		ProtoTypeToSqlType: ProtoTypeToSqlTypeBuilder;
		ProtoTypeToSqlTypes: ProtoTypeToSqlTypesBuilder;
		WhereClause: WhereClauseBuilder;
		ColumnDefinition: ColumnDefinitionBuilder;
		Index: IndexBuilder;
		Difference: DifferenceBuilder;
		TableDefinition: TableDefinitionBuilder;
		TableDefinitions: TableDefinitionsBuilder;
		DifferenceReport: DifferenceReportBuilder;
		Column: ColumnBuilder;
		Record: RecordBuilder;
		Records: RecordsBuilder;
		TableRecords: TableRecordsBuilder;
		AllTableRecords: AllTableRecordsBuilder;
		DatabaseOperation: DatabaseOperationBuilder;
		DatabaseOperationResult: DatabaseOperationResultBuilder;
		DatabaseDefinition: DatabaseDefinitionBuilder;
		TableDefinitionGraph: TableDefinitionGraphBuilder;
		TableDefinitionGraphs: TableDefinitionGraphsBuilder;
		ConnectionInfo: ConnectionInfoBuilder;
		Migration: MigrationBuilder;
		DatabaseExecutionReport: DatabaseExecutionReportBuilder;
		JoinKey: JoinKeyBuilder;
		JoinDefinition: JoinDefinitionBuilder;
		Join: JoinBuilder;
		UIYaormRequest: UIYaormRequestBuilder;
		UIYaormResponse: UIYaormResponseBuilder;
		SqlGeneratorRequestResponse: SqlGeneratorRequestResponseBuilder;
		CommonAction: CommonActionBuilder;
		YaormMainController: YaormMainControllerBuilder;
		ProtobufType: ProtobufType;
		
	}
}

declare module org.roylance.yaorm {

	export interface ProtoTypeToSqlType extends ProtoBufModel {
		proto_type?: ProtobufType;
		getProtoType() : ProtobufType;
		setProtoType(protoType : ProtobufType): void;
		sql_type?: string;
		getSqlType() : string;
		setSqlType(sqlType : string): void;
		
	}
	
	export interface ProtoTypeToSqlTypeBuilder {
		new(): ProtoTypeToSqlType;
		decode(buffer: ArrayBuffer) : ProtoTypeToSqlType;
		//decode(buffer: NodeBuffer) : ProtoTypeToSqlType;
		//decode(buffer: ByteArrayBuffer) : ProtoTypeToSqlType;
		decode64(buffer: string) : ProtoTypeToSqlType;
		
	}	
}

declare module org.roylance.yaorm {

	export interface ProtoTypeToSqlTypes extends ProtoBufModel {
		results: ProtoTypeToSqlType[];
		getResults() : ProtoTypeToSqlType[];
		setResults(results : ProtoTypeToSqlType[]): void;
		
	}
	
	export interface ProtoTypeToSqlTypesBuilder {
		new(): ProtoTypeToSqlTypes;
		decode(buffer: ArrayBuffer) : ProtoTypeToSqlTypes;
		//decode(buffer: NodeBuffer) : ProtoTypeToSqlTypes;
		//decode(buffer: ByteArrayBuffer) : ProtoTypeToSqlTypes;
		decode64(buffer: string) : ProtoTypeToSqlTypes;
		
	}	
}

declare module org.roylance.yaorm {

	export interface WhereClause extends ProtoBufModel {
		name_and_property?: Column;
		getNameAndProperty() : Column;
		setNameAndProperty(nameAndProperty : Column): void;
		operator_type?: WhereClause.OperatorType;
		getOperatorType() : WhereClause.OperatorType;
		setOperatorType(operatorType : WhereClause.OperatorType): void;
		connecting_and_or?: WhereClause.ConnectingAndOr;
		getConnectingAndOr() : WhereClause.ConnectingAndOr;
		setConnectingAndOr(connectingAndOr : WhereClause.ConnectingAndOr): void;
		connecting_where_clause?: WhereClause;
		getConnectingWhereClause() : WhereClause;
		setConnectingWhereClause(connectingWhereClause : WhereClause): void;
		in_items: string[];
		getInItems() : string[];
		setInItems(inItems : string[]): void;
		
	}
	
	export interface WhereClauseBuilder {
		new(): WhereClause;
		decode(buffer: ArrayBuffer) : WhereClause;
		//decode(buffer: NodeBuffer) : WhereClause;
		//decode(buffer: ByteArrayBuffer) : WhereClause;
		decode64(buffer: string) : WhereClause;
		OperatorType: WhereClause.OperatorType;
		ConnectingAndOr: WhereClause.ConnectingAndOr;
		
	}	
}

declare module org.roylance.yaorm.WhereClause {
	export const enum OperatorType {
		EQUALS = 0,
		GREATER_THAN = 1,
		LESS_THAN = 2,
		NOT_EQUALS = 3,
		IN = 4,
		
	}
}

declare module org.roylance.yaorm.WhereClause {
	export const enum ConnectingAndOr {
		NONE = 0,
		AND = 1,
		OR = 2,
		
	}
}

declare module org.roylance.yaorm {

	export interface ColumnDefinition extends ProtoBufModel {
		name?: string;
		getName() : string;
		setName(name : string): void;
		type?: ProtobufType;
		getType() : ProtobufType;
		setType(type : ProtobufType): void;
		is_key?: boolean;
		getIsKey() : boolean;
		setIsKey(isKey : boolean): void;
		column_type?: ColumnDefinition.ColumnType;
		getColumnType() : ColumnDefinition.ColumnType;
		setColumnType(columnType : ColumnDefinition.ColumnType): void;
		linker_type?: ColumnDefinition.LinkerType;
		getLinkerType() : ColumnDefinition.LinkerType;
		setLinkerType(linkerType : ColumnDefinition.LinkerType): void;
		order?: number;
		getOrder() : number;
		setOrder(order : number): void;
		
	}
	
	export interface ColumnDefinitionBuilder {
		new(): ColumnDefinition;
		decode(buffer: ArrayBuffer) : ColumnDefinition;
		//decode(buffer: NodeBuffer) : ColumnDefinition;
		//decode(buffer: ByteArrayBuffer) : ColumnDefinition;
		decode64(buffer: string) : ColumnDefinition;
		ColumnType: ColumnDefinition.ColumnType;
		LinkerType: ColumnDefinition.LinkerType;
		
	}	
}

declare module org.roylance.yaorm.ColumnDefinition {
	export const enum ColumnType {
		SCALAR = 0,
		ENUM_NAME = 1,
		ENUM_VALUE = 2,
		MESSAGE_KEY = 3,
		
	}
}

declare module org.roylance.yaorm.ColumnDefinition {
	export const enum LinkerType {
		NONE = 0,
		PARENT = 1,
		CHILD = 2,
		NEITHER = 3,
		
	}
}

declare module org.roylance.yaorm {

	export interface Index extends ProtoBufModel {
		column_names: ColumnDefinition[];
		getColumnNames() : ColumnDefinition[];
		setColumnNames(columnNames : ColumnDefinition[]): void;
		include_names: ColumnDefinition[];
		getIncludeNames() : ColumnDefinition[];
		setIncludeNames(includeNames : ColumnDefinition[]): void;
		
	}
	
	export interface IndexBuilder {
		new(): Index;
		decode(buffer: ArrayBuffer) : Index;
		//decode(buffer: NodeBuffer) : Index;
		//decode(buffer: ByteArrayBuffer) : Index;
		decode64(buffer: string) : Index;
		
	}	
}

declare module org.roylance.yaorm {

	export interface Difference extends ProtoBufModel {
		entity_type?: Difference.EntityType;
		getEntityType() : Difference.EntityType;
		setEntityType(entityType : Difference.EntityType): void;
		operation?: Difference.Operation;
		getOperation() : Difference.Operation;
		setOperation(operation : Difference.Operation): void;
		name?: string;
		getName() : string;
		setName(name : string): void;
		index?: Index;
		getIndex() : Index;
		setIndex(index : Index): void;
		property_definition?: ColumnDefinition;
		getPropertyDefinition() : ColumnDefinition;
		setPropertyDefinition(propertyDefinition : ColumnDefinition): void;
		table_definition?: TableDefinition;
		getTableDefinition() : TableDefinition;
		setTableDefinition(tableDefinition : TableDefinition): void;
		
	}
	
	export interface DifferenceBuilder {
		new(): Difference;
		decode(buffer: ArrayBuffer) : Difference;
		//decode(buffer: NodeBuffer) : Difference;
		//decode(buffer: ByteArrayBuffer) : Difference;
		decode64(buffer: string) : Difference;
		EntityType: Difference.EntityType;
		Operation: Difference.Operation;
		
	}	
}

declare module org.roylance.yaorm.Difference {
	export const enum EntityType {
		INDEX = 0,
		COLUMN = 1,
		TABLE = 2,
		
	}
}

declare module org.roylance.yaorm.Difference {
	export const enum Operation {
		CREATE = 0,
		DROP = 1,
		
	}
}

declare module org.roylance.yaorm {

	export interface TableDefinition extends ProtoBufModel {
		name?: string;
		getName() : string;
		setName(name : string): void;
		column_definitions: ColumnDefinition[];
		getColumnDefinitions() : ColumnDefinition[];
		setColumnDefinitions(columnDefinitions : ColumnDefinition[]): void;
		index?: Index;
		getIndex() : Index;
		setIndex(index : Index): void;
		table_type?: TableDefinition.TableType;
		getTableType() : TableDefinition.TableType;
		setTableType(tableType : TableDefinition.TableType): void;
		
	}
	
	export interface TableDefinitionBuilder {
		new(): TableDefinition;
		decode(buffer: ArrayBuffer) : TableDefinition;
		//decode(buffer: NodeBuffer) : TableDefinition;
		//decode(buffer: ByteArrayBuffer) : TableDefinition;
		decode64(buffer: string) : TableDefinition;
		TableType: TableDefinition.TableType;
		
	}	
}

declare module org.roylance.yaorm.TableDefinition {
	export const enum TableType {
		NORMAL = 0,
		LINKER_MESSAGE = 1,
		LINKER_ENUM = 2,
		
	}
}

declare module org.roylance.yaorm {

	export interface TableDefinitions extends ProtoBufModel {
		table_definitions: TableDefinition[];
		getTableDefinitions() : TableDefinition[];
		setTableDefinitions(tableDefinitions : TableDefinition[]): void;
		
	}
	
	export interface TableDefinitionsBuilder {
		new(): TableDefinitions;
		decode(buffer: ArrayBuffer) : TableDefinitions;
		//decode(buffer: NodeBuffer) : TableDefinitions;
		//decode(buffer: ByteArrayBuffer) : TableDefinitions;
		decode64(buffer: string) : TableDefinitions;
		
	}	
}

declare module org.roylance.yaorm {

	export interface DifferenceReport extends ProtoBufModel {
		migration_exists?: boolean;
		getMigrationExists() : boolean;
		setMigrationExists(migrationExists : boolean): void;
		differences: Difference[];
		getDifferences() : Difference[];
		setDifferences(differences : Difference[]): void;
		
	}
	
	export interface DifferenceReportBuilder {
		new(): DifferenceReport;
		decode(buffer: ArrayBuffer) : DifferenceReport;
		//decode(buffer: NodeBuffer) : DifferenceReport;
		//decode(buffer: ByteArrayBuffer) : DifferenceReport;
		decode64(buffer: string) : DifferenceReport;
		
	}	
}

declare module org.roylance.yaorm {

	export interface Column extends ProtoBufModel {
		definition?: ColumnDefinition;
		getDefinition() : ColumnDefinition;
		setDefinition(definition : ColumnDefinition): void;
		double_holder?: number;
		getDoubleHolder() : number;
		setDoubleHolder(doubleHolder : number): void;
		float_holder?: number;
		getFloatHolder() : number;
		setFloatHolder(floatHolder : number): void;
		int32_holder?: number;
		getInt32Holder() : number;
		setInt32Holder(int32Holder : number): void;
		int64_holder?: number;
		getInt64Holder() : number;
		setInt64Holder(int64Holder : number): void;
		uint32_holder?: number;
		getUint32Holder() : number;
		setUint32Holder(uint32Holder : number): void;
		uint64_holder?: number;
		getUint64Holder() : number;
		setUint64Holder(uint64Holder : number): void;
		sint32_holder?: number;
		getSint32Holder() : number;
		setSint32Holder(sint32Holder : number): void;
		sint64_holder?: number;
		getSint64Holder() : number;
		setSint64Holder(sint64Holder : number): void;
		fixed32_holder?: number;
		getFixed32Holder() : number;
		setFixed32Holder(fixed32Holder : number): void;
		fixed64_holder?: number;
		getFixed64Holder() : number;
		setFixed64Holder(fixed64Holder : number): void;
		sfixed32_holder?: number;
		getSfixed32Holder() : number;
		setSfixed32Holder(sfixed32Holder : number): void;
		sfixed64_holder?: number;
		getSfixed64Holder() : number;
		setSfixed64Holder(sfixed64Holder : number): void;
		bool_holder?: boolean;
		getBoolHolder() : boolean;
		setBoolHolder(boolHolder : boolean): void;
		string_holder?: string;
		getStringHolder() : string;
		setStringHolder(stringHolder : string): void;
		bytes_holder?: ByteBuffer;
		getBytesHolder() : ByteBuffer;
		setBytesHolder(bytesHolder : ByteBuffer): void;
		
	}
	
	export interface ColumnBuilder {
		new(): Column;
		decode(buffer: ArrayBuffer) : Column;
		//decode(buffer: NodeBuffer) : Column;
		//decode(buffer: ByteArrayBuffer) : Column;
		decode64(buffer: string) : Column;
		
	}	
}

declare module org.roylance.yaorm {

	export interface Record extends ProtoBufModel {
		columns: Column[];
		getColumns() : Column[];
		setColumns(columns : Column[]): void;
		
	}
	
	export interface RecordBuilder {
		new(): Record;
		decode(buffer: ArrayBuffer) : Record;
		//decode(buffer: NodeBuffer) : Record;
		//decode(buffer: ByteArrayBuffer) : Record;
		decode64(buffer: string) : Record;
		
	}	
}

declare module org.roylance.yaorm {

	export interface Records extends ProtoBufModel {
		records: Record[];
		getRecords() : Record[];
		setRecords(records : Record[]): void;
		
	}
	
	export interface RecordsBuilder {
		new(): Records;
		decode(buffer: ArrayBuffer) : Records;
		//decode(buffer: NodeBuffer) : Records;
		//decode(buffer: ByteArrayBuffer) : Records;
		decode64(buffer: string) : Records;
		
	}	
}

declare module org.roylance.yaorm {

	export interface TableRecords extends ProtoBufModel {
		table_definition?: TableDefinition;
		getTableDefinition() : TableDefinition;
		setTableDefinition(tableDefinition : TableDefinition): void;
		records?: Records;
		getRecords() : Records;
		setRecords(records : Records): void;
		table_name?: string;
		getTableName() : string;
		setTableName(tableName : string): void;
		
	}
	
	export interface TableRecordsBuilder {
		new(): TableRecords;
		decode(buffer: ArrayBuffer) : TableRecords;
		//decode(buffer: NodeBuffer) : TableRecords;
		//decode(buffer: ByteArrayBuffer) : TableRecords;
		decode64(buffer: string) : TableRecords;
		
	}	
}

declare module org.roylance.yaorm {

	export interface AllTableRecords extends ProtoBufModel {
		table_records: TableRecords[];
		getTableRecords() : TableRecords[];
		setTableRecords(tableRecords : TableRecords[]): void;
		
	}
	
	export interface AllTableRecordsBuilder {
		new(): AllTableRecords;
		decode(buffer: ArrayBuffer) : AllTableRecords;
		//decode(buffer: NodeBuffer) : AllTableRecords;
		//decode(buffer: ByteArrayBuffer) : AllTableRecords;
		decode64(buffer: string) : AllTableRecords;
		
	}	
}

declare module org.roylance.yaorm {

	export interface DatabaseOperation extends ProtoBufModel {
		table_definition?: TableDefinition;
		getTableDefinition() : TableDefinition;
		setTableDefinition(tableDefinition : TableDefinition): void;
		records?: Records;
		getRecords() : Records;
		setRecords(records : Records): void;
		index?: Index;
		getIndex() : Index;
		setIndex(index : Index): void;
		column_definition?: ColumnDefinition;
		getColumnDefinition() : ColumnDefinition;
		setColumnDefinition(columnDefinition : ColumnDefinition): void;
		where_clause?: WhereClause;
		getWhereClause() : WhereClause;
		setWhereClause(whereClause : WhereClause): void;
		database_operation_type?: DatabaseOperation.DatabaseOperationType;
		getDatabaseOperationType() : DatabaseOperation.DatabaseOperationType;
		setDatabaseOperationType(databaseOperationType : DatabaseOperation.DatabaseOperationType): void;
		
	}
	
	export interface DatabaseOperationBuilder {
		new(): DatabaseOperation;
		decode(buffer: ArrayBuffer) : DatabaseOperation;
		//decode(buffer: NodeBuffer) : DatabaseOperation;
		//decode(buffer: ByteArrayBuffer) : DatabaseOperation;
		decode64(buffer: string) : DatabaseOperation;
		DatabaseOperationType: DatabaseOperation.DatabaseOperationType;
		
	}	
}

declare module org.roylance.yaorm.DatabaseOperation {
	export const enum DatabaseOperationType {
		CREATE_TABLE = 0,
		DROP_TABLE = 1,
		CREATE_INDEX = 2,
		DROP_INDEX = 3,
		CREATE_COLUMN = 4,
		DROP_COLUMN = 5,
		GET_COUNT = 6,
		GET_CUSTOM = 7,
		GET = 8,
		GET_MANY = 9,
		GET_WHERE = 10,
		BULK_INSERT = 11,
		CREATE_OR_UPDATE = 12,
		CREATE = 13,
		UPDATE = 14,
		UPDATE_WITH_CRITERIA = 15,
		UPDATE_CUSTOM = 16,
		DELETE = 17,
		DELETE_ALL = 18,
		
	}
}

declare module org.roylance.yaorm {

	export interface DatabaseOperationResult extends ProtoBufModel {
		bool_result?: boolean;
		getBoolResult() : boolean;
		setBoolResult(boolResult : boolean): void;
		count_result?: number;
		getCountResult() : number;
		setCountResult(countResult : number): void;
		record_result?: Record;
		getRecordResult() : Record;
		setRecordResult(recordResult : Record): void;
		records_result?: Records;
		getRecordsResult() : Records;
		setRecordsResult(recordsResult : Records): void;
		error_message?: string;
		getErrorMessage() : string;
		setErrorMessage(errorMessage : string): void;
		database_operation?: DatabaseOperation;
		getDatabaseOperation() : DatabaseOperation;
		setDatabaseOperation(databaseOperation : DatabaseOperation): void;
		
	}
	
	export interface DatabaseOperationResultBuilder {
		new(): DatabaseOperationResult;
		decode(buffer: ArrayBuffer) : DatabaseOperationResult;
		//decode(buffer: NodeBuffer) : DatabaseOperationResult;
		//decode(buffer: ByteArrayBuffer) : DatabaseOperationResult;
		decode64(buffer: string) : DatabaseOperationResult;
		
	}	
}

declare module org.roylance.yaorm {

	export interface DatabaseDefinition extends ProtoBufModel {
		schema?: string;
		getSchema() : string;
		setSchema(schema : string): void;
		name?: string;
		getName() : string;
		setName(name : string): void;
		table_definitions?: TableDefinitions;
		getTableDefinitions() : TableDefinitions;
		setTableDefinitions(tableDefinitions : TableDefinitions): void;
		table_definition_graphs: TableDefinitionGraphs[];
		getTableDefinitionGraphs() : TableDefinitionGraphs[];
		setTableDefinitionGraphs(tableDefinitionGraphs : TableDefinitionGraphs[]): void;
		
	}
	
	export interface DatabaseDefinitionBuilder {
		new(): DatabaseDefinition;
		decode(buffer: ArrayBuffer) : DatabaseDefinition;
		//decode(buffer: NodeBuffer) : DatabaseDefinition;
		//decode(buffer: ByteArrayBuffer) : DatabaseDefinition;
		decode64(buffer: string) : DatabaseDefinition;
		
	}	
}

declare module org.roylance.yaorm {

	export interface TableDefinitionGraph extends ProtoBufModel {
		main_table_definition?: TableDefinition;
		getMainTableDefinition() : TableDefinition;
		setMainTableDefinition(mainTableDefinition : TableDefinition): void;
		other_table_definition?: TableDefinition;
		getOtherTableDefinition() : TableDefinition;
		setOtherTableDefinition(otherTableDefinition : TableDefinition): void;
		linker_table_table?: TableDefinition;
		getLinkerTableTable() : TableDefinition;
		setLinkerTableTable(linkerTableTable : TableDefinition): void;
		definition_graph_type?: TableDefinitionGraph.TableDefinitionGraphType;
		getDefinitionGraphType() : TableDefinitionGraph.TableDefinitionGraphType;
		setDefinitionGraphType(definitionGraphType : TableDefinitionGraph.TableDefinitionGraphType): void;
		main_name?: string;
		getMainName() : string;
		setMainName(mainName : string): void;
		other_name?: string;
		getOtherName() : string;
		setOtherName(otherName : string): void;
		column_name?: string;
		getColumnName() : string;
		setColumnName(columnName : string): void;
		
	}
	
	export interface TableDefinitionGraphBuilder {
		new(): TableDefinitionGraph;
		decode(buffer: ArrayBuffer) : TableDefinitionGraph;
		//decode(buffer: NodeBuffer) : TableDefinitionGraph;
		//decode(buffer: ByteArrayBuffer) : TableDefinitionGraph;
		decode64(buffer: string) : TableDefinitionGraph;
		TableDefinitionGraphType: TableDefinitionGraph.TableDefinitionGraphType;
		
	}	
}

declare module org.roylance.yaorm.TableDefinitionGraph {
	export const enum TableDefinitionGraphType {
		ENUM_TYPE = 0,
		MESSAGE_TYPE = 1,
		
	}
}

declare module org.roylance.yaorm {

	export interface TableDefinitionGraphs extends ProtoBufModel {
		main_table_definition?: TableDefinition;
		getMainTableDefinition() : TableDefinition;
		setMainTableDefinition(mainTableDefinition : TableDefinition): void;
		table_definition_graphs: TableDefinitionGraph[];
		getTableDefinitionGraphs() : TableDefinitionGraph[];
		setTableDefinitionGraphs(tableDefinitionGraphs : TableDefinitionGraph[]): void;
		
	}
	
	export interface TableDefinitionGraphsBuilder {
		new(): TableDefinitionGraphs;
		decode(buffer: ArrayBuffer) : TableDefinitionGraphs;
		//decode(buffer: NodeBuffer) : TableDefinitionGraphs;
		//decode(buffer: ByteArrayBuffer) : TableDefinitionGraphs;
		decode64(buffer: string) : TableDefinitionGraphs;
		
	}	
}

declare module org.roylance.yaorm {

	export interface ConnectionInfo extends ProtoBufModel {
		host?: string;
		getHost() : string;
		setHost(host : string): void;
		user?: string;
		getUser() : string;
		setUser(user : string): void;
		password?: string;
		getPassword() : string;
		setPassword(password : string): void;
		schema?: string;
		getSchema() : string;
		setSchema(schema : string): void;
		should_create_schema?: boolean;
		getShouldCreateSchema() : boolean;
		setShouldCreateSchema(shouldCreateSchema : boolean): void;
		port?: number;
		getPort() : number;
		setPort(port : number): void;
		
	}
	
	export interface ConnectionInfoBuilder {
		new(): ConnectionInfo;
		decode(buffer: ArrayBuffer) : ConnectionInfo;
		//decode(buffer: NodeBuffer) : ConnectionInfo;
		//decode(buffer: ByteArrayBuffer) : ConnectionInfo;
		decode64(buffer: string) : ConnectionInfo;
		
	}	
}

declare module org.roylance.yaorm {

	export interface Migration extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		context_name?: string;
		getContextName() : string;
		setContextName(contextName : string): void;
		model_definition_base64?: string;
		getModelDefinitionBase64() : string;
		setModelDefinitionBase64(modelDefinitionBase64 : string): void;
		insert_date?: number;
		getInsertDate() : number;
		setInsertDate(insertDate : number): void;
		
	}
	
	export interface MigrationBuilder {
		new(): Migration;
		decode(buffer: ArrayBuffer) : Migration;
		//decode(buffer: NodeBuffer) : Migration;
		//decode(buffer: ByteArrayBuffer) : Migration;
		decode64(buffer: string) : Migration;
		
	}	
}

declare module org.roylance.yaorm {

	export interface DatabaseExecutionReport extends ProtoBufModel {
		calls_to_database?: number;
		getCallsToDatabase() : number;
		setCallsToDatabase(callsToDatabase : number): void;
		
	}
	
	export interface DatabaseExecutionReportBuilder {
		new(): DatabaseExecutionReport;
		decode(buffer: ArrayBuffer) : DatabaseExecutionReport;
		//decode(buffer: NodeBuffer) : DatabaseExecutionReport;
		//decode(buffer: ByteArrayBuffer) : DatabaseExecutionReport;
		decode64(buffer: string) : DatabaseExecutionReport;
		
	}	
}

declare module org.roylance.yaorm {

	export interface JoinKey extends ProtoBufModel {
		first?: ColumnDefinition;
		getFirst() : ColumnDefinition;
		setFirst(first : ColumnDefinition): void;
		second?: ColumnDefinition;
		getSecond() : ColumnDefinition;
		setSecond(second : ColumnDefinition): void;
		third?: ColumnDefinition;
		getThird() : ColumnDefinition;
		setThird(third : ColumnDefinition): void;
		fourth?: ColumnDefinition;
		getFourth() : ColumnDefinition;
		setFourth(fourth : ColumnDefinition): void;
		fifth?: ColumnDefinition;
		getFifth() : ColumnDefinition;
		setFifth(fifth : ColumnDefinition): void;
		sixth?: ColumnDefinition;
		getSixth() : ColumnDefinition;
		setSixth(sixth : ColumnDefinition): void;
		
	}
	
	export interface JoinKeyBuilder {
		new(): JoinKey;
		decode(buffer: ArrayBuffer) : JoinKey;
		//decode(buffer: NodeBuffer) : JoinKey;
		//decode(buffer: ByteArrayBuffer) : JoinKey;
		decode64(buffer: string) : JoinKey;
		
	}	
}

declare module org.roylance.yaorm {

	export interface JoinDefinition extends ProtoBufModel {
		table?: TableDefinition;
		getTable() : TableDefinition;
		setTable(table : TableDefinition): void;
		key?: JoinKey;
		getKey() : JoinKey;
		setKey(key : JoinKey): void;
		
	}
	
	export interface JoinDefinitionBuilder {
		new(): JoinDefinition;
		decode(buffer: ArrayBuffer) : JoinDefinition;
		//decode(buffer: NodeBuffer) : JoinDefinition;
		//decode(buffer: ByteArrayBuffer) : JoinDefinition;
		decode64(buffer: string) : JoinDefinition;
		
	}	
}

declare module org.roylance.yaorm {

	export interface Join extends ProtoBufModel {
		join_definitions: JoinDefinition[];
		getJoinDefinitions() : JoinDefinition[];
		setJoinDefinitions(joinDefinitions : JoinDefinition[]): void;
		
	}
	
	export interface JoinBuilder {
		new(): Join;
		decode(buffer: ArrayBuffer) : Join;
		//decode(buffer: NodeBuffer) : Join;
		//decode(buffer: ByteArrayBuffer) : Join;
		decode64(buffer: string) : Join;
		
	}	
}

declare module org.roylance.yaorm {

	export interface UIYaormRequest extends ProtoBufModel {
		token?: string;
		getToken() : string;
		setToken(token : string): void;
		table_definition?: TableDefinition;
		getTableDefinition() : TableDefinition;
		setTableDefinition(tableDefinition : TableDefinition): void;
		records?: Records;
		getRecords() : Records;
		setRecords(records : Records): void;
		connection_info?: ConnectionInfo;
		getConnectionInfo() : ConnectionInfo;
		setConnectionInfo(connectionInfo : ConnectionInfo): void;
		where_clause?: WhereClause;
		getWhereClause() : WhereClause;
		setWhereClause(whereClause : WhereClause): void;
		limit?: number;
		getLimit() : number;
		setLimit(limit : number): void;
		offset?: number;
		getOffset() : number;
		setOffset(offset : number): void;
		insert_same_as_update?: boolean;
		getInsertSameAsUpdate() : boolean;
		setInsertSameAsUpdate(insertSameAsUpdate : boolean): void;
		schema_name?: string;
		getSchemaName() : string;
		setSchemaName(schemaName : string): void;
		table_name?: string;
		getTableName() : string;
		setTableName(tableName : string): void;
		custom_sql?: string;
		getCustomSql() : string;
		setCustomSql(customSql : string): void;
		file_descriptor?: string;
		getFileDescriptor() : string;
		setFileDescriptor(fileDescriptor : string): void;
		ids: string[];
		getIds() : string[];
		setIds(ids : string[]): void;
		
	}
	
	export interface UIYaormRequestBuilder {
		new(): UIYaormRequest;
		decode(buffer: ArrayBuffer) : UIYaormRequest;
		//decode(buffer: NodeBuffer) : UIYaormRequest;
		//decode(buffer: ByteArrayBuffer) : UIYaormRequest;
		decode64(buffer: string) : UIYaormRequest;
		
	}	
}

declare module org.roylance.yaorm {

	export interface UIYaormResponse extends ProtoBufModel {
		records?: Records;
		getRecords() : Records;
		setRecords(records : Records): void;
		schemas: string[];
		getSchemas() : string[];
		setSchemas(schemas : string[]): void;
		tables: string[];
		getTables() : string[];
		setTables(tables : string[]): void;
		table_definition?: TableDefinition;
		getTableDefinition() : TableDefinition;
		setTableDefinition(tableDefinition : TableDefinition): void;
		table_definitions?: TableDefinitions;
		getTableDefinitions() : TableDefinitions;
		setTableDefinitions(tableDefinitions : TableDefinitions): void;
		record_count?: number;
		getRecordCount() : number;
		setRecordCount(recordCount : number): void;
		result?: boolean;
		getResult() : boolean;
		setResult(result : boolean): void;
		proto_type_to_sql_types: ProtoTypeToSqlType[];
		getProtoTypeToSqlTypes() : ProtoTypeToSqlType[];
		setProtoTypeToSqlTypes(protoTypeToSqlTypes : ProtoTypeToSqlType[]): void;
		string_result?: string;
		getStringResult() : string;
		setStringResult(stringResult : string): void;
		
	}
	
	export interface UIYaormResponseBuilder {
		new(): UIYaormResponse;
		decode(buffer: ArrayBuffer) : UIYaormResponse;
		//decode(buffer: NodeBuffer) : UIYaormResponse;
		//decode(buffer: ByteArrayBuffer) : UIYaormResponse;
		decode64(buffer: string) : UIYaormResponse;
		
	}	
}

declare module org.roylance.yaorm {

	export interface SqlGeneratorRequestResponse extends ProtoBufModel {
		definition?: TableDefinition;
		getDefinition() : TableDefinition;
		setDefinition(definition : TableDefinition): void;
		column_definition?: ColumnDefinition;
		getColumnDefinition() : ColumnDefinition;
		setColumnDefinition(columnDefinition : ColumnDefinition): void;
		index?: Index;
		getIndex() : Index;
		setIndex(index : Index): void;
		column?: Column;
		getColumn() : Column;
		setColumn(column : Column): void;
		where_clause?: WhereClause;
		getWhereClause() : WhereClause;
		setWhereClause(whereClause : WhereClause): void;
		records?: Records;
		getRecords() : Records;
		setRecords(records : Records): void;
		limit?: number;
		getLimit() : number;
		setLimit(limit : number): void;
		offset?: number;
		getOffset() : number;
		setOffset(offset : number): void;
		schema_name?: string;
		getSchemaName() : string;
		setSchemaName(schemaName : string): void;
		table_name?: string;
		getTableName() : string;
		setTableName(tableName : string): void;
		response?: string;
		getResponse() : string;
		setResponse(response : string): void;
		proto_type_to_sql_types?: ProtoTypeToSqlTypes;
		getProtoTypeToSqlTypes() : ProtoTypeToSqlTypes;
		setProtoTypeToSqlTypes(protoTypeToSqlTypes : ProtoTypeToSqlTypes): void;
		
	}
	
	export interface SqlGeneratorRequestResponseBuilder {
		new(): SqlGeneratorRequestResponse;
		decode(buffer: ArrayBuffer) : SqlGeneratorRequestResponse;
		//decode(buffer: NodeBuffer) : SqlGeneratorRequestResponse;
		//decode(buffer: ByteArrayBuffer) : SqlGeneratorRequestResponse;
		decode64(buffer: string) : SqlGeneratorRequestResponse;
		
	}	
}

declare module org.roylance.yaorm {

	export interface CommonAction extends ProtoBufModel {
		request?: UIYaormRequest;
		getRequest() : UIYaormRequest;
		setRequest(request : UIYaormRequest): void;
		response?: UIYaormResponse;
		getResponse() : UIYaormResponse;
		setResponse(response : UIYaormResponse): void;
		
	}
	
	export interface CommonActionBuilder {
		new(): CommonAction;
		decode(buffer: ArrayBuffer) : CommonAction;
		//decode(buffer: NodeBuffer) : CommonAction;
		//decode(buffer: ByteArrayBuffer) : CommonAction;
		decode64(buffer: string) : CommonAction;
		
	}	
}

declare module org.roylance.yaorm {

	export interface YaormMainController extends ProtoBufModel {
		get_schemas?: CommonAction;
		getGetSchemas() : CommonAction;
		setGetSchemas(getSchemas : CommonAction): void;
		get_tables?: CommonAction;
		getGetTables() : CommonAction;
		setGetTables(getTables : CommonAction): void;
		get_table_definition?: CommonAction;
		getGetTableDefinition() : CommonAction;
		setGetTableDefinition(getTableDefinition : CommonAction): void;
		get_table_definitions?: CommonAction;
		getGetTableDefinitions() : CommonAction;
		setGetTableDefinitions(getTableDefinitions : CommonAction): void;
		get_record_count?: CommonAction;
		getGetRecordCount() : CommonAction;
		setGetRecordCount(getRecordCount : CommonAction): void;
		get_records?: CommonAction;
		getGetRecords() : CommonAction;
		setGetRecords(getRecords : CommonAction): void;
		
	}
	
	export interface YaormMainControllerBuilder {
		new(): YaormMainController;
		decode(buffer: ArrayBuffer) : YaormMainController;
		//decode(buffer: NodeBuffer) : YaormMainController;
		//decode(buffer: ByteArrayBuffer) : YaormMainController;
		decode64(buffer: string) : YaormMainController;
		
	}	
}

declare module org.roylance.yaorm {
	export const enum ProtobufType {
		NONE = 0,
		DOUBLE = 1,
		FLOAT = 2,
		INT32 = 3,
		INT64 = 4,
		UINT32 = 5,
		UINT64 = 6,
		SINT32 = 7,
		SINT64 = 8,
		FIXED32 = 9,
		FIXED64 = 10,
		SFIXED32 = 11,
		SFIXED64 = 12,
		BOOL = 13,
		STRING = 14,
		BYTES = 15,
		PROTO = 16,
		
	}
}
