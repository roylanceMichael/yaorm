// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yaorm_model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Roylance.Yaorm {

  /// <summary>Holder for reflection information generated from yaorm_model.proto</summary>
  public static partial class YaormModelReflection {

    #region Descriptor
    /// <summary>File descriptor for yaorm_model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YaormModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF5YW9ybV9tb2RlbC5wcm90bxISb3JnLnJveWxhbmNlLnlhb3JtIqwDCgtX",
            "aGVyZUNsYXVzZRI1ChFuYW1lX2FuZF9wcm9wZXJ0eRgBIAEoCzIaLm9yZy5y",
            "b3lsYW5jZS55YW9ybS5Db2x1bW4SQwoNb3BlcmF0b3JfdHlwZRgCIAEoDjIs",
            "Lm9yZy5yb3lsYW5jZS55YW9ybS5XaGVyZUNsYXVzZS5PcGVyYXRvclR5cGUS",
            "SgoRY29ubmVjdGluZ19hbmRfb3IYAyABKA4yLy5vcmcucm95bGFuY2UueWFv",
            "cm0uV2hlcmVDbGF1c2UuQ29ubmVjdGluZ0FuZE9yEkAKF2Nvbm5lY3Rpbmdf",
            "d2hlcmVfY2xhdXNlGAQgASgLMh8ub3JnLnJveWxhbmNlLnlhb3JtLldoZXJl",
            "Q2xhdXNlEhAKCGluX2l0ZW1zGAUgAygJIlMKDE9wZXJhdG9yVHlwZRIKCgZF",
            "UVVBTFMQABIQCgxHUkVBVEVSX1RIQU4QARINCglMRVNTX1RIQU4QAhIOCgpO",
            "T1RfRVFVQUxTEAMSBgoCSU4QBCIsCg9Db25uZWN0aW5nQW5kT3ISCAoETk9O",
            "RRAAEgcKA0FORBABEgYKAk9SEAIigQMKEENvbHVtbkRlZmluaXRpb24SDAoE",
            "bmFtZRgBIAEoCRIuCgR0eXBlGAIgASgOMiAub3JnLnJveWxhbmNlLnlhb3Jt",
            "LlByb3RvYnVmVHlwZRIOCgZpc19rZXkYAyABKAgSRAoLY29sdW1uX3R5cGUY",
            "BCABKA4yLy5vcmcucm95bGFuY2UueWFvcm0uQ29sdW1uRGVmaW5pdGlvbi5D",
            "b2x1bW5UeXBlEkQKC2xpbmtlcl90eXBlGAUgASgOMi8ub3JnLnJveWxhbmNl",
            "Lnlhb3JtLkNvbHVtbkRlZmluaXRpb24uTGlua2VyVHlwZRINCgVvcmRlchgG",
            "IAEoBSJICgpDb2x1bW5UeXBlEgoKBlNDQUxBUhAAEg0KCUVOVU1fTkFNRRAB",
            "Eg4KCkVOVU1fVkFMVUUQAhIPCgtNRVNTQUdFX0tFWRADIjoKCkxpbmtlclR5",
            "cGUSCAoETk9ORRAAEgoKBlBBUkVOVBABEgkKBUNISUxEEAISCwoHTkVJVEhF",
            "UhADIoABCgVJbmRleBI6Cgxjb2x1bW5fbmFtZXMYASADKAsyJC5vcmcucm95",
            "bGFuY2UueWFvcm0uQ29sdW1uRGVmaW5pdGlvbhI7Cg1pbmNsdWRlX25hbWVz",
            "GAIgAygLMiQub3JnLnJveWxhbmNlLnlhb3JtLkNvbHVtbkRlZmluaXRpb24i",
            "lgMKCkRpZmZlcmVuY2USPgoLZW50aXR5X3R5cGUYASABKA4yKS5vcmcucm95",
            "bGFuY2UueWFvcm0uRGlmZmVyZW5jZS5FbnRpdHlUeXBlEjsKCW9wZXJhdGlv",
            "bhgCIAEoDjIoLm9yZy5yb3lsYW5jZS55YW9ybS5EaWZmZXJlbmNlLk9wZXJh",
            "dGlvbhIMCgRuYW1lGAMgASgJEigKBWluZGV4GAQgASgLMhkub3JnLnJveWxh",
            "bmNlLnlhb3JtLkluZGV4EkEKE3Byb3BlcnR5X2RlZmluaXRpb24YBSABKAsy",
            "JC5vcmcucm95bGFuY2UueWFvcm0uQ29sdW1uRGVmaW5pdGlvbhI9ChB0YWJs",
            "ZV9kZWZpbml0aW9uGAYgASgLMiMub3JnLnJveWxhbmNlLnlhb3JtLlRhYmxl",
            "RGVmaW5pdGlvbiIuCgpFbnRpdHlUeXBlEgkKBUlOREVYEAASCgoGQ09MVU1O",
            "EAESCQoFVEFCTEUQAiIhCglPcGVyYXRpb24SCgoGQ1JFQVRFEAASCAoERFJP",
            "UBABIowCCg9UYWJsZURlZmluaXRpb24SDAoEbmFtZRgBIAEoCRJAChJjb2x1",
            "bW5fZGVmaW5pdGlvbnMYAiADKAsyJC5vcmcucm95bGFuY2UueWFvcm0uQ29s",
            "dW1uRGVmaW5pdGlvbhIoCgVpbmRleBgDIAEoCzIZLm9yZy5yb3lsYW5jZS55",
            "YW9ybS5JbmRleBJBCgp0YWJsZV90eXBlGAQgASgOMi0ub3JnLnJveWxhbmNl",
            "Lnlhb3JtLlRhYmxlRGVmaW5pdGlvbi5UYWJsZVR5cGUiPAoJVGFibGVUeXBl",
            "EgoKBk5PUk1BTBAAEhIKDkxJTktFUl9NRVNTQUdFEAESDwoLTElOS0VSX0VO",
            "VU0QAiJSChBUYWJsZURlZmluaXRpb25zEj4KEXRhYmxlX2RlZmluaXRpb25z",
            "GAEgAygLMiMub3JnLnJveWxhbmNlLnlhb3JtLlRhYmxlRGVmaW5pdGlvbiJh",
            "ChBEaWZmZXJlbmNlUmVwb3J0EhgKEG1pZ3JhdGlvbl9leGlzdHMYASABKAgS",
            "MwoLZGlmZmVyZW5jZXMYAiADKAsyHi5vcmcucm95bGFuY2UueWFvcm0uRGlm",
            "ZmVyZW5jZSKbAwoGQ29sdW1uEjgKCmRlZmluaXRpb24YASABKAsyJC5vcmcu",
            "cm95bGFuY2UueWFvcm0uQ29sdW1uRGVmaW5pdGlvbhIVCg1kb3VibGVfaG9s",
            "ZGVyGAIgASgBEhQKDGZsb2F0X2hvbGRlchgDIAEoAhIUCgxpbnQzMl9ob2xk",
            "ZXIYBCABKAUSFAoMaW50NjRfaG9sZGVyGAUgASgDEhUKDXVpbnQzMl9ob2xk",
            "ZXIYBiABKA0SFQoNdWludDY0X2hvbGRlchgHIAEoBBIVCg1zaW50MzJfaG9s",
            "ZGVyGAggASgREhUKDXNpbnQ2NF9ob2xkZXIYCSABKBISFgoOZml4ZWQzMl9o",
            "b2xkZXIYCiABKAcSFgoOZml4ZWQ2NF9ob2xkZXIYCyABKAYSFwoPc2ZpeGVk",
            "MzJfaG9sZGVyGAwgASgPEhcKD3NmaXhlZDY0X2hvbGRlchgNIAEoEBITCgti",
            "b29sX2hvbGRlchgOIAEoCBIVCg1zdHJpbmdfaG9sZGVyGA8gASgJEhQKDGJ5",
            "dGVzX2hvbGRlchgQIAEoDCI1CgZSZWNvcmQSKwoHY29sdW1ucxgBIAMoCzIa",
            "Lm9yZy5yb3lsYW5jZS55YW9ybS5Db2x1bW4iNgoHUmVjb3JkcxIrCgdyZWNv",
            "cmRzGAEgAygLMhoub3JnLnJveWxhbmNlLnlhb3JtLlJlY29yZCKPAQoMVGFi",
            "bGVSZWNvcmRzEj0KEHRhYmxlX2RlZmluaXRpb24YASABKAsyIy5vcmcucm95",
            "bGFuY2UueWFvcm0uVGFibGVEZWZpbml0aW9uEiwKB3JlY29yZHMYAiABKAsy",
            "Gy5vcmcucm95bGFuY2UueWFvcm0uUmVjb3JkcxISCgp0YWJsZV9uYW1lGAMg",
            "ASgJIkoKD0FsbFRhYmxlUmVjb3JkcxI3Cg10YWJsZV9yZWNvcmRzGAEgAygL",
            "MiAub3JnLnJveWxhbmNlLnlhb3JtLlRhYmxlUmVjb3JkcyLPBQoRRGF0YWJh",
            "c2VPcGVyYXRpb24SPQoQdGFibGVfZGVmaW5pdGlvbhgBIAEoCzIjLm9yZy5y",
            "b3lsYW5jZS55YW9ybS5UYWJsZURlZmluaXRpb24SLAoHcmVjb3JkcxgCIAEo",
            "CzIbLm9yZy5yb3lsYW5jZS55YW9ybS5SZWNvcmRzEigKBWluZGV4GAMgASgL",
            "Mhkub3JnLnJveWxhbmNlLnlhb3JtLkluZGV4Ej8KEWNvbHVtbl9kZWZpbml0",
            "aW9uGAQgASgLMiQub3JnLnJveWxhbmNlLnlhb3JtLkNvbHVtbkRlZmluaXRp",
            "b24SNQoMd2hlcmVfY2xhdXNlGAUgASgLMh8ub3JnLnJveWxhbmNlLnlhb3Jt",
            "LldoZXJlQ2xhdXNlElwKF2RhdGFiYXNlX29wZXJhdGlvbl90eXBlGAYgASgO",
            "Mjsub3JnLnJveWxhbmNlLnlhb3JtLkRhdGFiYXNlT3BlcmF0aW9uLkRhdGFi",
            "YXNlT3BlcmF0aW9uVHlwZSLMAgoVRGF0YWJhc2VPcGVyYXRpb25UeXBlEhAK",
            "DENSRUFURV9UQUJMRRAAEg4KCkRST1BfVEFCTEUQARIQCgxDUkVBVEVfSU5E",
            "RVgQAhIOCgpEUk9QX0lOREVYEAMSEQoNQ1JFQVRFX0NPTFVNThAEEg8KC0RS",
            "T1BfQ09MVU1OEAUSDQoJR0VUX0NPVU5UEAYSDgoKR0VUX0NVU1RPTRAHEgcK",
            "A0dFVBAIEgwKCEdFVF9NQU5ZEAkSDQoJR0VUX1dIRVJFEAoSDwoLQlVMS19J",
            "TlNFUlQQCxIUChBDUkVBVEVfT1JfVVBEQVRFEAwSCgoGQ1JFQVRFEA0SCgoG",
            "VVBEQVRFEA4SGAoUVVBEQVRFX1dJVEhfQ1JJVEVSSUEQDxIRCg1VUERBVEVf",
            "Q1VTVE9NEBASCgoGREVMRVRFEBESDgoKREVMRVRFX0FMTBASIoYCChdEYXRh",
            "YmFzZU9wZXJhdGlvblJlc3VsdBITCgtib29sX3Jlc3VsdBgBIAEoCBIUCgxj",
            "b3VudF9yZXN1bHQYAiABKAMSMQoNcmVjb3JkX3Jlc3VsdBgDIAEoCzIaLm9y",
            "Zy5yb3lsYW5jZS55YW9ybS5SZWNvcmQSMwoOcmVjb3Jkc19yZXN1bHQYBCAB",
            "KAsyGy5vcmcucm95bGFuY2UueWFvcm0uUmVjb3JkcxIVCg1lcnJvcl9tZXNz",
            "YWdlGAUgASgJEkEKEmRhdGFiYXNlX29wZXJhdGlvbhgGIAEoCzIlLm9yZy5y",
            "b3lsYW5jZS55YW9ybS5EYXRhYmFzZU9wZXJhdGlvbiK/AQoSRGF0YWJhc2VE",
            "ZWZpbml0aW9uEg4KBnNjaGVtYRgBIAEoCRIMCgRuYW1lGAIgASgJEj8KEXRh",
            "YmxlX2RlZmluaXRpb25zGAMgASgLMiQub3JnLnJveWxhbmNlLnlhb3JtLlRh",
            "YmxlRGVmaW5pdGlvbnMSSgoXdGFibGVfZGVmaW5pdGlvbl9ncmFwaHMYBCAD",
            "KAsyKS5vcmcucm95bGFuY2UueWFvcm0uVGFibGVEZWZpbml0aW9uR3JhcGhz",
            "IrsDChRUYWJsZURlZmluaXRpb25HcmFwaBJCChVtYWluX3RhYmxlX2RlZmlu",
            "aXRpb24YASABKAsyIy5vcmcucm95bGFuY2UueWFvcm0uVGFibGVEZWZpbml0",
            "aW9uEkMKFm90aGVyX3RhYmxlX2RlZmluaXRpb24YAiABKAsyIy5vcmcucm95",
            "bGFuY2UueWFvcm0uVGFibGVEZWZpbml0aW9uEj8KEmxpbmtlcl90YWJsZV90",
            "YWJsZRgDIAEoCzIjLm9yZy5yb3lsYW5jZS55YW9ybS5UYWJsZURlZmluaXRp",
            "b24SYAoVZGVmaW5pdGlvbl9ncmFwaF90eXBlGAQgASgOMkEub3JnLnJveWxh",
            "bmNlLnlhb3JtLlRhYmxlRGVmaW5pdGlvbkdyYXBoLlRhYmxlRGVmaW5pdGlv",
            "bkdyYXBoVHlwZRIRCgltYWluX25hbWUYBSABKAkSEgoKb3RoZXJfbmFtZRgG",
            "IAEoCRITCgtjb2x1bW5fbmFtZRgHIAEoCSI7ChhUYWJsZURlZmluaXRpb25H",
            "cmFwaFR5cGUSDQoJRU5VTV9UWVBFEAASEAoMTUVTU0FHRV9UWVBFEAEipgEK",
            "FVRhYmxlRGVmaW5pdGlvbkdyYXBocxJCChVtYWluX3RhYmxlX2RlZmluaXRp",
            "b24YASABKAsyIy5vcmcucm95bGFuY2UueWFvcm0uVGFibGVEZWZpbml0aW9u",
            "EkkKF3RhYmxlX2RlZmluaXRpb25fZ3JhcGhzGAIgAygLMigub3JnLnJveWxh",
            "bmNlLnlhb3JtLlRhYmxlRGVmaW5pdGlvbkdyYXBoInoKDkNvbm5lY3Rpb25J",
            "bmZvEgwKBGhvc3QYASABKAkSDAoEdXNlchgCIAEoCRIQCghwYXNzd29yZBgD",
            "IAEoCRIOCgZzY2hlbWEYBCABKAkSHAoUc2hvdWxkX2NyZWF0ZV9zY2hlbWEY",
            "BSABKAgSDAoEcG9ydBgGIAEoBSJjCglNaWdyYXRpb24SCgoCaWQYASABKAkS",
            "FAoMY29udGV4dF9uYW1lGAIgASgJEh8KF21vZGVsX2RlZmluaXRpb25fYmFz",
            "ZTY0GAMgASgJEhMKC2luc2VydF9kYXRlGAQgASgDIjQKF0RhdGFiYXNlRXhl",
            "Y3V0aW9uUmVwb3J0EhkKEWNhbGxzX3RvX2RhdGFiYXNlGAEgASgDIskCCgdK",
            "b2luS2V5EjMKBWZpcnN0GAEgASgLMiQub3JnLnJveWxhbmNlLnlhb3JtLkNv",
            "bHVtbkRlZmluaXRpb24SNAoGc2Vjb25kGAIgASgLMiQub3JnLnJveWxhbmNl",
            "Lnlhb3JtLkNvbHVtbkRlZmluaXRpb24SMwoFdGhpcmQYAyABKAsyJC5vcmcu",
            "cm95bGFuY2UueWFvcm0uQ29sdW1uRGVmaW5pdGlvbhI0CgZmb3VydGgYBCAB",
            "KAsyJC5vcmcucm95bGFuY2UueWFvcm0uQ29sdW1uRGVmaW5pdGlvbhIzCgVm",
            "aWZ0aBgFIAEoCzIkLm9yZy5yb3lsYW5jZS55YW9ybS5Db2x1bW5EZWZpbml0",
            "aW9uEjMKBXNpeHRoGAYgASgLMiQub3JnLnJveWxhbmNlLnlhb3JtLkNvbHVt",
            "bkRlZmluaXRpb24ibgoOSm9pbkRlZmluaXRpb24SMgoFdGFibGUYASABKAsy",
            "Iy5vcmcucm95bGFuY2UueWFvcm0uVGFibGVEZWZpbml0aW9uEigKA2tleRgC",
            "IAEoCzIbLm9yZy5yb3lsYW5jZS55YW9ybS5Kb2luS2V5IkQKBEpvaW4SPAoQ",
            "am9pbl9kZWZpbml0aW9ucxgBIAMoCzIiLm9yZy5yb3lsYW5jZS55YW9ybS5K",
            "b2luRGVmaW5pdGlvbiKfAgoOVUlZYW9ybVJlcXVlc3QSDQoFdG9rZW4YASAB",
            "KAkSPQoQdGFibGVfZGVmaW5pdGlvbhgCIAEoCzIjLm9yZy5yb3lsYW5jZS55",
            "YW9ybS5UYWJsZURlZmluaXRpb24SLAoHcmVjb3JkcxgDIAEoCzIbLm9yZy5y",
            "b3lsYW5jZS55YW9ybS5SZWNvcmRzEjsKD2Nvbm5lY3Rpb25faW5mbxgEIAEo",
            "CzIiLm9yZy5yb3lsYW5jZS55YW9ybS5Db25uZWN0aW9uSW5mbxI1Cgx3aGVy",
            "ZV9jbGF1c2UYBSABKAsyHy5vcmcucm95bGFuY2UueWFvcm0uV2hlcmVDbGF1",
            "c2USDQoFbGltaXQYBiABKAMSDgoGb2Zmc2V0GAcgASgDIvYBCg9VSVlhb3Jt",
            "UmVzcG9uc2USLAoHcmVjb3JkcxgBIAEoCzIbLm9yZy5yb3lsYW5jZS55YW9y",
            "bS5SZWNvcmRzEg8KB3NjaGVtYXMYAiADKAkSDgoGdGFibGVzGAMgAygJEj0K",
            "EHRhYmxlX2RlZmluaXRpb24YBCABKAsyIy5vcmcucm95bGFuY2UueWFvcm0u",
            "VGFibGVEZWZpbml0aW9uEj8KEXRhYmxlX2RlZmluaXRpb25zGAUgASgLMiQu",
            "b3JnLnJveWxhbmNlLnlhb3JtLlRhYmxlRGVmaW5pdGlvbnMSFAoMcmVjb3Jk",
            "X2NvdW50GAYgASgDKtcBCgxQcm90b2J1ZlR5cGUSCAoETk9ORRAAEgoKBkRP",
            "VUJMRRABEgkKBUZMT0FUEAISCQoFSU5UMzIQAxIJCgVJTlQ2NBAEEgoKBlVJ",
            "TlQzMhAFEgoKBlVJTlQ2NBAGEgoKBlNJTlQzMhAHEgoKBlNJTlQ2NBAIEgsK",
            "B0ZJWEVEMzIQCRILCgdGSVhFRDY0EAoSDAoIU0ZJWEVEMzIQCxIMCghTRklY",
            "RUQ2NBAMEggKBEJPT0wQDRIKCgZTVFJJTkcQDhIJCgVCWVRFUxAPEgkKBVBS",
            "T1RPEBBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Org.Roylance.Yaorm.ProtobufType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.WhereClause), global::Org.Roylance.Yaorm.WhereClause.Parser, new[]{ "NameAndProperty", "OperatorType", "ConnectingAndOr", "ConnectingWhereClause", "InItems" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.WhereClause.Types.OperatorType), typeof(global::Org.Roylance.Yaorm.WhereClause.Types.ConnectingAndOr) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.ColumnDefinition), global::Org.Roylance.Yaorm.ColumnDefinition.Parser, new[]{ "Name", "Type", "IsKey", "ColumnType", "LinkerType", "Order" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.ColumnDefinition.Types.ColumnType), typeof(global::Org.Roylance.Yaorm.ColumnDefinition.Types.LinkerType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Index), global::Org.Roylance.Yaorm.Index.Parser, new[]{ "ColumnNames", "IncludeNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Difference), global::Org.Roylance.Yaorm.Difference.Parser, new[]{ "EntityType", "Operation", "Name", "Index", "PropertyDefinition", "TableDefinition" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Difference.Types.EntityType), typeof(global::Org.Roylance.Yaorm.Difference.Types.Operation) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.TableDefinition), global::Org.Roylance.Yaorm.TableDefinition.Parser, new[]{ "Name", "ColumnDefinitions", "Index", "TableType" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.TableDefinition.Types.TableType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.TableDefinitions), global::Org.Roylance.Yaorm.TableDefinitions.Parser, new[]{ "TableDefinitions_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.DifferenceReport), global::Org.Roylance.Yaorm.DifferenceReport.Parser, new[]{ "MigrationExists", "Differences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Column), global::Org.Roylance.Yaorm.Column.Parser, new[]{ "Definition", "DoubleHolder", "FloatHolder", "Int32Holder", "Int64Holder", "Uint32Holder", "Uint64Holder", "Sint32Holder", "Sint64Holder", "Fixed32Holder", "Fixed64Holder", "Sfixed32Holder", "Sfixed64Holder", "BoolHolder", "StringHolder", "BytesHolder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Record), global::Org.Roylance.Yaorm.Record.Parser, new[]{ "Columns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Records), global::Org.Roylance.Yaorm.Records.Parser, new[]{ "Records_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.TableRecords), global::Org.Roylance.Yaorm.TableRecords.Parser, new[]{ "TableDefinition", "Records", "TableName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.AllTableRecords), global::Org.Roylance.Yaorm.AllTableRecords.Parser, new[]{ "TableRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.DatabaseOperation), global::Org.Roylance.Yaorm.DatabaseOperation.Parser, new[]{ "TableDefinition", "Records", "Index", "ColumnDefinition", "WhereClause", "DatabaseOperationType" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.DatabaseOperation.Types.DatabaseOperationType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.DatabaseOperationResult), global::Org.Roylance.Yaorm.DatabaseOperationResult.Parser, new[]{ "BoolResult", "CountResult", "RecordResult", "RecordsResult", "ErrorMessage", "DatabaseOperation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.DatabaseDefinition), global::Org.Roylance.Yaorm.DatabaseDefinition.Parser, new[]{ "Schema", "Name", "TableDefinitions", "TableDefinitionGraphs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.TableDefinitionGraph), global::Org.Roylance.Yaorm.TableDefinitionGraph.Parser, new[]{ "MainTableDefinition", "OtherTableDefinition", "LinkerTableTable", "DefinitionGraphType", "MainName", "OtherName", "ColumnName" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.TableDefinitionGraph.Types.TableDefinitionGraphType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.TableDefinitionGraphs), global::Org.Roylance.Yaorm.TableDefinitionGraphs.Parser, new[]{ "MainTableDefinition", "TableDefinitionGraphs_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.ConnectionInfo), global::Org.Roylance.Yaorm.ConnectionInfo.Parser, new[]{ "Host", "User", "Password", "Schema", "ShouldCreateSchema", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Migration), global::Org.Roylance.Yaorm.Migration.Parser, new[]{ "Id", "ContextName", "ModelDefinitionBase64", "InsertDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.DatabaseExecutionReport), global::Org.Roylance.Yaorm.DatabaseExecutionReport.Parser, new[]{ "CallsToDatabase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.JoinKey), global::Org.Roylance.Yaorm.JoinKey.Parser, new[]{ "First", "Second", "Third", "Fourth", "Fifth", "Sixth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.JoinDefinition), global::Org.Roylance.Yaorm.JoinDefinition.Parser, new[]{ "Table", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.Join), global::Org.Roylance.Yaorm.Join.Parser, new[]{ "JoinDefinitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.UIYaormRequest), global::Org.Roylance.Yaorm.UIYaormRequest.Parser, new[]{ "Token", "TableDefinition", "Records", "ConnectionInfo", "WhereClause", "Limit", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yaorm.UIYaormResponse), global::Org.Roylance.Yaorm.UIYaormResponse.Parser, new[]{ "Records", "Schemas", "Tables", "TableDefinition", "TableDefinitions", "RecordCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ProtobufType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("DOUBLE")] Double = 1,
    [pbr::OriginalName("FLOAT")] Float = 2,
    [pbr::OriginalName("INT32")] Int32 = 3,
    [pbr::OriginalName("INT64")] Int64 = 4,
    [pbr::OriginalName("UINT32")] Uint32 = 5,
    [pbr::OriginalName("UINT64")] Uint64 = 6,
    [pbr::OriginalName("SINT32")] Sint32 = 7,
    [pbr::OriginalName("SINT64")] Sint64 = 8,
    [pbr::OriginalName("FIXED32")] Fixed32 = 9,
    [pbr::OriginalName("FIXED64")] Fixed64 = 10,
    [pbr::OriginalName("SFIXED32")] Sfixed32 = 11,
    [pbr::OriginalName("SFIXED64")] Sfixed64 = 12,
    [pbr::OriginalName("BOOL")] Bool = 13,
    [pbr::OriginalName("STRING")] String = 14,
    [pbr::OriginalName("BYTES")] Bytes = 15,
    [pbr::OriginalName("PROTO")] Proto = 16,
  }

  #endregion

  #region Messages
  public sealed partial class WhereClause : pb::IMessage<WhereClause> {
    private static readonly pb::MessageParser<WhereClause> _parser = new pb::MessageParser<WhereClause>(() => new WhereClause());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhereClause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereClause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereClause(WhereClause other) : this() {
      NameAndProperty = other.nameAndProperty_ != null ? other.NameAndProperty.Clone() : null;
      operatorType_ = other.operatorType_;
      connectingAndOr_ = other.connectingAndOr_;
      ConnectingWhereClause = other.connectingWhereClause_ != null ? other.ConnectingWhereClause.Clone() : null;
      inItems_ = other.inItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereClause Clone() {
      return new WhereClause(this);
    }

    /// <summary>Field number for the "name_and_property" field.</summary>
    public const int NameAndPropertyFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Column nameAndProperty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Column NameAndProperty {
      get { return nameAndProperty_; }
      set {
        nameAndProperty_ = value;
      }
    }

    /// <summary>Field number for the "operator_type" field.</summary>
    public const int OperatorTypeFieldNumber = 2;
    private global::Org.Roylance.Yaorm.WhereClause.Types.OperatorType operatorType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.WhereClause.Types.OperatorType OperatorType {
      get { return operatorType_; }
      set {
        operatorType_ = value;
      }
    }

    /// <summary>Field number for the "connecting_and_or" field.</summary>
    public const int ConnectingAndOrFieldNumber = 3;
    private global::Org.Roylance.Yaorm.WhereClause.Types.ConnectingAndOr connectingAndOr_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.WhereClause.Types.ConnectingAndOr ConnectingAndOr {
      get { return connectingAndOr_; }
      set {
        connectingAndOr_ = value;
      }
    }

    /// <summary>Field number for the "connecting_where_clause" field.</summary>
    public const int ConnectingWhereClauseFieldNumber = 4;
    private global::Org.Roylance.Yaorm.WhereClause connectingWhereClause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.WhereClause ConnectingWhereClause {
      get { return connectingWhereClause_; }
      set {
        connectingWhereClause_ = value;
      }
    }

    /// <summary>Field number for the "in_items" field.</summary>
    public const int InItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_inItems_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> inItems_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InItems {
      get { return inItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhereClause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhereClause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameAndProperty, other.NameAndProperty)) return false;
      if (OperatorType != other.OperatorType) return false;
      if (ConnectingAndOr != other.ConnectingAndOr) return false;
      if (!object.Equals(ConnectingWhereClause, other.ConnectingWhereClause)) return false;
      if(!inItems_.Equals(other.inItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nameAndProperty_ != null) hash ^= NameAndProperty.GetHashCode();
      if (OperatorType != 0) hash ^= OperatorType.GetHashCode();
      if (ConnectingAndOr != 0) hash ^= ConnectingAndOr.GetHashCode();
      if (connectingWhereClause_ != null) hash ^= ConnectingWhereClause.GetHashCode();
      hash ^= inItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nameAndProperty_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NameAndProperty);
      }
      if (OperatorType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OperatorType);
      }
      if (ConnectingAndOr != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ConnectingAndOr);
      }
      if (connectingWhereClause_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConnectingWhereClause);
      }
      inItems_.WriteTo(output, _repeated_inItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nameAndProperty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameAndProperty);
      }
      if (OperatorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatorType);
      }
      if (ConnectingAndOr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectingAndOr);
      }
      if (connectingWhereClause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectingWhereClause);
      }
      size += inItems_.CalculateSize(_repeated_inItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhereClause other) {
      if (other == null) {
        return;
      }
      if (other.nameAndProperty_ != null) {
        if (nameAndProperty_ == null) {
          nameAndProperty_ = new global::Org.Roylance.Yaorm.Column();
        }
        NameAndProperty.MergeFrom(other.NameAndProperty);
      }
      if (other.OperatorType != 0) {
        OperatorType = other.OperatorType;
      }
      if (other.ConnectingAndOr != 0) {
        ConnectingAndOr = other.ConnectingAndOr;
      }
      if (other.connectingWhereClause_ != null) {
        if (connectingWhereClause_ == null) {
          connectingWhereClause_ = new global::Org.Roylance.Yaorm.WhereClause();
        }
        ConnectingWhereClause.MergeFrom(other.ConnectingWhereClause);
      }
      inItems_.Add(other.inItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nameAndProperty_ == null) {
              nameAndProperty_ = new global::Org.Roylance.Yaorm.Column();
            }
            input.ReadMessage(nameAndProperty_);
            break;
          }
          case 16: {
            operatorType_ = (global::Org.Roylance.Yaorm.WhereClause.Types.OperatorType) input.ReadEnum();
            break;
          }
          case 24: {
            connectingAndOr_ = (global::Org.Roylance.Yaorm.WhereClause.Types.ConnectingAndOr) input.ReadEnum();
            break;
          }
          case 34: {
            if (connectingWhereClause_ == null) {
              connectingWhereClause_ = new global::Org.Roylance.Yaorm.WhereClause();
            }
            input.ReadMessage(connectingWhereClause_);
            break;
          }
          case 42: {
            inItems_.AddEntriesFrom(input, _repeated_inItems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WhereClause message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OperatorType {
        [pbr::OriginalName("EQUALS")] Equals = 0,
        [pbr::OriginalName("GREATER_THAN")] GreaterThan = 1,
        [pbr::OriginalName("LESS_THAN")] LessThan = 2,
        [pbr::OriginalName("NOT_EQUALS")] NotEquals = 3,
        [pbr::OriginalName("IN")] In = 4,
      }

      public enum ConnectingAndOr {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("AND")] And = 1,
        [pbr::OriginalName("OR")] Or = 2,
      }

    }
    #endregion

  }

  public sealed partial class ColumnDefinition : pb::IMessage<ColumnDefinition> {
    private static readonly pb::MessageParser<ColumnDefinition> _parser = new pb::MessageParser<ColumnDefinition>(() => new ColumnDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnDefinition(ColumnDefinition other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      isKey_ = other.isKey_;
      columnType_ = other.columnType_;
      linkerType_ = other.linkerType_;
      order_ = other.order_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnDefinition Clone() {
      return new ColumnDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Org.Roylance.Yaorm.ProtobufType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ProtobufType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "is_key" field.</summary>
    public const int IsKeyFieldNumber = 3;
    private bool isKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKey {
      get { return isKey_; }
      set {
        isKey_ = value;
      }
    }

    /// <summary>Field number for the "column_type" field.</summary>
    public const int ColumnTypeFieldNumber = 4;
    private global::Org.Roylance.Yaorm.ColumnDefinition.Types.ColumnType columnType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition.Types.ColumnType ColumnType {
      get { return columnType_; }
      set {
        columnType_ = value;
      }
    }

    /// <summary>Field number for the "linker_type" field.</summary>
    public const int LinkerTypeFieldNumber = 5;
    private global::Org.Roylance.Yaorm.ColumnDefinition.Types.LinkerType linkerType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition.Types.LinkerType LinkerType {
      get { return linkerType_; }
      set {
        linkerType_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 6;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (IsKey != other.IsKey) return false;
      if (ColumnType != other.ColumnType) return false;
      if (LinkerType != other.LinkerType) return false;
      if (Order != other.Order) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsKey != false) hash ^= IsKey.GetHashCode();
      if (ColumnType != 0) hash ^= ColumnType.GetHashCode();
      if (LinkerType != 0) hash ^= LinkerType.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (IsKey != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsKey);
      }
      if (ColumnType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ColumnType);
      }
      if (LinkerType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LinkerType);
      }
      if (Order != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Order);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IsKey != false) {
        size += 1 + 1;
      }
      if (ColumnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColumnType);
      }
      if (LinkerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkerType);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsKey != false) {
        IsKey = other.IsKey;
      }
      if (other.ColumnType != 0) {
        ColumnType = other.ColumnType;
      }
      if (other.LinkerType != 0) {
        LinkerType = other.LinkerType;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Org.Roylance.Yaorm.ProtobufType) input.ReadEnum();
            break;
          }
          case 24: {
            IsKey = input.ReadBool();
            break;
          }
          case 32: {
            columnType_ = (global::Org.Roylance.Yaorm.ColumnDefinition.Types.ColumnType) input.ReadEnum();
            break;
          }
          case 40: {
            linkerType_ = (global::Org.Roylance.Yaorm.ColumnDefinition.Types.LinkerType) input.ReadEnum();
            break;
          }
          case 48: {
            Order = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ColumnDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ColumnType {
        [pbr::OriginalName("SCALAR")] Scalar = 0,
        [pbr::OriginalName("ENUM_NAME")] EnumName = 1,
        [pbr::OriginalName("ENUM_VALUE")] EnumValue = 2,
        [pbr::OriginalName("MESSAGE_KEY")] MessageKey = 3,
      }

      public enum LinkerType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("PARENT")] Parent = 1,
        [pbr::OriginalName("CHILD")] Child = 2,
        [pbr::OriginalName("NEITHER")] Neither = 3,
      }

    }
    #endregion

  }

  public sealed partial class Index : pb::IMessage<Index> {
    private static readonly pb::MessageParser<Index> _parser = new pb::MessageParser<Index>(() => new Index());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Index> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index(Index other) : this() {
      columnNames_ = other.columnNames_.Clone();
      includeNames_ = other.includeNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Index Clone() {
      return new Index(this);
    }

    /// <summary>Field number for the "column_names" field.</summary>
    public const int ColumnNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.ColumnDefinition> _repeated_columnNames_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.ColumnDefinition.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition> columnNames_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition> ColumnNames {
      get { return columnNames_; }
    }

    /// <summary>Field number for the "include_names" field.</summary>
    public const int IncludeNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.ColumnDefinition> _repeated_includeNames_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.ColumnDefinition.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition> includeNames_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition> IncludeNames {
      get { return includeNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Index);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Index other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columnNames_.Equals(other.columnNames_)) return false;
      if(!includeNames_.Equals(other.includeNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columnNames_.GetHashCode();
      hash ^= includeNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      columnNames_.WriteTo(output, _repeated_columnNames_codec);
      includeNames_.WriteTo(output, _repeated_includeNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columnNames_.CalculateSize(_repeated_columnNames_codec);
      size += includeNames_.CalculateSize(_repeated_includeNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Index other) {
      if (other == null) {
        return;
      }
      columnNames_.Add(other.columnNames_);
      includeNames_.Add(other.includeNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columnNames_.AddEntriesFrom(input, _repeated_columnNames_codec);
            break;
          }
          case 18: {
            includeNames_.AddEntriesFrom(input, _repeated_includeNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Difference : pb::IMessage<Difference> {
    private static readonly pb::MessageParser<Difference> _parser = new pb::MessageParser<Difference>(() => new Difference());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Difference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Difference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Difference(Difference other) : this() {
      entityType_ = other.entityType_;
      operation_ = other.operation_;
      name_ = other.name_;
      Index = other.index_ != null ? other.Index.Clone() : null;
      PropertyDefinition = other.propertyDefinition_ != null ? other.PropertyDefinition.Clone() : null;
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Difference Clone() {
      return new Difference(this);
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Difference.Types.EntityType entityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Difference.Types.EntityType EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Difference.Types.Operation operation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Difference.Types.Operation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Index index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Index Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "property_definition" field.</summary>
    public const int PropertyDefinitionFieldNumber = 5;
    private global::Org.Roylance.Yaorm.ColumnDefinition propertyDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition PropertyDefinition {
      get { return propertyDefinition_; }
      set {
        propertyDefinition_ = value;
      }
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 6;
    private global::Org.Roylance.Yaorm.TableDefinition tableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Difference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Difference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityType != other.EntityType) return false;
      if (Operation != other.Operation) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(PropertyDefinition, other.PropertyDefinition)) return false;
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (propertyDefinition_ != null) hash ^= PropertyDefinition.GetHashCode();
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EntityType);
      }
      if (Operation != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Operation);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (index_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Index);
      }
      if (propertyDefinition_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PropertyDefinition);
      }
      if (tableDefinition_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TableDefinition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (propertyDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyDefinition);
      }
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Difference other) {
      if (other == null) {
        return;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.index_ != null) {
        if (index_ == null) {
          index_ = new global::Org.Roylance.Yaorm.Index();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.propertyDefinition_ != null) {
        if (propertyDefinition_ == null) {
          propertyDefinition_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        PropertyDefinition.MergeFrom(other.PropertyDefinition);
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            entityType_ = (global::Org.Roylance.Yaorm.Difference.Types.EntityType) input.ReadEnum();
            break;
          }
          case 16: {
            operation_ = (global::Org.Roylance.Yaorm.Difference.Types.Operation) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (index_ == null) {
              index_ = new global::Org.Roylance.Yaorm.Index();
            }
            input.ReadMessage(index_);
            break;
          }
          case 42: {
            if (propertyDefinition_ == null) {
              propertyDefinition_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(propertyDefinition_);
            break;
          }
          case 50: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Difference message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EntityType {
        [pbr::OriginalName("INDEX")] Index = 0,
        [pbr::OriginalName("COLUMN")] Column = 1,
        [pbr::OriginalName("TABLE")] Table = 2,
      }

      public enum Operation {
        [pbr::OriginalName("CREATE")] Create = 0,
        [pbr::OriginalName("DROP")] Drop = 1,
      }

    }
    #endregion

  }

  public sealed partial class TableDefinition : pb::IMessage<TableDefinition> {
    private static readonly pb::MessageParser<TableDefinition> _parser = new pb::MessageParser<TableDefinition>(() => new TableDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinition(TableDefinition other) : this() {
      name_ = other.name_;
      columnDefinitions_ = other.columnDefinitions_.Clone();
      Index = other.index_ != null ? other.Index.Clone() : null;
      tableType_ = other.tableType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinition Clone() {
      return new TableDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_definitions" field.</summary>
    public const int ColumnDefinitionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.ColumnDefinition> _repeated_columnDefinitions_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.ColumnDefinition.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition> columnDefinitions_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.ColumnDefinition> ColumnDefinitions {
      get { return columnDefinitions_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Index index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Index Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "table_type" field.</summary>
    public const int TableTypeFieldNumber = 4;
    private global::Org.Roylance.Yaorm.TableDefinition.Types.TableType tableType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition.Types.TableType TableType {
      get { return tableType_; }
      set {
        tableType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!columnDefinitions_.Equals(other.columnDefinitions_)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (TableType != other.TableType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= columnDefinitions_.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (TableType != 0) hash ^= TableType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      columnDefinitions_.WriteTo(output, _repeated_columnDefinitions_codec);
      if (index_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Index);
      }
      if (TableType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TableType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += columnDefinitions_.CalculateSize(_repeated_columnDefinitions_codec);
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (TableType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TableType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      columnDefinitions_.Add(other.columnDefinitions_);
      if (other.index_ != null) {
        if (index_ == null) {
          index_ = new global::Org.Roylance.Yaorm.Index();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.TableType != 0) {
        TableType = other.TableType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            columnDefinitions_.AddEntriesFrom(input, _repeated_columnDefinitions_codec);
            break;
          }
          case 26: {
            if (index_ == null) {
              index_ = new global::Org.Roylance.Yaorm.Index();
            }
            input.ReadMessage(index_);
            break;
          }
          case 32: {
            tableType_ = (global::Org.Roylance.Yaorm.TableDefinition.Types.TableType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TableDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TableType {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("LINKER_MESSAGE")] LinkerMessage = 1,
        [pbr::OriginalName("LINKER_ENUM")] LinkerEnum = 2,
      }

    }
    #endregion

  }

  public sealed partial class TableDefinitions : pb::IMessage<TableDefinitions> {
    private static readonly pb::MessageParser<TableDefinitions> _parser = new pb::MessageParser<TableDefinitions>(() => new TableDefinitions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableDefinitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitions(TableDefinitions other) : this() {
      tableDefinitions_ = other.tableDefinitions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitions Clone() {
      return new TableDefinitions(this);
    }

    /// <summary>Field number for the "table_definitions" field.</summary>
    public const int TableDefinitions_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.TableDefinition> _repeated_tableDefinitions_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.TableDefinition.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinition> tableDefinitions_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinition> TableDefinitions_ {
      get { return tableDefinitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableDefinitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableDefinitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tableDefinitions_.Equals(other.tableDefinitions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tableDefinitions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tableDefinitions_.WriteTo(output, _repeated_tableDefinitions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tableDefinitions_.CalculateSize(_repeated_tableDefinitions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableDefinitions other) {
      if (other == null) {
        return;
      }
      tableDefinitions_.Add(other.tableDefinitions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tableDefinitions_.AddEntriesFrom(input, _repeated_tableDefinitions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DifferenceReport : pb::IMessage<DifferenceReport> {
    private static readonly pb::MessageParser<DifferenceReport> _parser = new pb::MessageParser<DifferenceReport>(() => new DifferenceReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DifferenceReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DifferenceReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DifferenceReport(DifferenceReport other) : this() {
      migrationExists_ = other.migrationExists_;
      differences_ = other.differences_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DifferenceReport Clone() {
      return new DifferenceReport(this);
    }

    /// <summary>Field number for the "migration_exists" field.</summary>
    public const int MigrationExistsFieldNumber = 1;
    private bool migrationExists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MigrationExists {
      get { return migrationExists_; }
      set {
        migrationExists_ = value;
      }
    }

    /// <summary>Field number for the "differences" field.</summary>
    public const int DifferencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Difference> _repeated_differences_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Difference.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Difference> differences_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Difference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Difference> Differences {
      get { return differences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DifferenceReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DifferenceReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MigrationExists != other.MigrationExists) return false;
      if(!differences_.Equals(other.differences_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MigrationExists != false) hash ^= MigrationExists.GetHashCode();
      hash ^= differences_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MigrationExists != false) {
        output.WriteRawTag(8);
        output.WriteBool(MigrationExists);
      }
      differences_.WriteTo(output, _repeated_differences_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MigrationExists != false) {
        size += 1 + 1;
      }
      size += differences_.CalculateSize(_repeated_differences_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DifferenceReport other) {
      if (other == null) {
        return;
      }
      if (other.MigrationExists != false) {
        MigrationExists = other.MigrationExists;
      }
      differences_.Add(other.differences_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MigrationExists = input.ReadBool();
            break;
          }
          case 18: {
            differences_.AddEntriesFrom(input, _repeated_differences_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Column : pb::IMessage<Column> {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column(Column other) : this() {
      Definition = other.definition_ != null ? other.Definition.Clone() : null;
      doubleHolder_ = other.doubleHolder_;
      floatHolder_ = other.floatHolder_;
      int32Holder_ = other.int32Holder_;
      int64Holder_ = other.int64Holder_;
      uint32Holder_ = other.uint32Holder_;
      uint64Holder_ = other.uint64Holder_;
      sint32Holder_ = other.sint32Holder_;
      sint64Holder_ = other.sint64Holder_;
      fixed32Holder_ = other.fixed32Holder_;
      fixed64Holder_ = other.fixed64Holder_;
      sfixed32Holder_ = other.sfixed32Holder_;
      sfixed64Holder_ = other.sfixed64Holder_;
      boolHolder_ = other.boolHolder_;
      stringHolder_ = other.stringHolder_;
      bytesHolder_ = other.bytesHolder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "definition" field.</summary>
    public const int DefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.ColumnDefinition definition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition Definition {
      get { return definition_; }
      set {
        definition_ = value;
      }
    }

    /// <summary>Field number for the "double_holder" field.</summary>
    public const int DoubleHolderFieldNumber = 2;
    private double doubleHolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleHolder {
      get { return doubleHolder_; }
      set {
        doubleHolder_ = value;
      }
    }

    /// <summary>Field number for the "float_holder" field.</summary>
    public const int FloatHolderFieldNumber = 3;
    private float floatHolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatHolder {
      get { return floatHolder_; }
      set {
        floatHolder_ = value;
      }
    }

    /// <summary>Field number for the "int32_holder" field.</summary>
    public const int Int32HolderFieldNumber = 4;
    private int int32Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Holder {
      get { return int32Holder_; }
      set {
        int32Holder_ = value;
      }
    }

    /// <summary>Field number for the "int64_holder" field.</summary>
    public const int Int64HolderFieldNumber = 5;
    private long int64Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Holder {
      get { return int64Holder_; }
      set {
        int64Holder_ = value;
      }
    }

    /// <summary>Field number for the "uint32_holder" field.</summary>
    public const int Uint32HolderFieldNumber = 6;
    private uint uint32Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uint32Holder {
      get { return uint32Holder_; }
      set {
        uint32Holder_ = value;
      }
    }

    /// <summary>Field number for the "uint64_holder" field.</summary>
    public const int Uint64HolderFieldNumber = 7;
    private ulong uint64Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64Holder {
      get { return uint64Holder_; }
      set {
        uint64Holder_ = value;
      }
    }

    /// <summary>Field number for the "sint32_holder" field.</summary>
    public const int Sint32HolderFieldNumber = 8;
    private int sint32Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sint32Holder {
      get { return sint32Holder_; }
      set {
        sint32Holder_ = value;
      }
    }

    /// <summary>Field number for the "sint64_holder" field.</summary>
    public const int Sint64HolderFieldNumber = 9;
    private long sint64Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sint64Holder {
      get { return sint64Holder_; }
      set {
        sint64Holder_ = value;
      }
    }

    /// <summary>Field number for the "fixed32_holder" field.</summary>
    public const int Fixed32HolderFieldNumber = 10;
    private uint fixed32Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fixed32Holder {
      get { return fixed32Holder_; }
      set {
        fixed32Holder_ = value;
      }
    }

    /// <summary>Field number for the "fixed64_holder" field.</summary>
    public const int Fixed64HolderFieldNumber = 11;
    private ulong fixed64Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fixed64Holder {
      get { return fixed64Holder_; }
      set {
        fixed64Holder_ = value;
      }
    }

    /// <summary>Field number for the "sfixed32_holder" field.</summary>
    public const int Sfixed32HolderFieldNumber = 12;
    private int sfixed32Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sfixed32Holder {
      get { return sfixed32Holder_; }
      set {
        sfixed32Holder_ = value;
      }
    }

    /// <summary>Field number for the "sfixed64_holder" field.</summary>
    public const int Sfixed64HolderFieldNumber = 13;
    private long sfixed64Holder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sfixed64Holder {
      get { return sfixed64Holder_; }
      set {
        sfixed64Holder_ = value;
      }
    }

    /// <summary>Field number for the "bool_holder" field.</summary>
    public const int BoolHolderFieldNumber = 14;
    private bool boolHolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolHolder {
      get { return boolHolder_; }
      set {
        boolHolder_ = value;
      }
    }

    /// <summary>Field number for the "string_holder" field.</summary>
    public const int StringHolderFieldNumber = 15;
    private string stringHolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringHolder {
      get { return stringHolder_; }
      set {
        stringHolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_holder" field.</summary>
    public const int BytesHolderFieldNumber = 16;
    private pb::ByteString bytesHolder_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesHolder {
      get { return bytesHolder_; }
      set {
        bytesHolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Definition, other.Definition)) return false;
      if (DoubleHolder != other.DoubleHolder) return false;
      if (FloatHolder != other.FloatHolder) return false;
      if (Int32Holder != other.Int32Holder) return false;
      if (Int64Holder != other.Int64Holder) return false;
      if (Uint32Holder != other.Uint32Holder) return false;
      if (Uint64Holder != other.Uint64Holder) return false;
      if (Sint32Holder != other.Sint32Holder) return false;
      if (Sint64Holder != other.Sint64Holder) return false;
      if (Fixed32Holder != other.Fixed32Holder) return false;
      if (Fixed64Holder != other.Fixed64Holder) return false;
      if (Sfixed32Holder != other.Sfixed32Holder) return false;
      if (Sfixed64Holder != other.Sfixed64Holder) return false;
      if (BoolHolder != other.BoolHolder) return false;
      if (StringHolder != other.StringHolder) return false;
      if (BytesHolder != other.BytesHolder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (definition_ != null) hash ^= Definition.GetHashCode();
      if (DoubleHolder != 0D) hash ^= DoubleHolder.GetHashCode();
      if (FloatHolder != 0F) hash ^= FloatHolder.GetHashCode();
      if (Int32Holder != 0) hash ^= Int32Holder.GetHashCode();
      if (Int64Holder != 0L) hash ^= Int64Holder.GetHashCode();
      if (Uint32Holder != 0) hash ^= Uint32Holder.GetHashCode();
      if (Uint64Holder != 0UL) hash ^= Uint64Holder.GetHashCode();
      if (Sint32Holder != 0) hash ^= Sint32Holder.GetHashCode();
      if (Sint64Holder != 0L) hash ^= Sint64Holder.GetHashCode();
      if (Fixed32Holder != 0) hash ^= Fixed32Holder.GetHashCode();
      if (Fixed64Holder != 0UL) hash ^= Fixed64Holder.GetHashCode();
      if (Sfixed32Holder != 0) hash ^= Sfixed32Holder.GetHashCode();
      if (Sfixed64Holder != 0L) hash ^= Sfixed64Holder.GetHashCode();
      if (BoolHolder != false) hash ^= BoolHolder.GetHashCode();
      if (StringHolder.Length != 0) hash ^= StringHolder.GetHashCode();
      if (BytesHolder.Length != 0) hash ^= BytesHolder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (definition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Definition);
      }
      if (DoubleHolder != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleHolder);
      }
      if (FloatHolder != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FloatHolder);
      }
      if (Int32Holder != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Int32Holder);
      }
      if (Int64Holder != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Int64Holder);
      }
      if (Uint32Holder != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Uint32Holder);
      }
      if (Uint64Holder != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Uint64Holder);
      }
      if (Sint32Holder != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Sint32Holder);
      }
      if (Sint64Holder != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(Sint64Holder);
      }
      if (Fixed32Holder != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Fixed32Holder);
      }
      if (Fixed64Holder != 0UL) {
        output.WriteRawTag(89);
        output.WriteFixed64(Fixed64Holder);
      }
      if (Sfixed32Holder != 0) {
        output.WriteRawTag(101);
        output.WriteSFixed32(Sfixed32Holder);
      }
      if (Sfixed64Holder != 0L) {
        output.WriteRawTag(105);
        output.WriteSFixed64(Sfixed64Holder);
      }
      if (BoolHolder != false) {
        output.WriteRawTag(112);
        output.WriteBool(BoolHolder);
      }
      if (StringHolder.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StringHolder);
      }
      if (BytesHolder.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(BytesHolder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (definition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Definition);
      }
      if (DoubleHolder != 0D) {
        size += 1 + 8;
      }
      if (FloatHolder != 0F) {
        size += 1 + 4;
      }
      if (Int32Holder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Holder);
      }
      if (Int64Holder != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Holder);
      }
      if (Uint32Holder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Holder);
      }
      if (Uint64Holder != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Holder);
      }
      if (Sint32Holder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sint32Holder);
      }
      if (Sint64Holder != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Sint64Holder);
      }
      if (Fixed32Holder != 0) {
        size += 1 + 4;
      }
      if (Fixed64Holder != 0UL) {
        size += 1 + 8;
      }
      if (Sfixed32Holder != 0) {
        size += 1 + 4;
      }
      if (Sfixed64Holder != 0L) {
        size += 1 + 8;
      }
      if (BoolHolder != false) {
        size += 1 + 1;
      }
      if (StringHolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringHolder);
      }
      if (BytesHolder.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BytesHolder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      if (other.definition_ != null) {
        if (definition_ == null) {
          definition_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        Definition.MergeFrom(other.Definition);
      }
      if (other.DoubleHolder != 0D) {
        DoubleHolder = other.DoubleHolder;
      }
      if (other.FloatHolder != 0F) {
        FloatHolder = other.FloatHolder;
      }
      if (other.Int32Holder != 0) {
        Int32Holder = other.Int32Holder;
      }
      if (other.Int64Holder != 0L) {
        Int64Holder = other.Int64Holder;
      }
      if (other.Uint32Holder != 0) {
        Uint32Holder = other.Uint32Holder;
      }
      if (other.Uint64Holder != 0UL) {
        Uint64Holder = other.Uint64Holder;
      }
      if (other.Sint32Holder != 0) {
        Sint32Holder = other.Sint32Holder;
      }
      if (other.Sint64Holder != 0L) {
        Sint64Holder = other.Sint64Holder;
      }
      if (other.Fixed32Holder != 0) {
        Fixed32Holder = other.Fixed32Holder;
      }
      if (other.Fixed64Holder != 0UL) {
        Fixed64Holder = other.Fixed64Holder;
      }
      if (other.Sfixed32Holder != 0) {
        Sfixed32Holder = other.Sfixed32Holder;
      }
      if (other.Sfixed64Holder != 0L) {
        Sfixed64Holder = other.Sfixed64Holder;
      }
      if (other.BoolHolder != false) {
        BoolHolder = other.BoolHolder;
      }
      if (other.StringHolder.Length != 0) {
        StringHolder = other.StringHolder;
      }
      if (other.BytesHolder.Length != 0) {
        BytesHolder = other.BytesHolder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (definition_ == null) {
              definition_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(definition_);
            break;
          }
          case 17: {
            DoubleHolder = input.ReadDouble();
            break;
          }
          case 29: {
            FloatHolder = input.ReadFloat();
            break;
          }
          case 32: {
            Int32Holder = input.ReadInt32();
            break;
          }
          case 40: {
            Int64Holder = input.ReadInt64();
            break;
          }
          case 48: {
            Uint32Holder = input.ReadUInt32();
            break;
          }
          case 56: {
            Uint64Holder = input.ReadUInt64();
            break;
          }
          case 64: {
            Sint32Holder = input.ReadSInt32();
            break;
          }
          case 72: {
            Sint64Holder = input.ReadSInt64();
            break;
          }
          case 85: {
            Fixed32Holder = input.ReadFixed32();
            break;
          }
          case 89: {
            Fixed64Holder = input.ReadFixed64();
            break;
          }
          case 101: {
            Sfixed32Holder = input.ReadSFixed32();
            break;
          }
          case 105: {
            Sfixed64Holder = input.ReadSFixed64();
            break;
          }
          case 112: {
            BoolHolder = input.ReadBool();
            break;
          }
          case 122: {
            StringHolder = input.ReadString();
            break;
          }
          case 130: {
            BytesHolder = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      columns_ = other.columns_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.Column.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Column> columns_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Column> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _repeated_columns_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Records : pb::IMessage<Records> {
    private static readonly pb::MessageParser<Records> _parser = new pb::MessageParser<Records>(() => new Records());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Records> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Records() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Records(Records other) : this() {
      records_ = other.records_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Records Clone() {
      return new Records(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int Records_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.Record.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Record> records_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Record> Records_ {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Records);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Records other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Records other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableRecords : pb::IMessage<TableRecords> {
    private static readonly pb::MessageParser<TableRecords> _parser = new pb::MessageParser<TableRecords>(() => new TableRecords());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableRecords(TableRecords other) : this() {
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
      Records = other.records_ != null ? other.Records.Clone() : null;
      tableName_ = other.tableName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableRecords Clone() {
      return new TableRecords(this);
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.TableDefinition tableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Records records_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Records Records {
      get { return records_; }
      set {
        records_ = value;
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 3;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      if (!object.Equals(Records, other.Records)) return false;
      if (TableName != other.TableName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      if (records_ != null) hash ^= Records.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableDefinition);
      }
      if (records_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Records);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      if (records_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Records);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableRecords other) {
      if (other == null) {
        return;
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
      if (other.records_ != null) {
        if (records_ == null) {
          records_ = new global::Org.Roylance.Yaorm.Records();
        }
        Records.MergeFrom(other.Records);
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
          case 18: {
            if (records_ == null) {
              records_ = new global::Org.Roylance.Yaorm.Records();
            }
            input.ReadMessage(records_);
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllTableRecords : pb::IMessage<AllTableRecords> {
    private static readonly pb::MessageParser<AllTableRecords> _parser = new pb::MessageParser<AllTableRecords>(() => new AllTableRecords());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllTableRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllTableRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllTableRecords(AllTableRecords other) : this() {
      tableRecords_ = other.tableRecords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllTableRecords Clone() {
      return new AllTableRecords(this);
    }

    /// <summary>Field number for the "table_records" field.</summary>
    public const int TableRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.TableRecords> _repeated_tableRecords_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.TableRecords.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.TableRecords> tableRecords_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.TableRecords>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.TableRecords> TableRecords {
      get { return tableRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllTableRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllTableRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tableRecords_.Equals(other.tableRecords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tableRecords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tableRecords_.WriteTo(output, _repeated_tableRecords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tableRecords_.CalculateSize(_repeated_tableRecords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllTableRecords other) {
      if (other == null) {
        return;
      }
      tableRecords_.Add(other.tableRecords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tableRecords_.AddEntriesFrom(input, _repeated_tableRecords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatabaseOperation : pb::IMessage<DatabaseOperation> {
    private static readonly pb::MessageParser<DatabaseOperation> _parser = new pb::MessageParser<DatabaseOperation>(() => new DatabaseOperation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseOperation(DatabaseOperation other) : this() {
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
      Records = other.records_ != null ? other.Records.Clone() : null;
      Index = other.index_ != null ? other.Index.Clone() : null;
      ColumnDefinition = other.columnDefinition_ != null ? other.ColumnDefinition.Clone() : null;
      WhereClause = other.whereClause_ != null ? other.WhereClause.Clone() : null;
      databaseOperationType_ = other.databaseOperationType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseOperation Clone() {
      return new DatabaseOperation(this);
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.TableDefinition tableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Records records_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Records Records {
      get { return records_; }
      set {
        records_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Index index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Index Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "column_definition" field.</summary>
    public const int ColumnDefinitionFieldNumber = 4;
    private global::Org.Roylance.Yaorm.ColumnDefinition columnDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition ColumnDefinition {
      get { return columnDefinition_; }
      set {
        columnDefinition_ = value;
      }
    }

    /// <summary>Field number for the "where_clause" field.</summary>
    public const int WhereClauseFieldNumber = 5;
    private global::Org.Roylance.Yaorm.WhereClause whereClause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.WhereClause WhereClause {
      get { return whereClause_; }
      set {
        whereClause_ = value;
      }
    }

    /// <summary>Field number for the "database_operation_type" field.</summary>
    public const int DatabaseOperationTypeFieldNumber = 6;
    private global::Org.Roylance.Yaorm.DatabaseOperation.Types.DatabaseOperationType databaseOperationType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.DatabaseOperation.Types.DatabaseOperationType DatabaseOperationType {
      get { return databaseOperationType_; }
      set {
        databaseOperationType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      if (!object.Equals(Records, other.Records)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(ColumnDefinition, other.ColumnDefinition)) return false;
      if (!object.Equals(WhereClause, other.WhereClause)) return false;
      if (DatabaseOperationType != other.DatabaseOperationType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      if (records_ != null) hash ^= Records.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (columnDefinition_ != null) hash ^= ColumnDefinition.GetHashCode();
      if (whereClause_ != null) hash ^= WhereClause.GetHashCode();
      if (DatabaseOperationType != 0) hash ^= DatabaseOperationType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableDefinition);
      }
      if (records_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Records);
      }
      if (index_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Index);
      }
      if (columnDefinition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ColumnDefinition);
      }
      if (whereClause_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WhereClause);
      }
      if (DatabaseOperationType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DatabaseOperationType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      if (records_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Records);
      }
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (columnDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColumnDefinition);
      }
      if (whereClause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClause);
      }
      if (DatabaseOperationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatabaseOperationType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseOperation other) {
      if (other == null) {
        return;
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
      if (other.records_ != null) {
        if (records_ == null) {
          records_ = new global::Org.Roylance.Yaorm.Records();
        }
        Records.MergeFrom(other.Records);
      }
      if (other.index_ != null) {
        if (index_ == null) {
          index_ = new global::Org.Roylance.Yaorm.Index();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.columnDefinition_ != null) {
        if (columnDefinition_ == null) {
          columnDefinition_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        ColumnDefinition.MergeFrom(other.ColumnDefinition);
      }
      if (other.whereClause_ != null) {
        if (whereClause_ == null) {
          whereClause_ = new global::Org.Roylance.Yaorm.WhereClause();
        }
        WhereClause.MergeFrom(other.WhereClause);
      }
      if (other.DatabaseOperationType != 0) {
        DatabaseOperationType = other.DatabaseOperationType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
          case 18: {
            if (records_ == null) {
              records_ = new global::Org.Roylance.Yaorm.Records();
            }
            input.ReadMessage(records_);
            break;
          }
          case 26: {
            if (index_ == null) {
              index_ = new global::Org.Roylance.Yaorm.Index();
            }
            input.ReadMessage(index_);
            break;
          }
          case 34: {
            if (columnDefinition_ == null) {
              columnDefinition_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(columnDefinition_);
            break;
          }
          case 42: {
            if (whereClause_ == null) {
              whereClause_ = new global::Org.Roylance.Yaorm.WhereClause();
            }
            input.ReadMessage(whereClause_);
            break;
          }
          case 48: {
            databaseOperationType_ = (global::Org.Roylance.Yaorm.DatabaseOperation.Types.DatabaseOperationType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatabaseOperation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DatabaseOperationType {
        [pbr::OriginalName("CREATE_TABLE")] CreateTable = 0,
        [pbr::OriginalName("DROP_TABLE")] DropTable = 1,
        [pbr::OriginalName("CREATE_INDEX")] CreateIndex = 2,
        [pbr::OriginalName("DROP_INDEX")] DropIndex = 3,
        [pbr::OriginalName("CREATE_COLUMN")] CreateColumn = 4,
        [pbr::OriginalName("DROP_COLUMN")] DropColumn = 5,
        [pbr::OriginalName("GET_COUNT")] GetCount = 6,
        [pbr::OriginalName("GET_CUSTOM")] GetCustom = 7,
        [pbr::OriginalName("GET")] Get = 8,
        [pbr::OriginalName("GET_MANY")] GetMany = 9,
        [pbr::OriginalName("GET_WHERE")] GetWhere = 10,
        [pbr::OriginalName("BULK_INSERT")] BulkInsert = 11,
        [pbr::OriginalName("CREATE_OR_UPDATE")] CreateOrUpdate = 12,
        [pbr::OriginalName("CREATE")] Create = 13,
        [pbr::OriginalName("UPDATE")] Update = 14,
        [pbr::OriginalName("UPDATE_WITH_CRITERIA")] UpdateWithCriteria = 15,
        [pbr::OriginalName("UPDATE_CUSTOM")] UpdateCustom = 16,
        [pbr::OriginalName("DELETE")] Delete = 17,
        [pbr::OriginalName("DELETE_ALL")] DeleteAll = 18,
      }

    }
    #endregion

  }

  public sealed partial class DatabaseOperationResult : pb::IMessage<DatabaseOperationResult> {
    private static readonly pb::MessageParser<DatabaseOperationResult> _parser = new pb::MessageParser<DatabaseOperationResult>(() => new DatabaseOperationResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseOperationResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseOperationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseOperationResult(DatabaseOperationResult other) : this() {
      boolResult_ = other.boolResult_;
      countResult_ = other.countResult_;
      RecordResult = other.recordResult_ != null ? other.RecordResult.Clone() : null;
      RecordsResult = other.recordsResult_ != null ? other.RecordsResult.Clone() : null;
      errorMessage_ = other.errorMessage_;
      DatabaseOperation = other.databaseOperation_ != null ? other.DatabaseOperation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseOperationResult Clone() {
      return new DatabaseOperationResult(this);
    }

    /// <summary>Field number for the "bool_result" field.</summary>
    public const int BoolResultFieldNumber = 1;
    private bool boolResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolResult {
      get { return boolResult_; }
      set {
        boolResult_ = value;
      }
    }

    /// <summary>Field number for the "count_result" field.</summary>
    public const int CountResultFieldNumber = 2;
    private long countResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CountResult {
      get { return countResult_; }
      set {
        countResult_ = value;
      }
    }

    /// <summary>Field number for the "record_result" field.</summary>
    public const int RecordResultFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Record recordResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Record RecordResult {
      get { return recordResult_; }
      set {
        recordResult_ = value;
      }
    }

    /// <summary>Field number for the "records_result" field.</summary>
    public const int RecordsResultFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Records recordsResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Records RecordsResult {
      get { return recordsResult_; }
      set {
        recordsResult_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 5;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_operation" field.</summary>
    public const int DatabaseOperationFieldNumber = 6;
    private global::Org.Roylance.Yaorm.DatabaseOperation databaseOperation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.DatabaseOperation DatabaseOperation {
      get { return databaseOperation_; }
      set {
        databaseOperation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseOperationResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseOperationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoolResult != other.BoolResult) return false;
      if (CountResult != other.CountResult) return false;
      if (!object.Equals(RecordResult, other.RecordResult)) return false;
      if (!object.Equals(RecordsResult, other.RecordsResult)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(DatabaseOperation, other.DatabaseOperation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoolResult != false) hash ^= BoolResult.GetHashCode();
      if (CountResult != 0L) hash ^= CountResult.GetHashCode();
      if (recordResult_ != null) hash ^= RecordResult.GetHashCode();
      if (recordsResult_ != null) hash ^= RecordsResult.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (databaseOperation_ != null) hash ^= DatabaseOperation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoolResult != false) {
        output.WriteRawTag(8);
        output.WriteBool(BoolResult);
      }
      if (CountResult != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CountResult);
      }
      if (recordResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RecordResult);
      }
      if (recordsResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecordsResult);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ErrorMessage);
      }
      if (databaseOperation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DatabaseOperation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoolResult != false) {
        size += 1 + 1;
      }
      if (CountResult != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountResult);
      }
      if (recordResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordResult);
      }
      if (recordsResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordsResult);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (databaseOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatabaseOperation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseOperationResult other) {
      if (other == null) {
        return;
      }
      if (other.BoolResult != false) {
        BoolResult = other.BoolResult;
      }
      if (other.CountResult != 0L) {
        CountResult = other.CountResult;
      }
      if (other.recordResult_ != null) {
        if (recordResult_ == null) {
          recordResult_ = new global::Org.Roylance.Yaorm.Record();
        }
        RecordResult.MergeFrom(other.RecordResult);
      }
      if (other.recordsResult_ != null) {
        if (recordsResult_ == null) {
          recordsResult_ = new global::Org.Roylance.Yaorm.Records();
        }
        RecordsResult.MergeFrom(other.RecordsResult);
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.databaseOperation_ != null) {
        if (databaseOperation_ == null) {
          databaseOperation_ = new global::Org.Roylance.Yaorm.DatabaseOperation();
        }
        DatabaseOperation.MergeFrom(other.DatabaseOperation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoolResult = input.ReadBool();
            break;
          }
          case 16: {
            CountResult = input.ReadInt64();
            break;
          }
          case 26: {
            if (recordResult_ == null) {
              recordResult_ = new global::Org.Roylance.Yaorm.Record();
            }
            input.ReadMessage(recordResult_);
            break;
          }
          case 34: {
            if (recordsResult_ == null) {
              recordsResult_ = new global::Org.Roylance.Yaorm.Records();
            }
            input.ReadMessage(recordsResult_);
            break;
          }
          case 42: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 50: {
            if (databaseOperation_ == null) {
              databaseOperation_ = new global::Org.Roylance.Yaorm.DatabaseOperation();
            }
            input.ReadMessage(databaseOperation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatabaseDefinition : pb::IMessage<DatabaseDefinition> {
    private static readonly pb::MessageParser<DatabaseDefinition> _parser = new pb::MessageParser<DatabaseDefinition>(() => new DatabaseDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseDefinition(DatabaseDefinition other) : this() {
      schema_ = other.schema_;
      name_ = other.name_;
      TableDefinitions = other.tableDefinitions_ != null ? other.TableDefinitions.Clone() : null;
      tableDefinitionGraphs_ = other.tableDefinitionGraphs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseDefinition Clone() {
      return new DatabaseDefinition(this);
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 1;
    private string schema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_definitions" field.</summary>
    public const int TableDefinitionsFieldNumber = 3;
    private global::Org.Roylance.Yaorm.TableDefinitions tableDefinitions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinitions TableDefinitions {
      get { return tableDefinitions_; }
      set {
        tableDefinitions_ = value;
      }
    }

    /// <summary>Field number for the "table_definition_graphs" field.</summary>
    public const int TableDefinitionGraphsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.TableDefinitionGraphs> _repeated_tableDefinitionGraphs_codec
        = pb::FieldCodec.ForMessage(34, global::Org.Roylance.Yaorm.TableDefinitionGraphs.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinitionGraphs> tableDefinitionGraphs_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinitionGraphs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinitionGraphs> TableDefinitionGraphs {
      get { return tableDefinitionGraphs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Schema != other.Schema) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(TableDefinitions, other.TableDefinitions)) return false;
      if(!tableDefinitionGraphs_.Equals(other.tableDefinitionGraphs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (tableDefinitions_ != null) hash ^= TableDefinitions.GetHashCode();
      hash ^= tableDefinitionGraphs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Schema.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Schema);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (tableDefinitions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TableDefinitions);
      }
      tableDefinitionGraphs_.WriteTo(output, _repeated_tableDefinitionGraphs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (tableDefinitions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinitions);
      }
      size += tableDefinitionGraphs_.CalculateSize(_repeated_tableDefinitionGraphs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.tableDefinitions_ != null) {
        if (tableDefinitions_ == null) {
          tableDefinitions_ = new global::Org.Roylance.Yaorm.TableDefinitions();
        }
        TableDefinitions.MergeFrom(other.TableDefinitions);
      }
      tableDefinitionGraphs_.Add(other.tableDefinitionGraphs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Schema = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (tableDefinitions_ == null) {
              tableDefinitions_ = new global::Org.Roylance.Yaorm.TableDefinitions();
            }
            input.ReadMessage(tableDefinitions_);
            break;
          }
          case 34: {
            tableDefinitionGraphs_.AddEntriesFrom(input, _repeated_tableDefinitionGraphs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableDefinitionGraph : pb::IMessage<TableDefinitionGraph> {
    private static readonly pb::MessageParser<TableDefinitionGraph> _parser = new pb::MessageParser<TableDefinitionGraph>(() => new TableDefinitionGraph());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableDefinitionGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitionGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitionGraph(TableDefinitionGraph other) : this() {
      MainTableDefinition = other.mainTableDefinition_ != null ? other.MainTableDefinition.Clone() : null;
      OtherTableDefinition = other.otherTableDefinition_ != null ? other.OtherTableDefinition.Clone() : null;
      LinkerTableTable = other.linkerTableTable_ != null ? other.LinkerTableTable.Clone() : null;
      definitionGraphType_ = other.definitionGraphType_;
      mainName_ = other.mainName_;
      otherName_ = other.otherName_;
      columnName_ = other.columnName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitionGraph Clone() {
      return new TableDefinitionGraph(this);
    }

    /// <summary>Field number for the "main_table_definition" field.</summary>
    public const int MainTableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.TableDefinition mainTableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition MainTableDefinition {
      get { return mainTableDefinition_; }
      set {
        mainTableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "other_table_definition" field.</summary>
    public const int OtherTableDefinitionFieldNumber = 2;
    private global::Org.Roylance.Yaorm.TableDefinition otherTableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition OtherTableDefinition {
      get { return otherTableDefinition_; }
      set {
        otherTableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "linker_table_table" field.</summary>
    public const int LinkerTableTableFieldNumber = 3;
    private global::Org.Roylance.Yaorm.TableDefinition linkerTableTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition LinkerTableTable {
      get { return linkerTableTable_; }
      set {
        linkerTableTable_ = value;
      }
    }

    /// <summary>Field number for the "definition_graph_type" field.</summary>
    public const int DefinitionGraphTypeFieldNumber = 4;
    private global::Org.Roylance.Yaorm.TableDefinitionGraph.Types.TableDefinitionGraphType definitionGraphType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinitionGraph.Types.TableDefinitionGraphType DefinitionGraphType {
      get { return definitionGraphType_; }
      set {
        definitionGraphType_ = value;
      }
    }

    /// <summary>Field number for the "main_name" field.</summary>
    public const int MainNameFieldNumber = 5;
    private string mainName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainName {
      get { return mainName_; }
      set {
        mainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "other_name" field.</summary>
    public const int OtherNameFieldNumber = 6;
    private string otherName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherName {
      get { return otherName_; }
      set {
        otherName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 7;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableDefinitionGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableDefinitionGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MainTableDefinition, other.MainTableDefinition)) return false;
      if (!object.Equals(OtherTableDefinition, other.OtherTableDefinition)) return false;
      if (!object.Equals(LinkerTableTable, other.LinkerTableTable)) return false;
      if (DefinitionGraphType != other.DefinitionGraphType) return false;
      if (MainName != other.MainName) return false;
      if (OtherName != other.OtherName) return false;
      if (ColumnName != other.ColumnName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mainTableDefinition_ != null) hash ^= MainTableDefinition.GetHashCode();
      if (otherTableDefinition_ != null) hash ^= OtherTableDefinition.GetHashCode();
      if (linkerTableTable_ != null) hash ^= LinkerTableTable.GetHashCode();
      if (DefinitionGraphType != 0) hash ^= DefinitionGraphType.GetHashCode();
      if (MainName.Length != 0) hash ^= MainName.GetHashCode();
      if (OtherName.Length != 0) hash ^= OtherName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mainTableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainTableDefinition);
      }
      if (otherTableDefinition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OtherTableDefinition);
      }
      if (linkerTableTable_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinkerTableTable);
      }
      if (DefinitionGraphType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DefinitionGraphType);
      }
      if (MainName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MainName);
      }
      if (OtherName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OtherName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ColumnName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mainTableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainTableDefinition);
      }
      if (otherTableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherTableDefinition);
      }
      if (linkerTableTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkerTableTable);
      }
      if (DefinitionGraphType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DefinitionGraphType);
      }
      if (MainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainName);
      }
      if (OtherName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableDefinitionGraph other) {
      if (other == null) {
        return;
      }
      if (other.mainTableDefinition_ != null) {
        if (mainTableDefinition_ == null) {
          mainTableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        MainTableDefinition.MergeFrom(other.MainTableDefinition);
      }
      if (other.otherTableDefinition_ != null) {
        if (otherTableDefinition_ == null) {
          otherTableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        OtherTableDefinition.MergeFrom(other.OtherTableDefinition);
      }
      if (other.linkerTableTable_ != null) {
        if (linkerTableTable_ == null) {
          linkerTableTable_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        LinkerTableTable.MergeFrom(other.LinkerTableTable);
      }
      if (other.DefinitionGraphType != 0) {
        DefinitionGraphType = other.DefinitionGraphType;
      }
      if (other.MainName.Length != 0) {
        MainName = other.MainName;
      }
      if (other.OtherName.Length != 0) {
        OtherName = other.OtherName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mainTableDefinition_ == null) {
              mainTableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(mainTableDefinition_);
            break;
          }
          case 18: {
            if (otherTableDefinition_ == null) {
              otherTableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(otherTableDefinition_);
            break;
          }
          case 26: {
            if (linkerTableTable_ == null) {
              linkerTableTable_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(linkerTableTable_);
            break;
          }
          case 32: {
            definitionGraphType_ = (global::Org.Roylance.Yaorm.TableDefinitionGraph.Types.TableDefinitionGraphType) input.ReadEnum();
            break;
          }
          case 42: {
            MainName = input.ReadString();
            break;
          }
          case 50: {
            OtherName = input.ReadString();
            break;
          }
          case 58: {
            ColumnName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TableDefinitionGraph message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TableDefinitionGraphType {
        [pbr::OriginalName("ENUM_TYPE")] EnumType = 0,
        [pbr::OriginalName("MESSAGE_TYPE")] MessageType = 1,
      }

    }
    #endregion

  }

  public sealed partial class TableDefinitionGraphs : pb::IMessage<TableDefinitionGraphs> {
    private static readonly pb::MessageParser<TableDefinitionGraphs> _parser = new pb::MessageParser<TableDefinitionGraphs>(() => new TableDefinitionGraphs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableDefinitionGraphs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitionGraphs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitionGraphs(TableDefinitionGraphs other) : this() {
      MainTableDefinition = other.mainTableDefinition_ != null ? other.MainTableDefinition.Clone() : null;
      tableDefinitionGraphs_ = other.tableDefinitionGraphs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableDefinitionGraphs Clone() {
      return new TableDefinitionGraphs(this);
    }

    /// <summary>Field number for the "main_table_definition" field.</summary>
    public const int MainTableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.TableDefinition mainTableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition MainTableDefinition {
      get { return mainTableDefinition_; }
      set {
        mainTableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "table_definition_graphs" field.</summary>
    public const int TableDefinitionGraphs_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.TableDefinitionGraph> _repeated_tableDefinitionGraphs_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.TableDefinitionGraph.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinitionGraph> tableDefinitionGraphs_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinitionGraph>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.TableDefinitionGraph> TableDefinitionGraphs_ {
      get { return tableDefinitionGraphs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableDefinitionGraphs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableDefinitionGraphs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MainTableDefinition, other.MainTableDefinition)) return false;
      if(!tableDefinitionGraphs_.Equals(other.tableDefinitionGraphs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mainTableDefinition_ != null) hash ^= MainTableDefinition.GetHashCode();
      hash ^= tableDefinitionGraphs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mainTableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainTableDefinition);
      }
      tableDefinitionGraphs_.WriteTo(output, _repeated_tableDefinitionGraphs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mainTableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainTableDefinition);
      }
      size += tableDefinitionGraphs_.CalculateSize(_repeated_tableDefinitionGraphs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableDefinitionGraphs other) {
      if (other == null) {
        return;
      }
      if (other.mainTableDefinition_ != null) {
        if (mainTableDefinition_ == null) {
          mainTableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        MainTableDefinition.MergeFrom(other.MainTableDefinition);
      }
      tableDefinitionGraphs_.Add(other.tableDefinitionGraphs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mainTableDefinition_ == null) {
              mainTableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(mainTableDefinition_);
            break;
          }
          case 18: {
            tableDefinitionGraphs_.AddEntriesFrom(input, _repeated_tableDefinitionGraphs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionInfo : pb::IMessage<ConnectionInfo> {
    private static readonly pb::MessageParser<ConnectionInfo> _parser = new pb::MessageParser<ConnectionInfo>(() => new ConnectionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionInfo(ConnectionInfo other) : this() {
      host_ = other.host_;
      user_ = other.user_;
      password_ = other.password_;
      schema_ = other.schema_;
      shouldCreateSchema_ = other.shouldCreateSchema_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionInfo Clone() {
      return new ConnectionInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 4;
    private string schema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "should_create_schema" field.</summary>
    public const int ShouldCreateSchemaFieldNumber = 5;
    private bool shouldCreateSchema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldCreateSchema {
      get { return shouldCreateSchema_; }
      set {
        shouldCreateSchema_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (User != other.User) return false;
      if (Password != other.Password) return false;
      if (Schema != other.Schema) return false;
      if (ShouldCreateSchema != other.ShouldCreateSchema) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      if (ShouldCreateSchema != false) hash ^= ShouldCreateSchema.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (User.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(User);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Schema.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Schema);
      }
      if (ShouldCreateSchema != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShouldCreateSchema);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (ShouldCreateSchema != false) {
        size += 1 + 1;
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      if (other.ShouldCreateSchema != false) {
        ShouldCreateSchema = other.ShouldCreateSchema;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 18: {
            User = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Schema = input.ReadString();
            break;
          }
          case 40: {
            ShouldCreateSchema = input.ReadBool();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Migration : pb::IMessage<Migration> {
    private static readonly pb::MessageParser<Migration> _parser = new pb::MessageParser<Migration>(() => new Migration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Migration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Migration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Migration(Migration other) : this() {
      id_ = other.id_;
      contextName_ = other.contextName_;
      modelDefinitionBase64_ = other.modelDefinitionBase64_;
      insertDate_ = other.insertDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Migration Clone() {
      return new Migration(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context_name" field.</summary>
    public const int ContextNameFieldNumber = 2;
    private string contextName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextName {
      get { return contextName_; }
      set {
        contextName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_definition_base64" field.</summary>
    public const int ModelDefinitionBase64FieldNumber = 3;
    private string modelDefinitionBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelDefinitionBase64 {
      get { return modelDefinitionBase64_; }
      set {
        modelDefinitionBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "insert_date" field.</summary>
    public const int InsertDateFieldNumber = 4;
    private long insertDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InsertDate {
      get { return insertDate_; }
      set {
        insertDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Migration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Migration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ContextName != other.ContextName) return false;
      if (ModelDefinitionBase64 != other.ModelDefinitionBase64) return false;
      if (InsertDate != other.InsertDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ContextName.Length != 0) hash ^= ContextName.GetHashCode();
      if (ModelDefinitionBase64.Length != 0) hash ^= ModelDefinitionBase64.GetHashCode();
      if (InsertDate != 0L) hash ^= InsertDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ContextName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextName);
      }
      if (ModelDefinitionBase64.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelDefinitionBase64);
      }
      if (InsertDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(InsertDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ContextName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextName);
      }
      if (ModelDefinitionBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelDefinitionBase64);
      }
      if (InsertDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InsertDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Migration other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ContextName.Length != 0) {
        ContextName = other.ContextName;
      }
      if (other.ModelDefinitionBase64.Length != 0) {
        ModelDefinitionBase64 = other.ModelDefinitionBase64;
      }
      if (other.InsertDate != 0L) {
        InsertDate = other.InsertDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ContextName = input.ReadString();
            break;
          }
          case 26: {
            ModelDefinitionBase64 = input.ReadString();
            break;
          }
          case 32: {
            InsertDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatabaseExecutionReport : pb::IMessage<DatabaseExecutionReport> {
    private static readonly pb::MessageParser<DatabaseExecutionReport> _parser = new pb::MessageParser<DatabaseExecutionReport>(() => new DatabaseExecutionReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseExecutionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseExecutionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseExecutionReport(DatabaseExecutionReport other) : this() {
      callsToDatabase_ = other.callsToDatabase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseExecutionReport Clone() {
      return new DatabaseExecutionReport(this);
    }

    /// <summary>Field number for the "calls_to_database" field.</summary>
    public const int CallsToDatabaseFieldNumber = 1;
    private long callsToDatabase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallsToDatabase {
      get { return callsToDatabase_; }
      set {
        callsToDatabase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseExecutionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseExecutionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallsToDatabase != other.CallsToDatabase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallsToDatabase != 0L) hash ^= CallsToDatabase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallsToDatabase != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CallsToDatabase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallsToDatabase != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallsToDatabase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseExecutionReport other) {
      if (other == null) {
        return;
      }
      if (other.CallsToDatabase != 0L) {
        CallsToDatabase = other.CallsToDatabase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CallsToDatabase = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  projection api
  /// </summary>
  public sealed partial class JoinKey : pb::IMessage<JoinKey> {
    private static readonly pb::MessageParser<JoinKey> _parser = new pb::MessageParser<JoinKey>(() => new JoinKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinKey(JoinKey other) : this() {
      First = other.first_ != null ? other.First.Clone() : null;
      Second = other.second_ != null ? other.Second.Clone() : null;
      Third = other.third_ != null ? other.Third.Clone() : null;
      Fourth = other.fourth_ != null ? other.Fourth.Clone() : null;
      Fifth = other.fifth_ != null ? other.Fifth.Clone() : null;
      Sixth = other.sixth_ != null ? other.Sixth.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinKey Clone() {
      return new JoinKey(this);
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 1;
    private global::Org.Roylance.Yaorm.ColumnDefinition first_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 2;
    private global::Org.Roylance.Yaorm.ColumnDefinition second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 3;
    private global::Org.Roylance.Yaorm.ColumnDefinition third_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    /// <summary>Field number for the "fourth" field.</summary>
    public const int FourthFieldNumber = 4;
    private global::Org.Roylance.Yaorm.ColumnDefinition fourth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition Fourth {
      get { return fourth_; }
      set {
        fourth_ = value;
      }
    }

    /// <summary>Field number for the "fifth" field.</summary>
    public const int FifthFieldNumber = 5;
    private global::Org.Roylance.Yaorm.ColumnDefinition fifth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition Fifth {
      get { return fifth_; }
      set {
        fifth_ = value;
      }
    }

    /// <summary>Field number for the "sixth" field.</summary>
    public const int SixthFieldNumber = 6;
    private global::Org.Roylance.Yaorm.ColumnDefinition sixth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ColumnDefinition Sixth {
      get { return sixth_; }
      set {
        sixth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(First, other.First)) return false;
      if (!object.Equals(Second, other.Second)) return false;
      if (!object.Equals(Third, other.Third)) return false;
      if (!object.Equals(Fourth, other.Fourth)) return false;
      if (!object.Equals(Fifth, other.Fifth)) return false;
      if (!object.Equals(Sixth, other.Sixth)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (first_ != null) hash ^= First.GetHashCode();
      if (second_ != null) hash ^= Second.GetHashCode();
      if (third_ != null) hash ^= Third.GetHashCode();
      if (fourth_ != null) hash ^= Fourth.GetHashCode();
      if (fifth_ != null) hash ^= Fifth.GetHashCode();
      if (sixth_ != null) hash ^= Sixth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (first_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(First);
      }
      if (second_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Second);
      }
      if (third_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Third);
      }
      if (fourth_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Fourth);
      }
      if (fifth_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Fifth);
      }
      if (sixth_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Sixth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (first_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(First);
      }
      if (second_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Second);
      }
      if (third_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Third);
      }
      if (fourth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fourth);
      }
      if (fifth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fifth);
      }
      if (sixth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sixth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinKey other) {
      if (other == null) {
        return;
      }
      if (other.first_ != null) {
        if (first_ == null) {
          first_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        First.MergeFrom(other.First);
      }
      if (other.second_ != null) {
        if (second_ == null) {
          second_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        Second.MergeFrom(other.Second);
      }
      if (other.third_ != null) {
        if (third_ == null) {
          third_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        Third.MergeFrom(other.Third);
      }
      if (other.fourth_ != null) {
        if (fourth_ == null) {
          fourth_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        Fourth.MergeFrom(other.Fourth);
      }
      if (other.fifth_ != null) {
        if (fifth_ == null) {
          fifth_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        Fifth.MergeFrom(other.Fifth);
      }
      if (other.sixth_ != null) {
        if (sixth_ == null) {
          sixth_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
        }
        Sixth.MergeFrom(other.Sixth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (first_ == null) {
              first_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(first_);
            break;
          }
          case 18: {
            if (second_ == null) {
              second_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(second_);
            break;
          }
          case 26: {
            if (third_ == null) {
              third_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(third_);
            break;
          }
          case 34: {
            if (fourth_ == null) {
              fourth_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(fourth_);
            break;
          }
          case 42: {
            if (fifth_ == null) {
              fifth_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(fifth_);
            break;
          }
          case 50: {
            if (sixth_ == null) {
              sixth_ = new global::Org.Roylance.Yaorm.ColumnDefinition();
            }
            input.ReadMessage(sixth_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinDefinition : pb::IMessage<JoinDefinition> {
    private static readonly pb::MessageParser<JoinDefinition> _parser = new pb::MessageParser<JoinDefinition>(() => new JoinDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinDefinition(JoinDefinition other) : this() {
      Table = other.table_ != null ? other.Table.Clone() : null;
      Key = other.key_ != null ? other.Key.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinDefinition Clone() {
      return new JoinDefinition(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    private global::Org.Roylance.Yaorm.TableDefinition table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private global::Org.Roylance.Yaorm.JoinKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.JoinKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Table, other.Table)) return false;
      if (!object.Equals(Key, other.Key)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (table_ != null) hash ^= Table.GetHashCode();
      if (key_ != null) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (table_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
      if (key_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinDefinition other) {
      if (other == null) {
        return;
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        Table.MergeFrom(other.Table);
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Org.Roylance.Yaorm.JoinKey();
        }
        Key.MergeFrom(other.Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (table_ == null) {
              table_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(table_);
            break;
          }
          case 18: {
            if (key_ == null) {
              key_ = new global::Org.Roylance.Yaorm.JoinKey();
            }
            input.ReadMessage(key_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Join : pb::IMessage<Join> {
    private static readonly pb::MessageParser<Join> _parser = new pb::MessageParser<Join>(() => new Join());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Join> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join(Join other) : this() {
      joinDefinitions_ = other.joinDefinitions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join Clone() {
      return new Join(this);
    }

    /// <summary>Field number for the "join_definitions" field.</summary>
    public const int JoinDefinitionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.JoinDefinition> _repeated_joinDefinitions_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.JoinDefinition.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.JoinDefinition> joinDefinitions_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.JoinDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.JoinDefinition> JoinDefinitions {
      get { return joinDefinitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Join);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Join other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!joinDefinitions_.Equals(other.joinDefinitions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= joinDefinitions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      joinDefinitions_.WriteTo(output, _repeated_joinDefinitions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += joinDefinitions_.CalculateSize(_repeated_joinDefinitions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Join other) {
      if (other == null) {
        return;
      }
      joinDefinitions_.Add(other.joinDefinitions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            joinDefinitions_.AddEntriesFrom(input, _repeated_joinDefinitions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIYaormRequest : pb::IMessage<UIYaormRequest> {
    private static readonly pb::MessageParser<UIYaormRequest> _parser = new pb::MessageParser<UIYaormRequest>(() => new UIYaormRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIYaormRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaormRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaormRequest(UIYaormRequest other) : this() {
      token_ = other.token_;
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
      Records = other.records_ != null ? other.Records.Clone() : null;
      ConnectionInfo = other.connectionInfo_ != null ? other.ConnectionInfo.Clone() : null;
      WhereClause = other.whereClause_ != null ? other.WhereClause.Clone() : null;
      limit_ = other.limit_;
      offset_ = other.offset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaormRequest Clone() {
      return new UIYaormRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 2;
    private global::Org.Roylance.Yaorm.TableDefinition tableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Records records_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Records Records {
      get { return records_; }
      set {
        records_ = value;
      }
    }

    /// <summary>Field number for the "connection_info" field.</summary>
    public const int ConnectionInfoFieldNumber = 4;
    private global::Org.Roylance.Yaorm.ConnectionInfo connectionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.ConnectionInfo ConnectionInfo {
      get { return connectionInfo_; }
      set {
        connectionInfo_ = value;
      }
    }

    /// <summary>Field number for the "where_clause" field.</summary>
    public const int WhereClauseFieldNumber = 5;
    private global::Org.Roylance.Yaorm.WhereClause whereClause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.WhereClause WhereClause {
      get { return whereClause_; }
      set {
        whereClause_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 7;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIYaormRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIYaormRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      if (!object.Equals(Records, other.Records)) return false;
      if (!object.Equals(ConnectionInfo, other.ConnectionInfo)) return false;
      if (!object.Equals(WhereClause, other.WhereClause)) return false;
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      if (records_ != null) hash ^= Records.GetHashCode();
      if (connectionInfo_ != null) hash ^= ConnectionInfo.GetHashCode();
      if (whereClause_ != null) hash ^= WhereClause.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (tableDefinition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TableDefinition);
      }
      if (records_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Records);
      }
      if (connectionInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConnectionInfo);
      }
      if (whereClause_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WhereClause);
      }
      if (Limit != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Limit);
      }
      if (Offset != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      if (records_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Records);
      }
      if (connectionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionInfo);
      }
      if (whereClause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClause);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIYaormRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
      if (other.records_ != null) {
        if (records_ == null) {
          records_ = new global::Org.Roylance.Yaorm.Records();
        }
        Records.MergeFrom(other.Records);
      }
      if (other.connectionInfo_ != null) {
        if (connectionInfo_ == null) {
          connectionInfo_ = new global::Org.Roylance.Yaorm.ConnectionInfo();
        }
        ConnectionInfo.MergeFrom(other.ConnectionInfo);
      }
      if (other.whereClause_ != null) {
        if (whereClause_ == null) {
          whereClause_ = new global::Org.Roylance.Yaorm.WhereClause();
        }
        WhereClause.MergeFrom(other.WhereClause);
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
          case 26: {
            if (records_ == null) {
              records_ = new global::Org.Roylance.Yaorm.Records();
            }
            input.ReadMessage(records_);
            break;
          }
          case 34: {
            if (connectionInfo_ == null) {
              connectionInfo_ = new global::Org.Roylance.Yaorm.ConnectionInfo();
            }
            input.ReadMessage(connectionInfo_);
            break;
          }
          case 42: {
            if (whereClause_ == null) {
              whereClause_ = new global::Org.Roylance.Yaorm.WhereClause();
            }
            input.ReadMessage(whereClause_);
            break;
          }
          case 48: {
            Limit = input.ReadInt64();
            break;
          }
          case 56: {
            Offset = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIYaormResponse : pb::IMessage<UIYaormResponse> {
    private static readonly pb::MessageParser<UIYaormResponse> _parser = new pb::MessageParser<UIYaormResponse>(() => new UIYaormResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIYaormResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.YaormModelReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaormResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaormResponse(UIYaormResponse other) : this() {
      Records = other.records_ != null ? other.Records.Clone() : null;
      schemas_ = other.schemas_.Clone();
      tables_ = other.tables_.Clone();
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
      TableDefinitions = other.tableDefinitions_ != null ? other.TableDefinitions.Clone() : null;
      recordCount_ = other.recordCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYaormResponse Clone() {
      return new UIYaormResponse(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Records records_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.Records Records {
      get { return records_; }
      set {
        records_ = value;
      }
    }

    /// <summary>Field number for the "schemas" field.</summary>
    public const int SchemasFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_schemas_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> schemas_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Schemas {
      get { return schemas_; }
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tables_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tables_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tables {
      get { return tables_; }
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 4;
    private global::Org.Roylance.Yaorm.TableDefinition tableDefinition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "table_definitions" field.</summary>
    public const int TableDefinitionsFieldNumber = 5;
    private global::Org.Roylance.Yaorm.TableDefinitions tableDefinitions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yaorm.TableDefinitions TableDefinitions {
      get { return tableDefinitions_; }
      set {
        tableDefinitions_ = value;
      }
    }

    /// <summary>Field number for the "record_count" field.</summary>
    public const int RecordCountFieldNumber = 6;
    private long recordCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecordCount {
      get { return recordCount_; }
      set {
        recordCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIYaormResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIYaormResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Records, other.Records)) return false;
      if(!schemas_.Equals(other.schemas_)) return false;
      if(!tables_.Equals(other.tables_)) return false;
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      if (!object.Equals(TableDefinitions, other.TableDefinitions)) return false;
      if (RecordCount != other.RecordCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (records_ != null) hash ^= Records.GetHashCode();
      hash ^= schemas_.GetHashCode();
      hash ^= tables_.GetHashCode();
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      if (tableDefinitions_ != null) hash ^= TableDefinitions.GetHashCode();
      if (RecordCount != 0L) hash ^= RecordCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (records_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Records);
      }
      schemas_.WriteTo(output, _repeated_schemas_codec);
      tables_.WriteTo(output, _repeated_tables_codec);
      if (tableDefinition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TableDefinition);
      }
      if (tableDefinitions_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TableDefinitions);
      }
      if (RecordCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RecordCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (records_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Records);
      }
      size += schemas_.CalculateSize(_repeated_schemas_codec);
      size += tables_.CalculateSize(_repeated_tables_codec);
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      if (tableDefinitions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinitions);
      }
      if (RecordCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecordCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIYaormResponse other) {
      if (other == null) {
        return;
      }
      if (other.records_ != null) {
        if (records_ == null) {
          records_ = new global::Org.Roylance.Yaorm.Records();
        }
        Records.MergeFrom(other.Records);
      }
      schemas_.Add(other.schemas_);
      tables_.Add(other.tables_);
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
      if (other.tableDefinitions_ != null) {
        if (tableDefinitions_ == null) {
          tableDefinitions_ = new global::Org.Roylance.Yaorm.TableDefinitions();
        }
        TableDefinitions.MergeFrom(other.TableDefinitions);
      }
      if (other.RecordCount != 0L) {
        RecordCount = other.RecordCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (records_ == null) {
              records_ = new global::Org.Roylance.Yaorm.Records();
            }
            input.ReadMessage(records_);
            break;
          }
          case 18: {
            schemas_.AddEntriesFrom(input, _repeated_schemas_codec);
            break;
          }
          case 26: {
            tables_.AddEntriesFrom(input, _repeated_tables_codec);
            break;
          }
          case 34: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
          case 42: {
            if (tableDefinitions_ == null) {
              tableDefinitions_ = new global::Org.Roylance.Yaorm.TableDefinitions();
            }
            input.ReadMessage(tableDefinitions_);
            break;
          }
          case 48: {
            RecordCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
