// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YaormModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Roylance.Yaorm.Models {

  /// <summary>Holder for reflection information generated from YaormModel.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class YaormModelReflection {

    #region Descriptor
    /// <summary>File descriptor for YaormModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YaormModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBZYW9ybU1vZGVsLnByb3RvEhlvcmcucm95bGFuY2UueWFvcm0ubW9kZWxz",
            "Iq4DCgtXaGVyZUNsYXVzZRI8ChFuYW1lX2FuZF9wcm9wZXJ0eRgBIAEoCzIh",
            "Lm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuQ29sdW1uEkoKDW9wZXJhdG9y",
            "X3R5cGUYAiABKA4yMy5vcmcucm95bGFuY2UueWFvcm0ubW9kZWxzLldoZXJl",
            "Q2xhdXNlLk9wZXJhdG9yVHlwZRJRChFjb25uZWN0aW5nX2FuZF9vchgDIAEo",
            "DjI2Lm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuV2hlcmVDbGF1c2UuQ29u",
            "bmVjdGluZ0FuZE9yEkcKF2Nvbm5lY3Rpbmdfd2hlcmVfY2xhdXNlGAQgASgL",
            "MiYub3JnLnJveWxhbmNlLnlhb3JtLm1vZGVscy5XaGVyZUNsYXVzZSJLCgxP",
            "cGVyYXRvclR5cGUSCgoGRVFVQUxTEAASEAoMR1JFQVRFUl9USEFOEAESDQoJ",
            "TEVTU19USEFOEAISDgoKTk9UX0VRVUFMUxADIiwKD0Nvbm5lY3RpbmdBbmRP",
            "chIICgROT05FEAASBwoDQU5EEAESBgoCT1IQAiKHAwoQQ29sdW1uRGVmaW5p",
            "dGlvbhIMCgRuYW1lGAEgASgJEjUKBHR5cGUYAiABKA4yJy5vcmcucm95bGFu",
            "Y2UueWFvcm0ubW9kZWxzLlByb3RvYnVmVHlwZRIOCgZpc19rZXkYAyABKAgS",
            "SwoLY29sdW1uX3R5cGUYBCABKA4yNi5vcmcucm95bGFuY2UueWFvcm0ubW9k",
            "ZWxzLkNvbHVtbkRlZmluaXRpb24uQ29sdW1uVHlwZRJLCgtsaW5rZXJfdHlw",
            "ZRgFIAEoDjI2Lm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuQ29sdW1uRGVm",
            "aW5pdGlvbi5MaW5rZXJUeXBlIkgKCkNvbHVtblR5cGUSCgoGU0NBTEFSEAAS",
            "DQoJRU5VTV9OQU1FEAESDgoKRU5VTV9WQUxVRRACEg8KC01FU1NBR0VfS0VZ",
            "EAMiOgoKTGlua2VyVHlwZRIICgROT05FEAASCgoGUEFSRU5UEAESCQoFQ0hJ",
            "TEQQAhILCgdORUlUSEVSEAMi3gIKBUluZGV4EkcKDGNvbHVtbl9uYW1lcxgB",
            "IAMoCzIxLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuSW5kZXguQ29sdW1u",
            "TmFtZXNFbnRyeRJJCg1pbmNsdWRlX25hbWVzGAIgAygLMjIub3JnLnJveWxh",
            "bmNlLnlhb3JtLm1vZGVscy5JbmRleC5JbmNsdWRlTmFtZXNFbnRyeRpfChBD",
            "b2x1bW5OYW1lc0VudHJ5EgsKA2tleRgBIAEoCRI6CgV2YWx1ZRgCIAEoCzIr",
            "Lm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuQ29sdW1uRGVmaW5pdGlvbjoC",
            "OAEaYAoRSW5jbHVkZU5hbWVzRW50cnkSCwoDa2V5GAEgASgJEjoKBXZhbHVl",
            "GAIgASgLMisub3JnLnJveWxhbmNlLnlhb3JtLm1vZGVscy5Db2x1bW5EZWZp",
            "bml0aW9uOgI4ASK5AwoKRGlmZmVyZW5jZRJFCgtlbnRpdHlfdHlwZRgBIAEo",
            "DjIwLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuRGlmZmVyZW5jZS5FbnRp",
            "dHlUeXBlEkIKCW9wZXJhdGlvbhgCIAEoDjIvLm9yZy5yb3lsYW5jZS55YW9y",
            "bS5tb2RlbHMuRGlmZmVyZW5jZS5PcGVyYXRpb24SDAoEbmFtZRgDIAEoCRIv",
            "CgVpbmRleBgEIAEoCzIgLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuSW5k",
            "ZXgSSAoTcHJvcGVydHlfZGVmaW5pdGlvbhgFIAEoCzIrLm9yZy5yb3lsYW5j",
            "ZS55YW9ybS5tb2RlbHMuQ29sdW1uRGVmaW5pdGlvbhJEChB0YWJsZV9kZWZp",
            "bml0aW9uGAYgASgLMioub3JnLnJveWxhbmNlLnlhb3JtLm1vZGVscy5UYWJs",
            "ZURlZmluaXRpb24iLgoKRW50aXR5VHlwZRIJCgVJTkRFWBAAEgoKBkNPTFVN",
            "ThABEgkKBVRBQkxFEAIiIQoJT3BlcmF0aW9uEgoKBkNSRUFURRAAEggKBERS",
            "T1AQASKeAwoPVGFibGVEZWZpbml0aW9uEgwKBG5hbWUYASABKAkSXQoSY29s",
            "dW1uX2RlZmluaXRpb25zGAIgAygLMkEub3JnLnJveWxhbmNlLnlhb3JtLm1v",
            "ZGVscy5UYWJsZURlZmluaXRpb24uQ29sdW1uRGVmaW5pdGlvbnNFbnRyeRIv",
            "CgVpbmRleBgDIAEoCzIgLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuSW5k",
            "ZXgSSAoKdGFibGVfdHlwZRgEIAEoDjI0Lm9yZy5yb3lsYW5jZS55YW9ybS5t",
            "b2RlbHMuVGFibGVEZWZpbml0aW9uLlRhYmxlVHlwZRplChZDb2x1bW5EZWZp",
            "bml0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRI6CgV2YWx1ZRgCIAEoCzIrLm9y",
            "Zy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuQ29sdW1uRGVmaW5pdGlvbjoCOAEi",
            "PAoJVGFibGVUeXBlEgoKBk5PUk1BTBAAEhIKDkxJTktFUl9NRVNTQUdFEAES",
            "DwoLTElOS0VSX0VOVU0QAiLVAQoQVGFibGVEZWZpbml0aW9ucxJcChF0YWJs",
            "ZV9kZWZpbml0aW9ucxgBIAMoCzJBLm9yZy5yb3lsYW5jZS55YW9ybS5tb2Rl",
            "bHMuVGFibGVEZWZpbml0aW9ucy5UYWJsZURlZmluaXRpb25zRW50cnkaYwoV",
            "VGFibGVEZWZpbml0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRI5CgV2YWx1ZRgC",
            "IAEoCzIqLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuVGFibGVEZWZpbml0",
            "aW9uOgI4ASJoChBEaWZmZXJlbmNlUmVwb3J0EhgKEG1pZ3JhdGlvbl9leGlz",
            "dHMYASABKAgSOgoLZGlmZmVyZW5jZXMYAiADKAsyJS5vcmcucm95bGFuY2Uu",
            "eWFvcm0ubW9kZWxzLkRpZmZlcmVuY2UiogMKBkNvbHVtbhI/CgpkZWZpbml0",
            "aW9uGAEgASgLMisub3JnLnJveWxhbmNlLnlhb3JtLm1vZGVscy5Db2x1bW5E",
            "ZWZpbml0aW9uEhUKDWRvdWJsZV9ob2xkZXIYAiABKAESFAoMZmxvYXRfaG9s",
            "ZGVyGAMgASgCEhQKDGludDMyX2hvbGRlchgEIAEoBRIUCgxpbnQ2NF9ob2xk",
            "ZXIYBSABKAMSFQoNdWludDMyX2hvbGRlchgGIAEoDRIVCg11aW50NjRfaG9s",
            "ZGVyGAcgASgEEhUKDXNpbnQzMl9ob2xkZXIYCCABKBESFQoNc2ludDY0X2hv",
            "bGRlchgJIAEoEhIWCg5maXhlZDMyX2hvbGRlchgKIAEoBxIWCg5maXhlZDY0",
            "X2hvbGRlchgLIAEoBhIXCg9zZml4ZWQzMl9ob2xkZXIYDCABKA8SFwoPc2Zp",
            "eGVkNjRfaG9sZGVyGA0gASgQEhMKC2Jvb2xfaG9sZGVyGA4gASgIEhUKDXN0",
            "cmluZ19ob2xkZXIYDyABKAkSFAoMYnl0ZXNfaG9sZGVyGBAgASgMIpwBCgZS",
            "ZWNvcmQSPwoHY29sdW1ucxgBIAMoCzIuLm9yZy5yb3lsYW5jZS55YW9ybS5t",
            "b2RlbHMuUmVjb3JkLkNvbHVtbnNFbnRyeRpRCgxDb2x1bW5zRW50cnkSCwoD",
            "a2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEub3JnLnJveWxhbmNlLnlhb3Jt",
            "Lm1vZGVscy5Db2x1bW46AjgBIj0KB1JlY29yZHMSMgoHcmVjb3JkcxgBIAMo",
            "CzIhLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuUmVjb3JkIrcBCgxUYWJs",
            "ZVJlY29yZHMSRAoQdGFibGVfZGVmaW5pdGlvbhgBIAEoCzIqLm9yZy5yb3ls",
            "YW5jZS55YW9ybS5tb2RlbHMuVGFibGVEZWZpbml0aW9uEjMKB3JlY29yZHMY",
            "AiABKAsyIi5vcmcucm95bGFuY2UueWFvcm0ubW9kZWxzLlJlY29yZHMSEgoK",
            "dGFibGVfbmFtZRgDIAEoCRIYChBrbm93bl9wYXJlbnRfaWRzGAQgAygJIsQB",
            "Cg9BbGxUYWJsZVJlY29yZHMSUwoNdGFibGVfcmVjb3JkcxgBIAMoCzI8Lm9y",
            "Zy5yb3lsYW5jZS55YW9ybS5tb2RlbHMuQWxsVGFibGVSZWNvcmRzLlRhYmxl",
            "UmVjb3Jkc0VudHJ5GlwKEVRhYmxlUmVjb3Jkc0VudHJ5EgsKA2tleRgBIAEo",
            "CRI2CgV2YWx1ZRgCIAEoCzInLm9yZy5yb3lsYW5jZS55YW9ybS5tb2RlbHMu",
            "VGFibGVSZWNvcmRzOgI4ASL5BQoRRGF0YWJhc2VPcGVyYXRpb24SRAoQdGFi",
            "bGVfZGVmaW5pdGlvbhgBIAEoCzIqLm9yZy5yb3lsYW5jZS55YW9ybS5tb2Rl",
            "bHMuVGFibGVEZWZpbml0aW9uEjMKB3JlY29yZHMYAiABKAsyIi5vcmcucm95",
            "bGFuY2UueWFvcm0ubW9kZWxzLlJlY29yZHMSLwoFaW5kZXgYAyABKAsyIC5v",
            "cmcucm95bGFuY2UueWFvcm0ubW9kZWxzLkluZGV4EkYKEWNvbHVtbl9kZWZp",
            "bml0aW9uGAQgASgLMisub3JnLnJveWxhbmNlLnlhb3JtLm1vZGVscy5Db2x1",
            "bW5EZWZpbml0aW9uEjwKDHdoZXJlX2NsYXVzZRgFIAEoCzImLm9yZy5yb3ls",
            "YW5jZS55YW9ybS5tb2RlbHMuV2hlcmVDbGF1c2USYwoXZGF0YWJhc2Vfb3Bl",
            "cmF0aW9uX3R5cGUYBiABKA4yQi5vcmcucm95bGFuY2UueWFvcm0ubW9kZWxz",
            "LkRhdGFiYXNlT3BlcmF0aW9uLkRhdGFiYXNlT3BlcmF0aW9uVHlwZSLMAgoV",
            "RGF0YWJhc2VPcGVyYXRpb25UeXBlEhAKDENSRUFURV9UQUJMRRAAEg4KCkRS",
            "T1BfVEFCTEUQARIQCgxDUkVBVEVfSU5ERVgQAhIOCgpEUk9QX0lOREVYEAMS",
            "EQoNQ1JFQVRFX0NPTFVNThAEEg8KC0RST1BfQ09MVU1OEAUSDQoJR0VUX0NP",
            "VU5UEAYSDgoKR0VUX0NVU1RPTRAHEgcKA0dFVBAIEgwKCEdFVF9NQU5ZEAkS",
            "DQoJR0VUX1dIRVJFEAoSDwoLQlVMS19JTlNFUlQQCxIUChBDUkVBVEVfT1Jf",
            "VVBEQVRFEAwSCgoGQ1JFQVRFEA0SCgoGVVBEQVRFEA4SGAoUVVBEQVRFX1dJ",
            "VEhfQ1JJVEVSSUEQDxIRCg1VUERBVEVfQ1VTVE9NEBASCgoGREVMRVRFEBES",
            "DgoKREVMRVRFX0FMTBASIpsCChdEYXRhYmFzZU9wZXJhdGlvblJlc3VsdBIT",
            "Cgtib29sX3Jlc3VsdBgBIAEoCBIUCgxjb3VudF9yZXN1bHQYAiABKAMSOAoN",
            "cmVjb3JkX3Jlc3VsdBgDIAEoCzIhLm9yZy5yb3lsYW5jZS55YW9ybS5tb2Rl",
            "bHMuUmVjb3JkEjoKDnJlY29yZHNfcmVzdWx0GAQgASgLMiIub3JnLnJveWxh",
            "bmNlLnlhb3JtLm1vZGVscy5SZWNvcmRzEhUKDWVycm9yX21lc3NhZ2UYBSAB",
            "KAkSSAoSZGF0YWJhc2Vfb3BlcmF0aW9uGAYgASgLMiwub3JnLnJveWxhbmNl",
            "Lnlhb3JtLm1vZGVscy5EYXRhYmFzZU9wZXJhdGlvbiLNAQoSRGF0YWJhc2VE",
            "ZWZpbml0aW9uEg4KBnNjaGVtYRgBIAEoCRIMCgRuYW1lGAIgASgJEkYKEXRh",
            "YmxlX2RlZmluaXRpb25zGAMgASgLMisub3JnLnJveWxhbmNlLnlhb3JtLm1v",
            "ZGVscy5UYWJsZURlZmluaXRpb25zElEKF3RhYmxlX2RlZmluaXRpb25fZ3Jh",
            "cGhzGAQgAygLMjAub3JnLnJveWxhbmNlLnlhb3JtLm1vZGVscy5UYWJsZURl",
            "ZmluaXRpb25HcmFwaHMi1wMKFFRhYmxlRGVmaW5pdGlvbkdyYXBoEkkKFW1h",
            "aW5fdGFibGVfZGVmaW5pdGlvbhgBIAEoCzIqLm9yZy5yb3lsYW5jZS55YW9y",
            "bS5tb2RlbHMuVGFibGVEZWZpbml0aW9uEkoKFm90aGVyX3RhYmxlX2RlZmlu",
            "aXRpb24YAiABKAsyKi5vcmcucm95bGFuY2UueWFvcm0ubW9kZWxzLlRhYmxl",
            "RGVmaW5pdGlvbhJGChJsaW5rZXJfdGFibGVfdGFibGUYAyABKAsyKi5vcmcu",
            "cm95bGFuY2UueWFvcm0ubW9kZWxzLlRhYmxlRGVmaW5pdGlvbhJnChVkZWZp",
            "bml0aW9uX2dyYXBoX3R5cGUYBCABKA4ySC5vcmcucm95bGFuY2UueWFvcm0u",
            "bW9kZWxzLlRhYmxlRGVmaW5pdGlvbkdyYXBoLlRhYmxlRGVmaW5pdGlvbkdy",
            "YXBoVHlwZRIRCgltYWluX25hbWUYBSABKAkSEgoKb3RoZXJfbmFtZRgGIAEo",
            "CRITCgtjb2x1bW5fbmFtZRgHIAEoCSI7ChhUYWJsZURlZmluaXRpb25HcmFw",
            "aFR5cGUSDQoJRU5VTV9UWVBFEAASEAoMTUVTU0FHRV9UWVBFEAEitAEKFVRh",
            "YmxlRGVmaW5pdGlvbkdyYXBocxJJChVtYWluX3RhYmxlX2RlZmluaXRpb24Y",
            "ASABKAsyKi5vcmcucm95bGFuY2UueWFvcm0ubW9kZWxzLlRhYmxlRGVmaW5p",
            "dGlvbhJQChd0YWJsZV9kZWZpbml0aW9uX2dyYXBocxgCIAMoCzIvLm9yZy5y",
            "b3lsYW5jZS55YW9ybS5tb2RlbHMuVGFibGVEZWZpbml0aW9uR3JhcGgiTgoO",
            "Q29ubmVjdGlvbkluZm8SDAoEaG9zdBgBIAEoCRIMCgR1c2VyGAIgASgJEhAK",
            "CHBhc3N3b3JkGAMgASgJEg4KBnNjaGVtYRgEIAEoCSrXAQoMUHJvdG9idWZU",
            "eXBlEggKBE5PTkUQABIKCgZET1VCTEUQARIJCgVGTE9BVBACEgkKBUlOVDMy",
            "EAMSCQoFSU5UNjQQBBIKCgZVSU5UMzIQBRIKCgZVSU5UNjQQBhIKCgZTSU5U",
            "MzIQBxIKCgZTSU5UNjQQCBILCgdGSVhFRDMyEAkSCwoHRklYRUQ2NBAKEgwK",
            "CFNGSVhFRDMyEAsSDAoIU0ZJWEVENjQQDBIICgRCT09MEA0SCgoGU1RSSU5H",
            "EA4SCQoFQllURVMQDxIJCgVQUk9UTxAQYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::Org.Roylance.Yaorm.Models.ProtobufType), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.WhereClause), global::Org.Roylance.Yaorm.Models.WhereClause.Parser, new[]{ "NameAndProperty", "OperatorType", "ConnectingAndOr", "ConnectingWhereClause" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType), typeof(global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.ColumnDefinition), global::Org.Roylance.Yaorm.Models.ColumnDefinition.Parser, new[]{ "Name", "Type", "IsKey", "ColumnType", "LinkerType" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType), typeof(global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.Index), global::Org.Roylance.Yaorm.Models.Index.Parser, new[]{ "ColumnNames", "IncludeNames" }, null, null, new pbr::GeneratedCodeInfo[] { null, null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.Difference), global::Org.Roylance.Yaorm.Models.Difference.Parser, new[]{ "EntityType", "Operation", "Name", "Index", "PropertyDefinition", "TableDefinition" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType), typeof(global::Org.Roylance.Yaorm.Models.Difference.Types.Operation) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.TableDefinition), global::Org.Roylance.Yaorm.Models.TableDefinition.Parser, new[]{ "Name", "ColumnDefinitions", "Index", "TableType" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType) }, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.TableDefinitions), global::Org.Roylance.Yaorm.Models.TableDefinitions.Parser, new[]{ "TableDefinitions_" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.DifferenceReport), global::Org.Roylance.Yaorm.Models.DifferenceReport.Parser, new[]{ "MigrationExists", "Differences" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.Column), global::Org.Roylance.Yaorm.Models.Column.Parser, new[]{ "Definition", "DoubleHolder", "FloatHolder", "Int32Holder", "Int64Holder", "Uint32Holder", "Uint64Holder", "Sint32Holder", "Sint64Holder", "Fixed32Holder", "Fixed64Holder", "Sfixed32Holder", "Sfixed64Holder", "BoolHolder", "StringHolder", "BytesHolder" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.Record), global::Org.Roylance.Yaorm.Models.Record.Parser, new[]{ "Columns" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.Records), global::Org.Roylance.Yaorm.Models.Records.Parser, new[]{ "Records_" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.TableRecords), global::Org.Roylance.Yaorm.Models.TableRecords.Parser, new[]{ "TableDefinition", "Records", "TableName", "KnownParentIds" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.AllTableRecords), global::Org.Roylance.Yaorm.Models.AllTableRecords.Parser, new[]{ "TableRecords" }, null, null, new pbr::GeneratedCodeInfo[] { null, }),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.DatabaseOperation), global::Org.Roylance.Yaorm.Models.DatabaseOperation.Parser, new[]{ "TableDefinition", "Records", "Index", "ColumnDefinition", "WhereClause", "DatabaseOperationType" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.DatabaseOperationResult), global::Org.Roylance.Yaorm.Models.DatabaseOperationResult.Parser, new[]{ "BoolResult", "CountResult", "RecordResult", "RecordsResult", "ErrorMessage", "DatabaseOperation" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.DatabaseDefinition), global::Org.Roylance.Yaorm.Models.DatabaseDefinition.Parser, new[]{ "Schema", "Name", "TableDefinitions", "TableDefinitionGraphs" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.TableDefinitionGraph), global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Parser, new[]{ "MainTableDefinition", "OtherTableDefinition", "LinkerTableTable", "DefinitionGraphType", "MainName", "OtherName", "ColumnName" }, null, new[]{ typeof(global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs), global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs.Parser, new[]{ "MainTableDefinition", "TableDefinitionGraphs_" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Org.Roylance.Yaorm.Models.ConnectionInfo), global::Org.Roylance.Yaorm.Models.ConnectionInfo.Parser, new[]{ "Host", "User", "Password", "Schema" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ProtobufType {
    NONE = 0,
    DOUBLE = 1,
    FLOAT = 2,
    INT32 = 3,
    INT64 = 4,
    UINT32 = 5,
    UINT64 = 6,
    SINT32 = 7,
    SINT64 = 8,
    FIXED32 = 9,
    FIXED64 = 10,
    SFIXED32 = 11,
    SFIXED64 = 12,
    BOOL = 13,
    STRING = 14,
    BYTES = 15,
    PROTO = 16,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WhereClause : pb::IMessage<WhereClause> {
    private static readonly pb::MessageParser<WhereClause> _parser = new pb::MessageParser<WhereClause>(() => new WhereClause());
    public static pb::MessageParser<WhereClause> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public WhereClause() {
      OnConstruction();
    }

    partial void OnConstruction();

    public WhereClause(WhereClause other) : this() {
      NameAndProperty = other.nameAndProperty_ != null ? other.NameAndProperty.Clone() : null;
      operatorType_ = other.operatorType_;
      connectingAndOr_ = other.connectingAndOr_;
      ConnectingWhereClause = other.connectingWhereClause_ != null ? other.ConnectingWhereClause.Clone() : null;
    }

    public WhereClause Clone() {
      return new WhereClause(this);
    }

    /// <summary>Field number for the "name_and_property" field.</summary>
    public const int NameAndPropertyFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.Column nameAndProperty_;
    public global::Org.Roylance.Yaorm.Models.Column NameAndProperty {
      get { return nameAndProperty_; }
      set {
        nameAndProperty_ = value;
      }
    }

    /// <summary>Field number for the "operator_type" field.</summary>
    public const int OperatorTypeFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType operatorType_ = global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType.EQUALS;
    public global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType OperatorType {
      get { return operatorType_; }
      set {
        operatorType_ = value;
      }
    }

    /// <summary>Field number for the "connecting_and_or" field.</summary>
    public const int ConnectingAndOrFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr connectingAndOr_ = global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr.NONE;
    public global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr ConnectingAndOr {
      get { return connectingAndOr_; }
      set {
        connectingAndOr_ = value;
      }
    }

    /// <summary>Field number for the "connecting_where_clause" field.</summary>
    public const int ConnectingWhereClauseFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.WhereClause connectingWhereClause_;
    public global::Org.Roylance.Yaorm.Models.WhereClause ConnectingWhereClause {
      get { return connectingWhereClause_; }
      set {
        connectingWhereClause_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as WhereClause);
    }

    public bool Equals(WhereClause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameAndProperty, other.NameAndProperty)) return false;
      if (OperatorType != other.OperatorType) return false;
      if (ConnectingAndOr != other.ConnectingAndOr) return false;
      if (!object.Equals(ConnectingWhereClause, other.ConnectingWhereClause)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (nameAndProperty_ != null) hash ^= NameAndProperty.GetHashCode();
      if (OperatorType != global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType.EQUALS) hash ^= OperatorType.GetHashCode();
      if (ConnectingAndOr != global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr.NONE) hash ^= ConnectingAndOr.GetHashCode();
      if (connectingWhereClause_ != null) hash ^= ConnectingWhereClause.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (nameAndProperty_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NameAndProperty);
      }
      if (OperatorType != global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType.EQUALS) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OperatorType);
      }
      if (ConnectingAndOr != global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr.NONE) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ConnectingAndOr);
      }
      if (connectingWhereClause_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConnectingWhereClause);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (nameAndProperty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameAndProperty);
      }
      if (OperatorType != global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType.EQUALS) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperatorType);
      }
      if (ConnectingAndOr != global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr.NONE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectingAndOr);
      }
      if (connectingWhereClause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectingWhereClause);
      }
      return size;
    }

    public void MergeFrom(WhereClause other) {
      if (other == null) {
        return;
      }
      if (other.nameAndProperty_ != null) {
        if (nameAndProperty_ == null) {
          nameAndProperty_ = new global::Org.Roylance.Yaorm.Models.Column();
        }
        NameAndProperty.MergeFrom(other.NameAndProperty);
      }
      if (other.OperatorType != global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType.EQUALS) {
        OperatorType = other.OperatorType;
      }
      if (other.ConnectingAndOr != global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr.NONE) {
        ConnectingAndOr = other.ConnectingAndOr;
      }
      if (other.connectingWhereClause_ != null) {
        if (connectingWhereClause_ == null) {
          connectingWhereClause_ = new global::Org.Roylance.Yaorm.Models.WhereClause();
        }
        ConnectingWhereClause.MergeFrom(other.ConnectingWhereClause);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nameAndProperty_ == null) {
              nameAndProperty_ = new global::Org.Roylance.Yaorm.Models.Column();
            }
            input.ReadMessage(nameAndProperty_);
            break;
          }
          case 16: {
            operatorType_ = (global::Org.Roylance.Yaorm.Models.WhereClause.Types.OperatorType) input.ReadEnum();
            break;
          }
          case 24: {
            connectingAndOr_ = (global::Org.Roylance.Yaorm.Models.WhereClause.Types.ConnectingAndOr) input.ReadEnum();
            break;
          }
          case 34: {
            if (connectingWhereClause_ == null) {
              connectingWhereClause_ = new global::Org.Roylance.Yaorm.Models.WhereClause();
            }
            input.ReadMessage(connectingWhereClause_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WhereClause message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum OperatorType {
        EQUALS = 0,
        GREATER_THAN = 1,
        LESS_THAN = 2,
        NOT_EQUALS = 3,
      }

      public enum ConnectingAndOr {
        NONE = 0,
        AND = 1,
        OR = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ColumnDefinition : pb::IMessage<ColumnDefinition> {
    private static readonly pb::MessageParser<ColumnDefinition> _parser = new pb::MessageParser<ColumnDefinition>(() => new ColumnDefinition());
    public static pb::MessageParser<ColumnDefinition> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ColumnDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColumnDefinition(ColumnDefinition other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      isKey_ = other.isKey_;
      columnType_ = other.columnType_;
      linkerType_ = other.linkerType_;
    }

    public ColumnDefinition Clone() {
      return new ColumnDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Models.ProtobufType type_ = global::Org.Roylance.Yaorm.Models.ProtobufType.NONE;
    public global::Org.Roylance.Yaorm.Models.ProtobufType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "is_key" field.</summary>
    public const int IsKeyFieldNumber = 3;
    private bool isKey_;
    public bool IsKey {
      get { return isKey_; }
      set {
        isKey_ = value;
      }
    }

    /// <summary>Field number for the "column_type" field.</summary>
    public const int ColumnTypeFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType columnType_ = global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType.SCALAR;
    public global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType ColumnType {
      get { return columnType_; }
      set {
        columnType_ = value;
      }
    }

    /// <summary>Field number for the "linker_type" field.</summary>
    public const int LinkerTypeFieldNumber = 5;
    private global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType linkerType_ = global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType.NONE;
    public global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType LinkerType {
      get { return linkerType_; }
      set {
        linkerType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColumnDefinition);
    }

    public bool Equals(ColumnDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (IsKey != other.IsKey) return false;
      if (ColumnType != other.ColumnType) return false;
      if (LinkerType != other.LinkerType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != global::Org.Roylance.Yaorm.Models.ProtobufType.NONE) hash ^= Type.GetHashCode();
      if (IsKey != false) hash ^= IsKey.GetHashCode();
      if (ColumnType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType.SCALAR) hash ^= ColumnType.GetHashCode();
      if (LinkerType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType.NONE) hash ^= LinkerType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Org.Roylance.Yaorm.Models.ProtobufType.NONE) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (IsKey != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsKey);
      }
      if (ColumnType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType.SCALAR) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ColumnType);
      }
      if (LinkerType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType.NONE) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LinkerType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != global::Org.Roylance.Yaorm.Models.ProtobufType.NONE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IsKey != false) {
        size += 1 + 1;
      }
      if (ColumnType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType.SCALAR) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColumnType);
      }
      if (LinkerType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType.NONE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkerType);
      }
      return size;
    }

    public void MergeFrom(ColumnDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != global::Org.Roylance.Yaorm.Models.ProtobufType.NONE) {
        Type = other.Type;
      }
      if (other.IsKey != false) {
        IsKey = other.IsKey;
      }
      if (other.ColumnType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType.SCALAR) {
        ColumnType = other.ColumnType;
      }
      if (other.LinkerType != global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType.NONE) {
        LinkerType = other.LinkerType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Org.Roylance.Yaorm.Models.ProtobufType) input.ReadEnum();
            break;
          }
          case 24: {
            IsKey = input.ReadBool();
            break;
          }
          case 32: {
            columnType_ = (global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.ColumnType) input.ReadEnum();
            break;
          }
          case 40: {
            linkerType_ = (global::Org.Roylance.Yaorm.Models.ColumnDefinition.Types.LinkerType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ColumnDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ColumnType {
        SCALAR = 0,
        ENUM_NAME = 1,
        ENUM_VALUE = 2,
        MESSAGE_KEY = 3,
      }

      public enum LinkerType {
        NONE = 0,
        PARENT = 1,
        CHILD = 2,
        NEITHER = 3,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Index : pb::IMessage<Index> {
    private static readonly pb::MessageParser<Index> _parser = new pb::MessageParser<Index>(() => new Index());
    public static pb::MessageParser<Index> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Index() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Index(Index other) : this() {
      columnNames_ = other.columnNames_.Clone();
      includeNames_ = other.includeNames_.Clone();
    }

    public Index Clone() {
      return new Index(this);
    }

    /// <summary>Field number for the "column_names" field.</summary>
    public const int ColumnNamesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>.Codec _map_columnNames_codec
        = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.ColumnDefinition.Parser), 10);
    private readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition> columnNames_ = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>();
    public pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition> ColumnNames {
      get { return columnNames_; }
    }

    /// <summary>Field number for the "include_names" field.</summary>
    public const int IncludeNamesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>.Codec _map_includeNames_codec
        = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.ColumnDefinition.Parser), 18);
    private readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition> includeNames_ = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>();
    public pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition> IncludeNames {
      get { return includeNames_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Index);
    }

    public bool Equals(Index other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ColumnNames.Equals(other.ColumnNames)) return false;
      if (!IncludeNames.Equals(other.IncludeNames)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= ColumnNames.GetHashCode();
      hash ^= IncludeNames.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      columnNames_.WriteTo(output, _map_columnNames_codec);
      includeNames_.WriteTo(output, _map_includeNames_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += columnNames_.CalculateSize(_map_columnNames_codec);
      size += includeNames_.CalculateSize(_map_includeNames_codec);
      return size;
    }

    public void MergeFrom(Index other) {
      if (other == null) {
        return;
      }
      columnNames_.Add(other.columnNames_);
      includeNames_.Add(other.includeNames_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columnNames_.AddEntriesFrom(input, _map_columnNames_codec);
            break;
          }
          case 18: {
            includeNames_.AddEntriesFrom(input, _map_includeNames_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Difference : pb::IMessage<Difference> {
    private static readonly pb::MessageParser<Difference> _parser = new pb::MessageParser<Difference>(() => new Difference());
    public static pb::MessageParser<Difference> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Difference() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Difference(Difference other) : this() {
      entityType_ = other.entityType_;
      operation_ = other.operation_;
      name_ = other.name_;
      Index = other.index_ != null ? other.Index.Clone() : null;
      PropertyDefinition = other.propertyDefinition_ != null ? other.PropertyDefinition.Clone() : null;
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
    }

    public Difference Clone() {
      return new Difference(this);
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType entityType_ = global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType.INDEX;
    public global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Models.Difference.Types.Operation operation_ = global::Org.Roylance.Yaorm.Models.Difference.Types.Operation.CREATE;
    public global::Org.Roylance.Yaorm.Models.Difference.Types.Operation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.Index index_;
    public global::Org.Roylance.Yaorm.Models.Index Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "property_definition" field.</summary>
    public const int PropertyDefinitionFieldNumber = 5;
    private global::Org.Roylance.Yaorm.Models.ColumnDefinition propertyDefinition_;
    public global::Org.Roylance.Yaorm.Models.ColumnDefinition PropertyDefinition {
      get { return propertyDefinition_; }
      set {
        propertyDefinition_ = value;
      }
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 6;
    private global::Org.Roylance.Yaorm.Models.TableDefinition tableDefinition_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Difference);
    }

    public bool Equals(Difference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityType != other.EntityType) return false;
      if (Operation != other.Operation) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(PropertyDefinition, other.PropertyDefinition)) return false;
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EntityType != global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType.INDEX) hash ^= EntityType.GetHashCode();
      if (Operation != global::Org.Roylance.Yaorm.Models.Difference.Types.Operation.CREATE) hash ^= Operation.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (propertyDefinition_ != null) hash ^= PropertyDefinition.GetHashCode();
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityType != global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType.INDEX) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EntityType);
      }
      if (Operation != global::Org.Roylance.Yaorm.Models.Difference.Types.Operation.CREATE) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Operation);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (index_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Index);
      }
      if (propertyDefinition_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PropertyDefinition);
      }
      if (tableDefinition_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TableDefinition);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EntityType != global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType.INDEX) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (Operation != global::Org.Roylance.Yaorm.Models.Difference.Types.Operation.CREATE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (propertyDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyDefinition);
      }
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      return size;
    }

    public void MergeFrom(Difference other) {
      if (other == null) {
        return;
      }
      if (other.EntityType != global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType.INDEX) {
        EntityType = other.EntityType;
      }
      if (other.Operation != global::Org.Roylance.Yaorm.Models.Difference.Types.Operation.CREATE) {
        Operation = other.Operation;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.index_ != null) {
        if (index_ == null) {
          index_ = new global::Org.Roylance.Yaorm.Models.Index();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.propertyDefinition_ != null) {
        if (propertyDefinition_ == null) {
          propertyDefinition_ = new global::Org.Roylance.Yaorm.Models.ColumnDefinition();
        }
        PropertyDefinition.MergeFrom(other.PropertyDefinition);
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            entityType_ = (global::Org.Roylance.Yaorm.Models.Difference.Types.EntityType) input.ReadEnum();
            break;
          }
          case 16: {
            operation_ = (global::Org.Roylance.Yaorm.Models.Difference.Types.Operation) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (index_ == null) {
              index_ = new global::Org.Roylance.Yaorm.Models.Index();
            }
            input.ReadMessage(index_);
            break;
          }
          case 42: {
            if (propertyDefinition_ == null) {
              propertyDefinition_ = new global::Org.Roylance.Yaorm.Models.ColumnDefinition();
            }
            input.ReadMessage(propertyDefinition_);
            break;
          }
          case 50: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Difference message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum EntityType {
        INDEX = 0,
        COLUMN = 1,
        TABLE = 2,
      }

      public enum Operation {
        CREATE = 0,
        DROP = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableDefinition : pb::IMessage<TableDefinition> {
    private static readonly pb::MessageParser<TableDefinition> _parser = new pb::MessageParser<TableDefinition>(() => new TableDefinition());
    public static pb::MessageParser<TableDefinition> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TableDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TableDefinition(TableDefinition other) : this() {
      name_ = other.name_;
      columnDefinitions_ = other.columnDefinitions_.Clone();
      Index = other.index_ != null ? other.Index.Clone() : null;
      tableType_ = other.tableType_;
    }

    public TableDefinition Clone() {
      return new TableDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_definitions" field.</summary>
    public const int ColumnDefinitionsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>.Codec _map_columnDefinitions_codec
        = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.ColumnDefinition.Parser), 18);
    private readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition> columnDefinitions_ = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition>();
    public pbc::MapField<string, global::Org.Roylance.Yaorm.Models.ColumnDefinition> ColumnDefinitions {
      get { return columnDefinitions_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Models.Index index_;
    public global::Org.Roylance.Yaorm.Models.Index Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "table_type" field.</summary>
    public const int TableTypeFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType tableType_ = global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType.NORMAL;
    public global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType TableType {
      get { return tableType_; }
      set {
        tableType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TableDefinition);
    }

    public bool Equals(TableDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!ColumnDefinitions.Equals(other.ColumnDefinitions)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (TableType != other.TableType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ColumnDefinitions.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (TableType != global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType.NORMAL) hash ^= TableType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      columnDefinitions_.WriteTo(output, _map_columnDefinitions_codec);
      if (index_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Index);
      }
      if (TableType != global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType.NORMAL) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TableType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += columnDefinitions_.CalculateSize(_map_columnDefinitions_codec);
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (TableType != global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType.NORMAL) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TableType);
      }
      return size;
    }

    public void MergeFrom(TableDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      columnDefinitions_.Add(other.columnDefinitions_);
      if (other.index_ != null) {
        if (index_ == null) {
          index_ = new global::Org.Roylance.Yaorm.Models.Index();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.TableType != global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType.NORMAL) {
        TableType = other.TableType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            columnDefinitions_.AddEntriesFrom(input, _map_columnDefinitions_codec);
            break;
          }
          case 26: {
            if (index_ == null) {
              index_ = new global::Org.Roylance.Yaorm.Models.Index();
            }
            input.ReadMessage(index_);
            break;
          }
          case 32: {
            tableType_ = (global::Org.Roylance.Yaorm.Models.TableDefinition.Types.TableType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TableDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum TableType {
        NORMAL = 0,
        LINKER_MESSAGE = 1,
        LINKER_ENUM = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableDefinitions : pb::IMessage<TableDefinitions> {
    private static readonly pb::MessageParser<TableDefinitions> _parser = new pb::MessageParser<TableDefinitions>(() => new TableDefinitions());
    public static pb::MessageParser<TableDefinitions> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TableDefinitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TableDefinitions(TableDefinitions other) : this() {
      tableDefinitions_ = other.tableDefinitions_.Clone();
    }

    public TableDefinitions Clone() {
      return new TableDefinitions(this);
    }

    /// <summary>Field number for the "table_definitions" field.</summary>
    public const int TableDefinitions_FieldNumber = 1;
    private static readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableDefinition>.Codec _map_tableDefinitions_codec
        = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableDefinition>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.TableDefinition.Parser), 10);
    private readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableDefinition> tableDefinitions_ = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableDefinition>();
    public pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableDefinition> TableDefinitions_ {
      get { return tableDefinitions_; }
    }

    public override bool Equals(object other) {
      return Equals(other as TableDefinitions);
    }

    public bool Equals(TableDefinitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TableDefinitions_.Equals(other.TableDefinitions_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= TableDefinitions_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      tableDefinitions_.WriteTo(output, _map_tableDefinitions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += tableDefinitions_.CalculateSize(_map_tableDefinitions_codec);
      return size;
    }

    public void MergeFrom(TableDefinitions other) {
      if (other == null) {
        return;
      }
      tableDefinitions_.Add(other.tableDefinitions_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tableDefinitions_.AddEntriesFrom(input, _map_tableDefinitions_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DifferenceReport : pb::IMessage<DifferenceReport> {
    private static readonly pb::MessageParser<DifferenceReport> _parser = new pb::MessageParser<DifferenceReport>(() => new DifferenceReport());
    public static pb::MessageParser<DifferenceReport> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DifferenceReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DifferenceReport(DifferenceReport other) : this() {
      migrationExists_ = other.migrationExists_;
      differences_ = other.differences_.Clone();
    }

    public DifferenceReport Clone() {
      return new DifferenceReport(this);
    }

    /// <summary>Field number for the "migration_exists" field.</summary>
    public const int MigrationExistsFieldNumber = 1;
    private bool migrationExists_;
    public bool MigrationExists {
      get { return migrationExists_; }
      set {
        migrationExists_ = value;
      }
    }

    /// <summary>Field number for the "differences" field.</summary>
    public const int DifferencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Models.Difference> _repeated_differences_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.Difference.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.Difference> differences_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.Difference>();
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.Difference> Differences {
      get { return differences_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DifferenceReport);
    }

    public bool Equals(DifferenceReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MigrationExists != other.MigrationExists) return false;
      if(!differences_.Equals(other.differences_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MigrationExists != false) hash ^= MigrationExists.GetHashCode();
      hash ^= differences_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MigrationExists != false) {
        output.WriteRawTag(8);
        output.WriteBool(MigrationExists);
      }
      differences_.WriteTo(output, _repeated_differences_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MigrationExists != false) {
        size += 1 + 1;
      }
      size += differences_.CalculateSize(_repeated_differences_codec);
      return size;
    }

    public void MergeFrom(DifferenceReport other) {
      if (other == null) {
        return;
      }
      if (other.MigrationExists != false) {
        MigrationExists = other.MigrationExists;
      }
      differences_.Add(other.differences_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MigrationExists = input.ReadBool();
            break;
          }
          case 18: {
            differences_.AddEntriesFrom(input, _repeated_differences_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Column : pb::IMessage<Column> {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Column(Column other) : this() {
      Definition = other.definition_ != null ? other.Definition.Clone() : null;
      doubleHolder_ = other.doubleHolder_;
      floatHolder_ = other.floatHolder_;
      int32Holder_ = other.int32Holder_;
      int64Holder_ = other.int64Holder_;
      uint32Holder_ = other.uint32Holder_;
      uint64Holder_ = other.uint64Holder_;
      sint32Holder_ = other.sint32Holder_;
      sint64Holder_ = other.sint64Holder_;
      fixed32Holder_ = other.fixed32Holder_;
      fixed64Holder_ = other.fixed64Holder_;
      sfixed32Holder_ = other.sfixed32Holder_;
      sfixed64Holder_ = other.sfixed64Holder_;
      boolHolder_ = other.boolHolder_;
      stringHolder_ = other.stringHolder_;
      bytesHolder_ = other.bytesHolder_;
    }

    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "definition" field.</summary>
    public const int DefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.ColumnDefinition definition_;
    public global::Org.Roylance.Yaorm.Models.ColumnDefinition Definition {
      get { return definition_; }
      set {
        definition_ = value;
      }
    }

    /// <summary>Field number for the "double_holder" field.</summary>
    public const int DoubleHolderFieldNumber = 2;
    private double doubleHolder_;
    public double DoubleHolder {
      get { return doubleHolder_; }
      set {
        doubleHolder_ = value;
      }
    }

    /// <summary>Field number for the "float_holder" field.</summary>
    public const int FloatHolderFieldNumber = 3;
    private float floatHolder_;
    public float FloatHolder {
      get { return floatHolder_; }
      set {
        floatHolder_ = value;
      }
    }

    /// <summary>Field number for the "int32_holder" field.</summary>
    public const int Int32HolderFieldNumber = 4;
    private int int32Holder_;
    public int Int32Holder {
      get { return int32Holder_; }
      set {
        int32Holder_ = value;
      }
    }

    /// <summary>Field number for the "int64_holder" field.</summary>
    public const int Int64HolderFieldNumber = 5;
    private long int64Holder_;
    public long Int64Holder {
      get { return int64Holder_; }
      set {
        int64Holder_ = value;
      }
    }

    /// <summary>Field number for the "uint32_holder" field.</summary>
    public const int Uint32HolderFieldNumber = 6;
    private uint uint32Holder_;
    public uint Uint32Holder {
      get { return uint32Holder_; }
      set {
        uint32Holder_ = value;
      }
    }

    /// <summary>Field number for the "uint64_holder" field.</summary>
    public const int Uint64HolderFieldNumber = 7;
    private ulong uint64Holder_;
    public ulong Uint64Holder {
      get { return uint64Holder_; }
      set {
        uint64Holder_ = value;
      }
    }

    /// <summary>Field number for the "sint32_holder" field.</summary>
    public const int Sint32HolderFieldNumber = 8;
    private int sint32Holder_;
    public int Sint32Holder {
      get { return sint32Holder_; }
      set {
        sint32Holder_ = value;
      }
    }

    /// <summary>Field number for the "sint64_holder" field.</summary>
    public const int Sint64HolderFieldNumber = 9;
    private long sint64Holder_;
    public long Sint64Holder {
      get { return sint64Holder_; }
      set {
        sint64Holder_ = value;
      }
    }

    /// <summary>Field number for the "fixed32_holder" field.</summary>
    public const int Fixed32HolderFieldNumber = 10;
    private uint fixed32Holder_;
    public uint Fixed32Holder {
      get { return fixed32Holder_; }
      set {
        fixed32Holder_ = value;
      }
    }

    /// <summary>Field number for the "fixed64_holder" field.</summary>
    public const int Fixed64HolderFieldNumber = 11;
    private ulong fixed64Holder_;
    public ulong Fixed64Holder {
      get { return fixed64Holder_; }
      set {
        fixed64Holder_ = value;
      }
    }

    /// <summary>Field number for the "sfixed32_holder" field.</summary>
    public const int Sfixed32HolderFieldNumber = 12;
    private int sfixed32Holder_;
    public int Sfixed32Holder {
      get { return sfixed32Holder_; }
      set {
        sfixed32Holder_ = value;
      }
    }

    /// <summary>Field number for the "sfixed64_holder" field.</summary>
    public const int Sfixed64HolderFieldNumber = 13;
    private long sfixed64Holder_;
    public long Sfixed64Holder {
      get { return sfixed64Holder_; }
      set {
        sfixed64Holder_ = value;
      }
    }

    /// <summary>Field number for the "bool_holder" field.</summary>
    public const int BoolHolderFieldNumber = 14;
    private bool boolHolder_;
    public bool BoolHolder {
      get { return boolHolder_; }
      set {
        boolHolder_ = value;
      }
    }

    /// <summary>Field number for the "string_holder" field.</summary>
    public const int StringHolderFieldNumber = 15;
    private string stringHolder_ = "";
    public string StringHolder {
      get { return stringHolder_; }
      set {
        stringHolder_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_holder" field.</summary>
    public const int BytesHolderFieldNumber = 16;
    private pb::ByteString bytesHolder_ = pb::ByteString.Empty;
    public pb::ByteString BytesHolder {
      get { return bytesHolder_; }
      set {
        bytesHolder_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Definition, other.Definition)) return false;
      if (DoubleHolder != other.DoubleHolder) return false;
      if (FloatHolder != other.FloatHolder) return false;
      if (Int32Holder != other.Int32Holder) return false;
      if (Int64Holder != other.Int64Holder) return false;
      if (Uint32Holder != other.Uint32Holder) return false;
      if (Uint64Holder != other.Uint64Holder) return false;
      if (Sint32Holder != other.Sint32Holder) return false;
      if (Sint64Holder != other.Sint64Holder) return false;
      if (Fixed32Holder != other.Fixed32Holder) return false;
      if (Fixed64Holder != other.Fixed64Holder) return false;
      if (Sfixed32Holder != other.Sfixed32Holder) return false;
      if (Sfixed64Holder != other.Sfixed64Holder) return false;
      if (BoolHolder != other.BoolHolder) return false;
      if (StringHolder != other.StringHolder) return false;
      if (BytesHolder != other.BytesHolder) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (definition_ != null) hash ^= Definition.GetHashCode();
      if (DoubleHolder != 0D) hash ^= DoubleHolder.GetHashCode();
      if (FloatHolder != 0F) hash ^= FloatHolder.GetHashCode();
      if (Int32Holder != 0) hash ^= Int32Holder.GetHashCode();
      if (Int64Holder != 0L) hash ^= Int64Holder.GetHashCode();
      if (Uint32Holder != 0) hash ^= Uint32Holder.GetHashCode();
      if (Uint64Holder != 0UL) hash ^= Uint64Holder.GetHashCode();
      if (Sint32Holder != 0) hash ^= Sint32Holder.GetHashCode();
      if (Sint64Holder != 0L) hash ^= Sint64Holder.GetHashCode();
      if (Fixed32Holder != 0) hash ^= Fixed32Holder.GetHashCode();
      if (Fixed64Holder != 0UL) hash ^= Fixed64Holder.GetHashCode();
      if (Sfixed32Holder != 0) hash ^= Sfixed32Holder.GetHashCode();
      if (Sfixed64Holder != 0L) hash ^= Sfixed64Holder.GetHashCode();
      if (BoolHolder != false) hash ^= BoolHolder.GetHashCode();
      if (StringHolder.Length != 0) hash ^= StringHolder.GetHashCode();
      if (BytesHolder.Length != 0) hash ^= BytesHolder.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (definition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Definition);
      }
      if (DoubleHolder != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleHolder);
      }
      if (FloatHolder != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FloatHolder);
      }
      if (Int32Holder != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Int32Holder);
      }
      if (Int64Holder != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Int64Holder);
      }
      if (Uint32Holder != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Uint32Holder);
      }
      if (Uint64Holder != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Uint64Holder);
      }
      if (Sint32Holder != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Sint32Holder);
      }
      if (Sint64Holder != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(Sint64Holder);
      }
      if (Fixed32Holder != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Fixed32Holder);
      }
      if (Fixed64Holder != 0UL) {
        output.WriteRawTag(89);
        output.WriteFixed64(Fixed64Holder);
      }
      if (Sfixed32Holder != 0) {
        output.WriteRawTag(101);
        output.WriteSFixed32(Sfixed32Holder);
      }
      if (Sfixed64Holder != 0L) {
        output.WriteRawTag(105);
        output.WriteSFixed64(Sfixed64Holder);
      }
      if (BoolHolder != false) {
        output.WriteRawTag(112);
        output.WriteBool(BoolHolder);
      }
      if (StringHolder.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StringHolder);
      }
      if (BytesHolder.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(BytesHolder);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (definition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Definition);
      }
      if (DoubleHolder != 0D) {
        size += 1 + 8;
      }
      if (FloatHolder != 0F) {
        size += 1 + 4;
      }
      if (Int32Holder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Holder);
      }
      if (Int64Holder != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Holder);
      }
      if (Uint32Holder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Holder);
      }
      if (Uint64Holder != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Holder);
      }
      if (Sint32Holder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sint32Holder);
      }
      if (Sint64Holder != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Sint64Holder);
      }
      if (Fixed32Holder != 0) {
        size += 1 + 4;
      }
      if (Fixed64Holder != 0UL) {
        size += 1 + 8;
      }
      if (Sfixed32Holder != 0) {
        size += 1 + 4;
      }
      if (Sfixed64Holder != 0L) {
        size += 1 + 8;
      }
      if (BoolHolder != false) {
        size += 1 + 1;
      }
      if (StringHolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringHolder);
      }
      if (BytesHolder.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BytesHolder);
      }
      return size;
    }

    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      if (other.definition_ != null) {
        if (definition_ == null) {
          definition_ = new global::Org.Roylance.Yaorm.Models.ColumnDefinition();
        }
        Definition.MergeFrom(other.Definition);
      }
      if (other.DoubleHolder != 0D) {
        DoubleHolder = other.DoubleHolder;
      }
      if (other.FloatHolder != 0F) {
        FloatHolder = other.FloatHolder;
      }
      if (other.Int32Holder != 0) {
        Int32Holder = other.Int32Holder;
      }
      if (other.Int64Holder != 0L) {
        Int64Holder = other.Int64Holder;
      }
      if (other.Uint32Holder != 0) {
        Uint32Holder = other.Uint32Holder;
      }
      if (other.Uint64Holder != 0UL) {
        Uint64Holder = other.Uint64Holder;
      }
      if (other.Sint32Holder != 0) {
        Sint32Holder = other.Sint32Holder;
      }
      if (other.Sint64Holder != 0L) {
        Sint64Holder = other.Sint64Holder;
      }
      if (other.Fixed32Holder != 0) {
        Fixed32Holder = other.Fixed32Holder;
      }
      if (other.Fixed64Holder != 0UL) {
        Fixed64Holder = other.Fixed64Holder;
      }
      if (other.Sfixed32Holder != 0) {
        Sfixed32Holder = other.Sfixed32Holder;
      }
      if (other.Sfixed64Holder != 0L) {
        Sfixed64Holder = other.Sfixed64Holder;
      }
      if (other.BoolHolder != false) {
        BoolHolder = other.BoolHolder;
      }
      if (other.StringHolder.Length != 0) {
        StringHolder = other.StringHolder;
      }
      if (other.BytesHolder.Length != 0) {
        BytesHolder = other.BytesHolder;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (definition_ == null) {
              definition_ = new global::Org.Roylance.Yaorm.Models.ColumnDefinition();
            }
            input.ReadMessage(definition_);
            break;
          }
          case 17: {
            DoubleHolder = input.ReadDouble();
            break;
          }
          case 29: {
            FloatHolder = input.ReadFloat();
            break;
          }
          case 32: {
            Int32Holder = input.ReadInt32();
            break;
          }
          case 40: {
            Int64Holder = input.ReadInt64();
            break;
          }
          case 48: {
            Uint32Holder = input.ReadUInt32();
            break;
          }
          case 56: {
            Uint64Holder = input.ReadUInt64();
            break;
          }
          case 64: {
            Sint32Holder = input.ReadSInt32();
            break;
          }
          case 72: {
            Sint64Holder = input.ReadSInt64();
            break;
          }
          case 85: {
            Fixed32Holder = input.ReadFixed32();
            break;
          }
          case 89: {
            Fixed64Holder = input.ReadFixed64();
            break;
          }
          case 101: {
            Sfixed32Holder = input.ReadSFixed32();
            break;
          }
          case 105: {
            Sfixed64Holder = input.ReadSFixed64();
            break;
          }
          case 112: {
            BoolHolder = input.ReadBool();
            break;
          }
          case 122: {
            StringHolder = input.ReadString();
            break;
          }
          case 130: {
            BytesHolder = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Record(Record other) : this() {
      columns_ = other.columns_.Clone();
    }

    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.Column>.Codec _map_columns_codec
        = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.Column>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.Column.Parser), 10);
    private readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.Column> columns_ = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.Column>();
    public pbc::MapField<string, global::Org.Roylance.Yaorm.Models.Column> Columns {
      get { return columns_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Columns.Equals(other.Columns)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Columns.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _map_columns_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_map_columns_codec);
      return size;
    }

    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _map_columns_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Records : pb::IMessage<Records> {
    private static readonly pb::MessageParser<Records> _parser = new pb::MessageParser<Records>(() => new Records());
    public static pb::MessageParser<Records> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Records() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Records(Records other) : this() {
      records_ = other.records_.Clone();
    }

    public Records Clone() {
      return new Records(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int Records_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Models.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yaorm.Models.Record.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.Record> records_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.Record>();
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.Record> Records_ {
      get { return records_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Records);
    }

    public bool Equals(Records other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    public void MergeFrom(Records other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableRecords : pb::IMessage<TableRecords> {
    private static readonly pb::MessageParser<TableRecords> _parser = new pb::MessageParser<TableRecords>(() => new TableRecords());
    public static pb::MessageParser<TableRecords> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TableRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TableRecords(TableRecords other) : this() {
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
      Records = other.records_ != null ? other.Records.Clone() : null;
      tableName_ = other.tableName_;
      knownParentIds_ = other.knownParentIds_.Clone();
    }

    public TableRecords Clone() {
      return new TableRecords(this);
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.TableDefinition tableDefinition_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Models.Records records_;
    public global::Org.Roylance.Yaorm.Models.Records Records {
      get { return records_; }
      set {
        records_ = value;
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 3;
    private string tableName_ = "";
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "known_parent_ids" field.</summary>
    public const int KnownParentIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_knownParentIds_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> knownParentIds_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> KnownParentIds {
      get { return knownParentIds_; }
    }

    public override bool Equals(object other) {
      return Equals(other as TableRecords);
    }

    public bool Equals(TableRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      if (!object.Equals(Records, other.Records)) return false;
      if (TableName != other.TableName) return false;
      if(!knownParentIds_.Equals(other.knownParentIds_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      if (records_ != null) hash ^= Records.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      hash ^= knownParentIds_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableDefinition);
      }
      if (records_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Records);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableName);
      }
      knownParentIds_.WriteTo(output, _repeated_knownParentIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      if (records_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Records);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      size += knownParentIds_.CalculateSize(_repeated_knownParentIds_codec);
      return size;
    }

    public void MergeFrom(TableRecords other) {
      if (other == null) {
        return;
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
      if (other.records_ != null) {
        if (records_ == null) {
          records_ = new global::Org.Roylance.Yaorm.Models.Records();
        }
        Records.MergeFrom(other.Records);
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      knownParentIds_.Add(other.knownParentIds_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
          case 18: {
            if (records_ == null) {
              records_ = new global::Org.Roylance.Yaorm.Models.Records();
            }
            input.ReadMessage(records_);
            break;
          }
          case 26: {
            TableName = input.ReadString();
            break;
          }
          case 34: {
            knownParentIds_.AddEntriesFrom(input, _repeated_knownParentIds_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AllTableRecords : pb::IMessage<AllTableRecords> {
    private static readonly pb::MessageParser<AllTableRecords> _parser = new pb::MessageParser<AllTableRecords>(() => new AllTableRecords());
    public static pb::MessageParser<AllTableRecords> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AllTableRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AllTableRecords(AllTableRecords other) : this() {
      tableRecords_ = other.tableRecords_.Clone();
    }

    public AllTableRecords Clone() {
      return new AllTableRecords(this);
    }

    /// <summary>Field number for the "table_records" field.</summary>
    public const int TableRecordsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableRecords>.Codec _map_tableRecords_codec
        = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableRecords>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.TableRecords.Parser), 10);
    private readonly pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableRecords> tableRecords_ = new pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableRecords>();
    public pbc::MapField<string, global::Org.Roylance.Yaorm.Models.TableRecords> TableRecords {
      get { return tableRecords_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AllTableRecords);
    }

    public bool Equals(AllTableRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TableRecords.Equals(other.TableRecords)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= TableRecords.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      tableRecords_.WriteTo(output, _map_tableRecords_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += tableRecords_.CalculateSize(_map_tableRecords_codec);
      return size;
    }

    public void MergeFrom(AllTableRecords other) {
      if (other == null) {
        return;
      }
      tableRecords_.Add(other.tableRecords_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tableRecords_.AddEntriesFrom(input, _map_tableRecords_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DatabaseOperation : pb::IMessage<DatabaseOperation> {
    private static readonly pb::MessageParser<DatabaseOperation> _parser = new pb::MessageParser<DatabaseOperation>(() => new DatabaseOperation());
    public static pb::MessageParser<DatabaseOperation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DatabaseOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DatabaseOperation(DatabaseOperation other) : this() {
      TableDefinition = other.tableDefinition_ != null ? other.TableDefinition.Clone() : null;
      Records = other.records_ != null ? other.Records.Clone() : null;
      Index = other.index_ != null ? other.Index.Clone() : null;
      ColumnDefinition = other.columnDefinition_ != null ? other.ColumnDefinition.Clone() : null;
      WhereClause = other.whereClause_ != null ? other.WhereClause.Clone() : null;
      databaseOperationType_ = other.databaseOperationType_;
    }

    public DatabaseOperation Clone() {
      return new DatabaseOperation(this);
    }

    /// <summary>Field number for the "table_definition" field.</summary>
    public const int TableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.TableDefinition tableDefinition_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition TableDefinition {
      get { return tableDefinition_; }
      set {
        tableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Models.Records records_;
    public global::Org.Roylance.Yaorm.Models.Records Records {
      get { return records_; }
      set {
        records_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Models.Index index_;
    public global::Org.Roylance.Yaorm.Models.Index Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "column_definition" field.</summary>
    public const int ColumnDefinitionFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.ColumnDefinition columnDefinition_;
    public global::Org.Roylance.Yaorm.Models.ColumnDefinition ColumnDefinition {
      get { return columnDefinition_; }
      set {
        columnDefinition_ = value;
      }
    }

    /// <summary>Field number for the "where_clause" field.</summary>
    public const int WhereClauseFieldNumber = 5;
    private global::Org.Roylance.Yaorm.Models.WhereClause whereClause_;
    public global::Org.Roylance.Yaorm.Models.WhereClause WhereClause {
      get { return whereClause_; }
      set {
        whereClause_ = value;
      }
    }

    /// <summary>Field number for the "database_operation_type" field.</summary>
    public const int DatabaseOperationTypeFieldNumber = 6;
    private global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType databaseOperationType_ = global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType.CREATE_TABLE;
    public global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType DatabaseOperationType {
      get { return databaseOperationType_; }
      set {
        databaseOperationType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DatabaseOperation);
    }

    public bool Equals(DatabaseOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableDefinition, other.TableDefinition)) return false;
      if (!object.Equals(Records, other.Records)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(ColumnDefinition, other.ColumnDefinition)) return false;
      if (!object.Equals(WhereClause, other.WhereClause)) return false;
      if (DatabaseOperationType != other.DatabaseOperationType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (tableDefinition_ != null) hash ^= TableDefinition.GetHashCode();
      if (records_ != null) hash ^= Records.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (columnDefinition_ != null) hash ^= ColumnDefinition.GetHashCode();
      if (whereClause_ != null) hash ^= WhereClause.GetHashCode();
      if (DatabaseOperationType != global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType.CREATE_TABLE) hash ^= DatabaseOperationType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableDefinition);
      }
      if (records_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Records);
      }
      if (index_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Index);
      }
      if (columnDefinition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ColumnDefinition);
      }
      if (whereClause_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WhereClause);
      }
      if (DatabaseOperationType != global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType.CREATE_TABLE) {
        output.WriteRawTag(48);
        output.WriteEnum((int) DatabaseOperationType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinition);
      }
      if (records_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Records);
      }
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (columnDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColumnDefinition);
      }
      if (whereClause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhereClause);
      }
      if (DatabaseOperationType != global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType.CREATE_TABLE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DatabaseOperationType);
      }
      return size;
    }

    public void MergeFrom(DatabaseOperation other) {
      if (other == null) {
        return;
      }
      if (other.tableDefinition_ != null) {
        if (tableDefinition_ == null) {
          tableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        TableDefinition.MergeFrom(other.TableDefinition);
      }
      if (other.records_ != null) {
        if (records_ == null) {
          records_ = new global::Org.Roylance.Yaorm.Models.Records();
        }
        Records.MergeFrom(other.Records);
      }
      if (other.index_ != null) {
        if (index_ == null) {
          index_ = new global::Org.Roylance.Yaorm.Models.Index();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.columnDefinition_ != null) {
        if (columnDefinition_ == null) {
          columnDefinition_ = new global::Org.Roylance.Yaorm.Models.ColumnDefinition();
        }
        ColumnDefinition.MergeFrom(other.ColumnDefinition);
      }
      if (other.whereClause_ != null) {
        if (whereClause_ == null) {
          whereClause_ = new global::Org.Roylance.Yaorm.Models.WhereClause();
        }
        WhereClause.MergeFrom(other.WhereClause);
      }
      if (other.DatabaseOperationType != global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType.CREATE_TABLE) {
        DatabaseOperationType = other.DatabaseOperationType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tableDefinition_ == null) {
              tableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(tableDefinition_);
            break;
          }
          case 18: {
            if (records_ == null) {
              records_ = new global::Org.Roylance.Yaorm.Models.Records();
            }
            input.ReadMessage(records_);
            break;
          }
          case 26: {
            if (index_ == null) {
              index_ = new global::Org.Roylance.Yaorm.Models.Index();
            }
            input.ReadMessage(index_);
            break;
          }
          case 34: {
            if (columnDefinition_ == null) {
              columnDefinition_ = new global::Org.Roylance.Yaorm.Models.ColumnDefinition();
            }
            input.ReadMessage(columnDefinition_);
            break;
          }
          case 42: {
            if (whereClause_ == null) {
              whereClause_ = new global::Org.Roylance.Yaorm.Models.WhereClause();
            }
            input.ReadMessage(whereClause_);
            break;
          }
          case 48: {
            databaseOperationType_ = (global::Org.Roylance.Yaorm.Models.DatabaseOperation.Types.DatabaseOperationType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DatabaseOperation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum DatabaseOperationType {
        CREATE_TABLE = 0,
        DROP_TABLE = 1,
        CREATE_INDEX = 2,
        DROP_INDEX = 3,
        CREATE_COLUMN = 4,
        DROP_COLUMN = 5,
        GET_COUNT = 6,
        GET_CUSTOM = 7,
        GET = 8,
        GET_MANY = 9,
        GET_WHERE = 10,
        BULK_INSERT = 11,
        CREATE_OR_UPDATE = 12,
        CREATE = 13,
        UPDATE = 14,
        UPDATE_WITH_CRITERIA = 15,
        UPDATE_CUSTOM = 16,
        DELETE = 17,
        DELETE_ALL = 18,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DatabaseOperationResult : pb::IMessage<DatabaseOperationResult> {
    private static readonly pb::MessageParser<DatabaseOperationResult> _parser = new pb::MessageParser<DatabaseOperationResult>(() => new DatabaseOperationResult());
    public static pb::MessageParser<DatabaseOperationResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DatabaseOperationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DatabaseOperationResult(DatabaseOperationResult other) : this() {
      boolResult_ = other.boolResult_;
      countResult_ = other.countResult_;
      RecordResult = other.recordResult_ != null ? other.RecordResult.Clone() : null;
      RecordsResult = other.recordsResult_ != null ? other.RecordsResult.Clone() : null;
      errorMessage_ = other.errorMessage_;
      DatabaseOperation = other.databaseOperation_ != null ? other.DatabaseOperation.Clone() : null;
    }

    public DatabaseOperationResult Clone() {
      return new DatabaseOperationResult(this);
    }

    /// <summary>Field number for the "bool_result" field.</summary>
    public const int BoolResultFieldNumber = 1;
    private bool boolResult_;
    public bool BoolResult {
      get { return boolResult_; }
      set {
        boolResult_ = value;
      }
    }

    /// <summary>Field number for the "count_result" field.</summary>
    public const int CountResultFieldNumber = 2;
    private long countResult_;
    public long CountResult {
      get { return countResult_; }
      set {
        countResult_ = value;
      }
    }

    /// <summary>Field number for the "record_result" field.</summary>
    public const int RecordResultFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Models.Record recordResult_;
    public global::Org.Roylance.Yaorm.Models.Record RecordResult {
      get { return recordResult_; }
      set {
        recordResult_ = value;
      }
    }

    /// <summary>Field number for the "records_result" field.</summary>
    public const int RecordsResultFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.Records recordsResult_;
    public global::Org.Roylance.Yaorm.Models.Records RecordsResult {
      get { return recordsResult_; }
      set {
        recordsResult_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 5;
    private string errorMessage_ = "";
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database_operation" field.</summary>
    public const int DatabaseOperationFieldNumber = 6;
    private global::Org.Roylance.Yaorm.Models.DatabaseOperation databaseOperation_;
    public global::Org.Roylance.Yaorm.Models.DatabaseOperation DatabaseOperation {
      get { return databaseOperation_; }
      set {
        databaseOperation_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DatabaseOperationResult);
    }

    public bool Equals(DatabaseOperationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoolResult != other.BoolResult) return false;
      if (CountResult != other.CountResult) return false;
      if (!object.Equals(RecordResult, other.RecordResult)) return false;
      if (!object.Equals(RecordsResult, other.RecordsResult)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(DatabaseOperation, other.DatabaseOperation)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BoolResult != false) hash ^= BoolResult.GetHashCode();
      if (CountResult != 0L) hash ^= CountResult.GetHashCode();
      if (recordResult_ != null) hash ^= RecordResult.GetHashCode();
      if (recordsResult_ != null) hash ^= RecordsResult.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (databaseOperation_ != null) hash ^= DatabaseOperation.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BoolResult != false) {
        output.WriteRawTag(8);
        output.WriteBool(BoolResult);
      }
      if (CountResult != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CountResult);
      }
      if (recordResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RecordResult);
      }
      if (recordsResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecordsResult);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ErrorMessage);
      }
      if (databaseOperation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DatabaseOperation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BoolResult != false) {
        size += 1 + 1;
      }
      if (CountResult != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountResult);
      }
      if (recordResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordResult);
      }
      if (recordsResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordsResult);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (databaseOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatabaseOperation);
      }
      return size;
    }

    public void MergeFrom(DatabaseOperationResult other) {
      if (other == null) {
        return;
      }
      if (other.BoolResult != false) {
        BoolResult = other.BoolResult;
      }
      if (other.CountResult != 0L) {
        CountResult = other.CountResult;
      }
      if (other.recordResult_ != null) {
        if (recordResult_ == null) {
          recordResult_ = new global::Org.Roylance.Yaorm.Models.Record();
        }
        RecordResult.MergeFrom(other.RecordResult);
      }
      if (other.recordsResult_ != null) {
        if (recordsResult_ == null) {
          recordsResult_ = new global::Org.Roylance.Yaorm.Models.Records();
        }
        RecordsResult.MergeFrom(other.RecordsResult);
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.databaseOperation_ != null) {
        if (databaseOperation_ == null) {
          databaseOperation_ = new global::Org.Roylance.Yaorm.Models.DatabaseOperation();
        }
        DatabaseOperation.MergeFrom(other.DatabaseOperation);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoolResult = input.ReadBool();
            break;
          }
          case 16: {
            CountResult = input.ReadInt64();
            break;
          }
          case 26: {
            if (recordResult_ == null) {
              recordResult_ = new global::Org.Roylance.Yaorm.Models.Record();
            }
            input.ReadMessage(recordResult_);
            break;
          }
          case 34: {
            if (recordsResult_ == null) {
              recordsResult_ = new global::Org.Roylance.Yaorm.Models.Records();
            }
            input.ReadMessage(recordsResult_);
            break;
          }
          case 42: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 50: {
            if (databaseOperation_ == null) {
              databaseOperation_ = new global::Org.Roylance.Yaorm.Models.DatabaseOperation();
            }
            input.ReadMessage(databaseOperation_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DatabaseDefinition : pb::IMessage<DatabaseDefinition> {
    private static readonly pb::MessageParser<DatabaseDefinition> _parser = new pb::MessageParser<DatabaseDefinition>(() => new DatabaseDefinition());
    public static pb::MessageParser<DatabaseDefinition> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DatabaseDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DatabaseDefinition(DatabaseDefinition other) : this() {
      schema_ = other.schema_;
      name_ = other.name_;
      TableDefinitions = other.tableDefinitions_ != null ? other.TableDefinitions.Clone() : null;
      tableDefinitionGraphs_ = other.tableDefinitionGraphs_.Clone();
    }

    public DatabaseDefinition Clone() {
      return new DatabaseDefinition(this);
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 1;
    private string schema_ = "";
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_definitions" field.</summary>
    public const int TableDefinitionsFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Models.TableDefinitions tableDefinitions_;
    public global::Org.Roylance.Yaorm.Models.TableDefinitions TableDefinitions {
      get { return tableDefinitions_; }
      set {
        tableDefinitions_ = value;
      }
    }

    /// <summary>Field number for the "table_definition_graphs" field.</summary>
    public const int TableDefinitionGraphsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs> _repeated_tableDefinitionGraphs_codec
        = pb::FieldCodec.ForMessage(34, global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs> tableDefinitionGraphs_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs>();
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.TableDefinitionGraphs> TableDefinitionGraphs {
      get { return tableDefinitionGraphs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DatabaseDefinition);
    }

    public bool Equals(DatabaseDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Schema != other.Schema) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(TableDefinitions, other.TableDefinitions)) return false;
      if(!tableDefinitionGraphs_.Equals(other.tableDefinitionGraphs_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (tableDefinitions_ != null) hash ^= TableDefinitions.GetHashCode();
      hash ^= tableDefinitionGraphs_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Schema.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Schema);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (tableDefinitions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TableDefinitions);
      }
      tableDefinitionGraphs_.WriteTo(output, _repeated_tableDefinitionGraphs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (tableDefinitions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableDefinitions);
      }
      size += tableDefinitionGraphs_.CalculateSize(_repeated_tableDefinitionGraphs_codec);
      return size;
    }

    public void MergeFrom(DatabaseDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.tableDefinitions_ != null) {
        if (tableDefinitions_ == null) {
          tableDefinitions_ = new global::Org.Roylance.Yaorm.Models.TableDefinitions();
        }
        TableDefinitions.MergeFrom(other.TableDefinitions);
      }
      tableDefinitionGraphs_.Add(other.tableDefinitionGraphs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Schema = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (tableDefinitions_ == null) {
              tableDefinitions_ = new global::Org.Roylance.Yaorm.Models.TableDefinitions();
            }
            input.ReadMessage(tableDefinitions_);
            break;
          }
          case 34: {
            tableDefinitionGraphs_.AddEntriesFrom(input, _repeated_tableDefinitionGraphs_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableDefinitionGraph : pb::IMessage<TableDefinitionGraph> {
    private static readonly pb::MessageParser<TableDefinitionGraph> _parser = new pb::MessageParser<TableDefinitionGraph>(() => new TableDefinitionGraph());
    public static pb::MessageParser<TableDefinitionGraph> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TableDefinitionGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TableDefinitionGraph(TableDefinitionGraph other) : this() {
      MainTableDefinition = other.mainTableDefinition_ != null ? other.MainTableDefinition.Clone() : null;
      OtherTableDefinition = other.otherTableDefinition_ != null ? other.OtherTableDefinition.Clone() : null;
      LinkerTableTable = other.linkerTableTable_ != null ? other.LinkerTableTable.Clone() : null;
      definitionGraphType_ = other.definitionGraphType_;
      mainName_ = other.mainName_;
      otherName_ = other.otherName_;
      columnName_ = other.columnName_;
    }

    public TableDefinitionGraph Clone() {
      return new TableDefinitionGraph(this);
    }

    /// <summary>Field number for the "main_table_definition" field.</summary>
    public const int MainTableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.TableDefinition mainTableDefinition_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition MainTableDefinition {
      get { return mainTableDefinition_; }
      set {
        mainTableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "other_table_definition" field.</summary>
    public const int OtherTableDefinitionFieldNumber = 2;
    private global::Org.Roylance.Yaorm.Models.TableDefinition otherTableDefinition_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition OtherTableDefinition {
      get { return otherTableDefinition_; }
      set {
        otherTableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "linker_table_table" field.</summary>
    public const int LinkerTableTableFieldNumber = 3;
    private global::Org.Roylance.Yaorm.Models.TableDefinition linkerTableTable_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition LinkerTableTable {
      get { return linkerTableTable_; }
      set {
        linkerTableTable_ = value;
      }
    }

    /// <summary>Field number for the "definition_graph_type" field.</summary>
    public const int DefinitionGraphTypeFieldNumber = 4;
    private global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType definitionGraphType_ = global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType.ENUM_TYPE;
    public global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType DefinitionGraphType {
      get { return definitionGraphType_; }
      set {
        definitionGraphType_ = value;
      }
    }

    /// <summary>Field number for the "main_name" field.</summary>
    public const int MainNameFieldNumber = 5;
    private string mainName_ = "";
    public string MainName {
      get { return mainName_; }
      set {
        mainName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "other_name" field.</summary>
    public const int OtherNameFieldNumber = 6;
    private string otherName_ = "";
    public string OtherName {
      get { return otherName_; }
      set {
        otherName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 7;
    private string columnName_ = "";
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TableDefinitionGraph);
    }

    public bool Equals(TableDefinitionGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MainTableDefinition, other.MainTableDefinition)) return false;
      if (!object.Equals(OtherTableDefinition, other.OtherTableDefinition)) return false;
      if (!object.Equals(LinkerTableTable, other.LinkerTableTable)) return false;
      if (DefinitionGraphType != other.DefinitionGraphType) return false;
      if (MainName != other.MainName) return false;
      if (OtherName != other.OtherName) return false;
      if (ColumnName != other.ColumnName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (mainTableDefinition_ != null) hash ^= MainTableDefinition.GetHashCode();
      if (otherTableDefinition_ != null) hash ^= OtherTableDefinition.GetHashCode();
      if (linkerTableTable_ != null) hash ^= LinkerTableTable.GetHashCode();
      if (DefinitionGraphType != global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType.ENUM_TYPE) hash ^= DefinitionGraphType.GetHashCode();
      if (MainName.Length != 0) hash ^= MainName.GetHashCode();
      if (OtherName.Length != 0) hash ^= OtherName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mainTableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainTableDefinition);
      }
      if (otherTableDefinition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OtherTableDefinition);
      }
      if (linkerTableTable_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinkerTableTable);
      }
      if (DefinitionGraphType != global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType.ENUM_TYPE) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DefinitionGraphType);
      }
      if (MainName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MainName);
      }
      if (OtherName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OtherName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ColumnName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mainTableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainTableDefinition);
      }
      if (otherTableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherTableDefinition);
      }
      if (linkerTableTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkerTableTable);
      }
      if (DefinitionGraphType != global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType.ENUM_TYPE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DefinitionGraphType);
      }
      if (MainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainName);
      }
      if (OtherName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      return size;
    }

    public void MergeFrom(TableDefinitionGraph other) {
      if (other == null) {
        return;
      }
      if (other.mainTableDefinition_ != null) {
        if (mainTableDefinition_ == null) {
          mainTableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        MainTableDefinition.MergeFrom(other.MainTableDefinition);
      }
      if (other.otherTableDefinition_ != null) {
        if (otherTableDefinition_ == null) {
          otherTableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        OtherTableDefinition.MergeFrom(other.OtherTableDefinition);
      }
      if (other.linkerTableTable_ != null) {
        if (linkerTableTable_ == null) {
          linkerTableTable_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        LinkerTableTable.MergeFrom(other.LinkerTableTable);
      }
      if (other.DefinitionGraphType != global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType.ENUM_TYPE) {
        DefinitionGraphType = other.DefinitionGraphType;
      }
      if (other.MainName.Length != 0) {
        MainName = other.MainName;
      }
      if (other.OtherName.Length != 0) {
        OtherName = other.OtherName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mainTableDefinition_ == null) {
              mainTableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(mainTableDefinition_);
            break;
          }
          case 18: {
            if (otherTableDefinition_ == null) {
              otherTableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(otherTableDefinition_);
            break;
          }
          case 26: {
            if (linkerTableTable_ == null) {
              linkerTableTable_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(linkerTableTable_);
            break;
          }
          case 32: {
            definitionGraphType_ = (global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Types.TableDefinitionGraphType) input.ReadEnum();
            break;
          }
          case 42: {
            MainName = input.ReadString();
            break;
          }
          case 50: {
            OtherName = input.ReadString();
            break;
          }
          case 58: {
            ColumnName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TableDefinitionGraph message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum TableDefinitionGraphType {
        ENUM_TYPE = 0,
        MESSAGE_TYPE = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableDefinitionGraphs : pb::IMessage<TableDefinitionGraphs> {
    private static readonly pb::MessageParser<TableDefinitionGraphs> _parser = new pb::MessageParser<TableDefinitionGraphs>(() => new TableDefinitionGraphs());
    public static pb::MessageParser<TableDefinitionGraphs> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TableDefinitionGraphs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TableDefinitionGraphs(TableDefinitionGraphs other) : this() {
      MainTableDefinition = other.mainTableDefinition_ != null ? other.MainTableDefinition.Clone() : null;
      tableDefinitionGraphs_ = other.tableDefinitionGraphs_.Clone();
    }

    public TableDefinitionGraphs Clone() {
      return new TableDefinitionGraphs(this);
    }

    /// <summary>Field number for the "main_table_definition" field.</summary>
    public const int MainTableDefinitionFieldNumber = 1;
    private global::Org.Roylance.Yaorm.Models.TableDefinition mainTableDefinition_;
    public global::Org.Roylance.Yaorm.Models.TableDefinition MainTableDefinition {
      get { return mainTableDefinition_; }
      set {
        mainTableDefinition_ = value;
      }
    }

    /// <summary>Field number for the "table_definition_graphs" field.</summary>
    public const int TableDefinitionGraphs_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yaorm.Models.TableDefinitionGraph> _repeated_tableDefinitionGraphs_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yaorm.Models.TableDefinitionGraph.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.TableDefinitionGraph> tableDefinitionGraphs_ = new pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.TableDefinitionGraph>();
    public pbc::RepeatedField<global::Org.Roylance.Yaorm.Models.TableDefinitionGraph> TableDefinitionGraphs_ {
      get { return tableDefinitionGraphs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as TableDefinitionGraphs);
    }

    public bool Equals(TableDefinitionGraphs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MainTableDefinition, other.MainTableDefinition)) return false;
      if(!tableDefinitionGraphs_.Equals(other.tableDefinitionGraphs_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (mainTableDefinition_ != null) hash ^= MainTableDefinition.GetHashCode();
      hash ^= tableDefinitionGraphs_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mainTableDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainTableDefinition);
      }
      tableDefinitionGraphs_.WriteTo(output, _repeated_tableDefinitionGraphs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (mainTableDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainTableDefinition);
      }
      size += tableDefinitionGraphs_.CalculateSize(_repeated_tableDefinitionGraphs_codec);
      return size;
    }

    public void MergeFrom(TableDefinitionGraphs other) {
      if (other == null) {
        return;
      }
      if (other.mainTableDefinition_ != null) {
        if (mainTableDefinition_ == null) {
          mainTableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
        }
        MainTableDefinition.MergeFrom(other.MainTableDefinition);
      }
      tableDefinitionGraphs_.Add(other.tableDefinitionGraphs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mainTableDefinition_ == null) {
              mainTableDefinition_ = new global::Org.Roylance.Yaorm.Models.TableDefinition();
            }
            input.ReadMessage(mainTableDefinition_);
            break;
          }
          case 18: {
            tableDefinitionGraphs_.AddEntriesFrom(input, _repeated_tableDefinitionGraphs_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectionInfo : pb::IMessage<ConnectionInfo> {
    private static readonly pb::MessageParser<ConnectionInfo> _parser = new pb::MessageParser<ConnectionInfo>(() => new ConnectionInfo());
    public static pb::MessageParser<ConnectionInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yaorm.Models.YaormModelReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectionInfo(ConnectionInfo other) : this() {
      host_ = other.host_;
      user_ = other.user_;
      password_ = other.password_;
      schema_ = other.schema_;
    }

    public ConnectionInfo Clone() {
      return new ConnectionInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    public string Host {
      get { return host_; }
      set {
        host_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private string user_ = "";
    public string User {
      get { return user_; }
      set {
        user_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 4;
    private string schema_ = "";
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectionInfo);
    }

    public bool Equals(ConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (User != other.User) return false;
      if (Password != other.Password) return false;
      if (Schema != other.Schema) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (User.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(User);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Schema.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Schema);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      return size;
    }

    public void MergeFrom(ConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 18: {
            User = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Schema = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
